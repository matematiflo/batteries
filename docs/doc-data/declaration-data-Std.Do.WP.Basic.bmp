{"name":"Std.Do.WP.Basic","instances":[{"typeNames":["Id","Std.Do.PostShape.pure"],"name":"Std.Do.Id.instWP","className":"Std.Do.WP"},{"typeNames":["StateT","Std.Do.PostShape.arg"],"name":"Std.Do.StateT.instWP","className":"Std.Do.WP"},{"typeNames":["ReaderT","Std.Do.PostShape.arg"],"name":"Std.Do.ReaderT.instWP","className":"Std.Do.WP"},{"typeNames":["ExceptT","Std.Do.PostShape.except"],"name":"Std.Do.ExceptT.instWP","className":"Std.Do.WP"},{"typeNames":["EStateM","Std.Do.PostShape.except"],"name":"Std.Do.EStateM.instWP","className":"Std.Do.WP"},{"typeNames":["StateM","Std.Do.PostShape.arg"],"name":"Std.Do.State.instWP","className":"Std.Do.WP"},{"typeNames":["ReaderM","Std.Do.PostShape.arg"],"name":"Std.Do.Reader.instWP","className":"Std.Do.WP"},{"typeNames":["Except","Std.Do.PostShape.except"],"name":"Std.Do.Except.instWP","className":"Std.Do.WP"}],"imports":["Std.Do.PredTrans"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L105-L111","name":"Std.Do.EStateM.by_wp","line":105,"kind":"theorem","docLink":"./Std/Do/WP/Basic.html#Std.Do.EStateM.by_wp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.EStateM.by_wp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">EStateM</span>.<span class=\"name\">by_wp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">EStateM.Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prog</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">prog</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">EStateM.Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">prog</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">(⇓ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Result.ok\">EStateM.Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s'</span>)</span></span>)</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L99-L103","name":"Std.Do.StateM.by_wp","line":99,"kind":"theorem","docLink":"./Std/Do/WP/Basic.html#Std.Do.StateM.by_wp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.StateM.by_wp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">StateM</span>.<span class=\"name\">by_wp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prog</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT.run\">StateT.run</a> <span class=\"fn\">prog</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">prog</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">(⇓ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L96-L97","name":"Std.Do.Id.by_wp","line":96,"kind":"theorem","docLink":"./Std/Do/WP/Basic.html#Std.Do.Id.by_wp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.Id.by_wp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Id</span>.<span class=\"name\">by_wp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prog</span> : <span class=\"fn\"><a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">prog</span>.<a href=\"./Init/Control/Id.html#Id.run\">run</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">prog</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">(Std.Do.PostCond.total <span class=\"fn\">P</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L93-L94","name":"Std.Do.Except.instWP","line":93,"kind":"instance","docLink":"./Std/Do/WP/Basic.html#Std.Do.Except.instWP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.Except.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Except</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L91-L92","name":"Std.Do.Reader.instWP","line":91,"kind":"instance","docLink":"./Std/Do/WP/Basic.html#Std.Do.Reader.instWP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.Reader.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Reader</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Control/Reader.html#ReaderM\">ReaderM</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L89-L90","name":"Std.Do.State.instWP","line":89,"kind":"instance","docLink":"./Std/Do/WP/Basic.html#Std.Do.State.instWP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.State.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">State</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L76-L87","name":"Std.Do.EStateM.instWP","line":76,"kind":"instance","docLink":"./Std/Do/WP/Basic.html#Std.Do.EStateM.instWP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.EStateM.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">EStateM</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L73-L74","name":"Std.Do.ExceptT.instWP","line":73,"kind":"instance","docLink":"./Std/Do/WP/Basic.html#Std.Do.ExceptT.instWP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.ExceptT.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptT</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L70-L71","name":"Std.Do.ReaderT.instWP","line":70,"kind":"instance","docLink":"./Std/Do/WP/Basic.html#Std.Do.ReaderT.instWP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.ReaderT.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ReaderT</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L67-L68","name":"Std.Do.StateT.instWP","line":67,"kind":"instance","docLink":"./Std/Do/WP/Basic.html#Std.Do.StateT.instWP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.StateT.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">StateT</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L64-L65","name":"Std.Do.Id.instWP","line":64,"kind":"instance","docLink":"./Std/Do/WP/Basic.html#Std.Do.Id.instWP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.Id.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Id</span>.<span class=\"name\">instWP</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L57-L63","name":"Std.Do.unexpandWP","line":57,"kind":"def","docLink":"./Std/Do/WP/Basic.html#Std.Do.unexpandWP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.unexpandWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">unexpandWP</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L52-L52","name":"Std.Do.«termWp⟦_:_⟧»","line":52,"kind":"def","docLink":"./Std/Do/WP/Basic.html#Std.Do.«termWp⟦_:_⟧»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.«termWp⟦_:_⟧»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«termWp⟦_:_⟧»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L48-L48","name":"Std.Do.WP.wp","line":48,"kind":"def","docLink":"./Std/Do/WP/Basic.html#Std.Do.WP.wp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">wp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L47-L47","name":"Std.Do.WP.mk","line":47,"kind":"ctor","docLink":"./Std/Do/WP/Basic.html#Std.Do.WP.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.WP.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wp</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/Basic.lean#L42-L48","name":"Std.Do.WP","line":42,"kind":"class","docLink":"./Std/Do/WP/Basic.html#Std.Do.WP","doc":"A weakest precondition interpretation of a monadic program `x : m α` in terms of a\npredicate transformer `PredTrans ps α`.\nThe monad `m` determines `ps : PostShape`. See the module comment for more details.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.WP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max 1 u)</div></div>"}]}