{"name":"Init.Grind.Ring.ToInt","instances":[],"imports":["Init.Grind.Ring.Basic","Init.Grind.ToInt"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/ToInt.lean#L16-L27","name":"Lean.Grind.ToInt.pow_of_semiring","line":16,"kind":"def","docLink":"./Init/Grind/Ring/ToInt.html#Lean.Grind.ToInt.pow_of_semiring","doc":"A `ToInt` instance on a semiring preserves powers if it preserves numerals and multiplication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/ToInt.html#Lean.Grind.ToInt.pow_of_semiring\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">pow_of_semiring</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat\">OfNat</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul\">Mul</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.isFinite\">isFinite</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\">Pow</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"}]}