{"name":"Init.Data.OfScientific","instances":[{"typeNames":["Float"],"name":"instOfScientificFloat","className":"OfScientific"},{"typeNames":["Float"],"name":"instOfNatFloat","className":"OfNat"},{"typeNames":["Float32"],"name":"instOfScientificFloat32","className":"OfScientific"},{"typeNames":["Float32"],"name":"instOfNatFloat32","className":"OfNat"}],"imports":["Init.Meta","Init.Data.Float","Init.Data.Float32","Init.Data.Nat.Log2"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L131-L132","name":"Nat.toFloat32","line":131,"kind":"def","docLink":"./Init/Data/OfScientific.html#Nat.toFloat32","doc":"Converts a natural number into the closest-possible 32-bit floating-point number, or an infinite\nfloating-point value if the range of `Float32` is exceeded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Nat.toFloat32\"><span class=\"name\">Nat</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L129-L129","name":"instOfNatFloat32","line":129,"kind":"instance","docLink":"./Init/Data/OfScientific.html#instOfNatFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#instOfNatFloat32\"><span class=\"name\">instOfNatFloat32</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L121-L127","name":"Float32.ofInt","line":121,"kind":"def","docLink":"./Init/Data/OfScientific.html#Float32.ofInt","doc":"Converts an integer into the closest-possible 32-bit floating-point number, or positive or negative\ninfinite floating-point value if the range of `Float32` is exceeded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float32.ofInt\"><span class=\"name\">Float32</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L113-L119","name":"Float32.ofNat","line":113,"kind":"def","docLink":"./Init/Data/OfScientific.html#Float32.ofNat","doc":"Converts a natural number into the closest-possible 32-bit floating-point number, or an infinite\nfloating-point value if the range of `Float32` is exceeded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float32.ofNat\"><span class=\"name\">Float32</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L110-L111","name":"instOfScientificFloat32","line":110,"kind":"instance","docLink":"./Init/Data/OfScientific.html#instOfScientificFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#instOfScientificFloat32\"><span class=\"name\">instOfScientificFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L96-L108","name":"Float32.ofScientific","line":96,"kind":"opaque","docLink":"./Init/Data/OfScientific.html#Float32.ofScientific","doc":"Constructs a `Float32` from the given mantissa, sign, and exponent values.\n\nThis function is part of the implementation of the `OfScientific Float32` instance that is used to\ninterpret floating-point literals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float32.ofScientific\"><span class=\"name\">Float32</span>.<span class=\"name\">ofScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L89-L94","name":"Float32.ofBinaryScientific","line":89,"kind":"def","docLink":"./Init/Data/OfScientific.html#Float32.ofBinaryScientific","doc":"Computes `m * 2^e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float32.ofBinaryScientific\"><span class=\"name\">Float32</span>.<span class=\"name\">ofBinaryScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L86-L87","name":"Nat.toFloat","line":86,"kind":"def","docLink":"./Init/Data/OfScientific.html#Nat.toFloat","doc":"Converts a natural number into the closest-possible 64-bit floating-point number, or an infinite\nfloating-point value if the range of `Float` is exceeded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Nat.toFloat\"><span class=\"name\">Nat</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L84-L84","name":"instOfNatFloat","line":84,"kind":"instance","docLink":"./Init/Data/OfScientific.html#instOfNatFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#instOfNatFloat\"><span class=\"name\">instOfNatFloat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/Float.html#Float\">Float</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L76-L82","name":"Float.ofInt","line":76,"kind":"def","docLink":"./Init/Data/OfScientific.html#Float.ofInt","doc":"Converts an integer into the closest-possible 64-bit floating-point number, or positive or negative\ninfinite floating-point value if the range of `Float` is exceeded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float.ofInt\"><span class=\"name\">Float</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L68-L74","name":"Float.ofNat","line":68,"kind":"def","docLink":"./Init/Data/OfScientific.html#Float.ofNat","doc":"Converts a natural number into the closest-possible 64-bit floating-point number, or an infinite\nfloating-point value if the range of `Float` is exceeded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float.ofNat\"><span class=\"name\">Float</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L57-L66","name":"instOfScientificFloat","line":57,"kind":"instance","docLink":"./Init/Data/OfScientific.html#instOfScientificFloat","doc":"The `OfScientific Float` must have priority higher than `mid` since\nthe default instance `Neg Int` has `mid` priority.\n```\n#check -42.0 -- must be Float\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#instOfScientificFloat\"><span class=\"name\">instOfScientificFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L43-L55","name":"Float.ofScientific","line":43,"kind":"opaque","docLink":"./Init/Data/OfScientific.html#Float.ofScientific","doc":"Constructs a `Float` from the given mantissa, sign, and exponent values.\n\nThis function is part of the implementation of the `OfScientific Float` instance that is used to\ninterpret floating-point literals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float.ofScientific\"><span class=\"name\">Float</span>.<span class=\"name\">ofScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L36-L41","name":"Float.ofBinaryScientific","line":36,"kind":"def","docLink":"./Init/Data/OfScientific.html#Float.ofBinaryScientific","doc":"Computes `m * 2^e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float.ofBinaryScientific\"><span class=\"name\">Float</span>.<span class=\"name\">ofBinaryScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L34-L34","name":"OfScientific.ofScientific","line":34,"kind":"def","docLink":"./Init/Data/OfScientific.html#OfScientific.ofScientific","doc":"Produces a value from the given mantissa, exponent sign, and decimal exponent. For the exponent\nsign, `true` indicates a negative exponent.\n\n Examples:\n - `1.23` is syntax for `OfScientific.ofScientific (nat_lit 123) true (nat_lit 2)`\n - `121e100` is syntax for `OfScientific.ofScientific (nat_lit 121) false (nat_lit 100)`\n\n Note the use of `nat_lit`; there is no wrapping `OfNat.ofNat` in the resulting term.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#OfScientific.ofScientific\"><span class=\"name\">OfScientific</span>.<span class=\"name\">ofScientific</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mantissa</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exponentSign</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decimalExponent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L23-L23","name":"OfScientific.mk","line":23,"kind":"ctor","docLink":"./Init/Data/OfScientific.html#OfScientific.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#OfScientific.mk\"><span class=\"name\">OfScientific</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ofScientific</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/OfScientific.lean#L16-L34","name":"OfScientific","line":16,"kind":"class","docLink":"./Init/Data/OfScientific.html#OfScientific","doc":"For decimal and scientific numbers (e.g., `1.23`, `3.12e10`).\nExamples:\n- `1.23` is syntax for `OfScientific.ofScientific (nat_lit 123) true (nat_lit 2)`\n- `121e100` is syntax for `OfScientific.ofScientific (nat_lit 121) false (nat_lit 100)`\n\nNote the use of `nat_lit`; there is no wrapping `OfNat.ofNat` in the resulting term.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#OfScientific\"><span class=\"name\">OfScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}