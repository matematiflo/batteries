{"name":"Init.Data.Iterators.Combinators.Attach","instances":[],"imports":["Init.Data.Iterators.Combinators.Monadic.Attach","Init.Data.Iterators.Combinators.FilterMap"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Attach.lean#L16-L25","name":"Std.Iterators.Iter.attachWith","line":16,"kind":"def","docLink":"./Init/Data/Iterators/Combinators/Attach.html#Std.Iterators.Iter.attachWith","doc":"“Attaches” individual proofs to an iterator of values that satisfy a predicate `P`, returning an\niterator with values in the corresponding subtype `{ x // P x }`.\n\n**Termination properties:**\n\n* `Finite` instance: only if the base iterator is finite\n* `Productive` instance: only if the base iterator is productive\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Attach.html#Std.Iterators.Iter.attachWith\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">attachWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">out</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">out</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>"}]}