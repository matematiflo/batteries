{"name":"Init.Grind.ToInt","instances":[{"typeNames":["Lean.Grind.IntInterval"],"name":"Lean.Grind.instBEqIntInterval","className":"BEq"},{"typeNames":["Eq"],"name":"Lean.Grind.instDecidableEqIntInterval","className":"Decidable"},{"typeNames":["Lean.Grind.IntInterval"],"name":"Lean.Grind.instLawfulBEqIntInterval","className":"LawfulBEq"},{"typeNames":["Int","Lean.Grind.IntInterval"],"name":"Lean.Grind.IntInterval.instMembershipInt","className":"Membership"}],"imports":["Init.Data.Int.DivMod.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L368-L372","name":"Lean.Grind.toIntUnexpander","line":368,"kind":"def","docLink":"./Init/Grind/ToInt.html#Lean.Grind.toIntUnexpander","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.toIntUnexpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">toIntUnexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L352-L359","name":"Lean.Grind.ToInt.Sub.of_sub_eq_add_neg","line":352,"kind":"def","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.of_sub_eq_add_neg","doc":"Construct a `ToInt.Sub` instance from a `ToInt.Add` and `ToInt.Neg` instance and\na `sub_eq_add_neg` assumption. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.of_sub_eq_add_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Sub</span>.<span class=\"name\">of_sub_eq_add_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">_root_.Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">_root_.Neg</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">_root_.Sub</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sub_eq_add_neg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.isFinite\">isFinite</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add\">Add</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg\">Neg</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub\">Sub</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L346-L350","name":"Lean.Grind.ToInt.wrap_toInt","line":346,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.wrap_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.wrap_toInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">wrap_toInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L340-L344","name":"Lean.Grind.ToInt.Zero.wrap_zero","line":340,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.wrap_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.wrap_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Zero</span>.<span class=\"name\">wrap_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">_root_.Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero\">Zero</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L333-L333","name":"Lean.Grind.ToInt.LT.lt_iff","line":333,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT.lt_iff","doc":"The embedding is strictly monotone with respect to `<`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT.lt_iff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LT</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">_root_.LT</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT\">LT</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L331-L331","name":"Lean.Grind.ToInt.LT.mk","line":331,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LT</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">_root_.LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt_iff</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT\">LT</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L328-L333","name":"Lean.Grind.ToInt.LT","line":328,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT","doc":"The embedding into the integers is strictly monotone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">_root_.LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L326-L326","name":"Lean.Grind.ToInt.LE.le_iff","line":326,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE.le_iff","doc":"The embedding is monotone with respect to `≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE.le_iff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LE</span>.<span class=\"name\">le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">_root_.LE</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE\">LE</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L324-L324","name":"Lean.Grind.ToInt.LE.mk","line":324,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LE</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">_root_.LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le_iff</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE\">LE</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L321-L326","name":"Lean.Grind.ToInt.LE","line":321,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE","doc":"The embedding into the integers is monotone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">_root_.LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L319-L319","name":"Lean.Grind.ToInt.Div.toInt_div","line":319,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div.toInt_div","doc":"The embedding takes division to division (without needing to wrap into the range interval).\nOne might expect a `wrap` on the right hand side,\nbut in practice this stronger statement is usually true.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div.toInt_div\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Div</span>.<span class=\"name\">toInt_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">_root_.Div</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div\">Div</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L313-L313","name":"Lean.Grind.ToInt.Div.mk","line":313,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Div</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">_root_.Div</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_div</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div\">Div</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L310-L319","name":"Lean.Grind.ToInt.Div","line":310,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div","doc":"The embedding into the integers takes division to division, wrapped into the range interval.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">_root_.Div</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L308-L308","name":"Lean.Grind.ToInt.Mod.toInt_mod","line":308,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod.toInt_mod","doc":"The embedding takes modulo to modulo (without needing to wrap into the range interval).\nOne might expect a `wrap` on the right hand side,\nbut in practice this stronger statement is usually true.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod.toInt_mod\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mod</span>.<span class=\"name\">toInt_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">_root_.Mod</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod\">Mod</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L302-L302","name":"Lean.Grind.ToInt.Mod.mk","line":302,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mod</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">_root_.Mod</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_mod</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod\">Mod</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L299-L308","name":"Lean.Grind.ToInt.Mod","line":299,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod","doc":"The embedding into the integers takes modulo to modulo (without needing to wrap into the range interval).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">_root_.Mod</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L297-L297","name":"Lean.Grind.ToInt.Pow.toInt_pow","line":297,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow.toInt_pow","doc":"The embedding takes exponentiation to exponentiation, wrapped into the range interval. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow.toInt_pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Pow</span>.<span class=\"name\">toInt_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#HPow\">HPow</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\">Pow</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L295-L295","name":"Lean.Grind.ToInt.Pow.mk","line":295,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Pow</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#HPow\">HPow</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_pow</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\">Pow</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L292-L297","name":"Lean.Grind.ToInt.Pow","line":292,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow","doc":"The embedding into the integers takes exponentiation to exponentiation, wrapped into the range interval.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#HPow\">HPow</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L290-L290","name":"Lean.Grind.ToInt.Mul.toInt_mul","line":290,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul.toInt_mul","doc":"The embedding takes multiplication to multiplication, wrapped into the range interval. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul.toInt_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mul</span>.<span class=\"name\">toInt_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">_root_.Mul</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul\">Mul</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L288-L288","name":"Lean.Grind.ToInt.Mul.mk","line":288,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mul</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">_root_.Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_mul</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul\">Mul</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L285-L290","name":"Lean.Grind.ToInt.Mul","line":285,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul","doc":"The embedding into the integers takes multiplication to multiplication, wrapped into the range interval.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">_root_.Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L283-L283","name":"Lean.Grind.ToInt.Sub.toInt_sub","line":283,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.toInt_sub","doc":"The embedding takes subtraction to subtraction, wrapped into the range interval. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.toInt_sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Sub</span>.<span class=\"name\">toInt_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">_root_.Sub</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub\">Sub</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L281-L281","name":"Lean.Grind.ToInt.Sub.mk","line":281,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Sub</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">_root_.Sub</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_sub</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub\">Sub</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L278-L283","name":"Lean.Grind.ToInt.Sub","line":278,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub","doc":"The embedding into the integers takes subtraction to subtraction, wrapped into the range interval.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">_root_.Sub</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L276-L276","name":"Lean.Grind.ToInt.Neg.toInt_neg","line":276,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg.toInt_neg","doc":"The embedding takes negation to negation, wrapped into the range interval. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg.toInt_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Neg</span>.<span class=\"name\">toInt_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">_root_.Neg</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg\">Neg</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L274-L274","name":"Lean.Grind.ToInt.Neg.mk","line":274,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Neg</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">_root_.Neg</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_neg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg\">Neg</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L271-L276","name":"Lean.Grind.ToInt.Neg","line":271,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg","doc":"The embedding into the integers takes negation to negation, wrapped into the range interval.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">_root_.Neg</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L269-L269","name":"Lean.Grind.ToInt.Add.toInt_add","line":269,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add.toInt_add","doc":"The embedding takes addition to addition, wrapped into the range interval. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add.toInt_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Add</span>.<span class=\"name\">toInt_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">_root_.Add</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add\">Add</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L267-L267","name":"Lean.Grind.ToInt.Add.mk","line":267,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Add</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">_root_.Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_add</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add\">Add</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L264-L269","name":"Lean.Grind.ToInt.Add","line":264,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add","doc":"The embedding into the integers takes addition to addition, wrapped into the range interval.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">_root_.Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L262-L262","name":"Lean.Grind.ToInt.OfNat.toInt_ofNat","line":262,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat.toInt_ofNat","doc":"The embedding takes `OfNat` to `OfNat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat.toInt_ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toInt_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">_root_.OfNat</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat\">OfNat</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L260-L260","name":"Lean.Grind.ToInt.OfNat.mk","line":260,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">_root_.OfNat</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_ofNat</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">IntInterval.wrap</a> <span class=\"fn\">I</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat\">OfNat</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L257-L262","name":"Lean.Grind.ToInt.OfNat","line":257,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat","doc":"The embedding into the integers takes numerals in the range interval to themselves.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">OfNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">_root_.OfNat</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L255-L255","name":"Lean.Grind.ToInt.Zero.toInt_zero","line":255,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.toInt_zero","doc":"The embedding takes `0` to `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.toInt_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Zero</span>.<span class=\"name\">toInt_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">_root_.Zero</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero\">Zero</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L253-L253","name":"Lean.Grind.ToInt.Zero.mk","line":253,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Zero</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">_root_.Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_zero</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero\">Zero</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L250-L255","name":"Lean.Grind.ToInt.Zero","line":250,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero","doc":"The embedding into the integers takes `0` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">_root_.Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L248-L248","name":"Lean.Grind.ToInt.toInt_mem","line":248,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt_mem","doc":"The embedding function lands in the interval. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt_mem\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">toInt_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">range</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">range</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L246-L246","name":"Lean.Grind.ToInt.toInt_inj","line":246,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt_inj","doc":"The embedding function is injective. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt_inj\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">toInt_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">range</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L244-L244","name":"Lean.Grind.ToInt.toInt","line":244,"kind":"def","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt","doc":"The embedding function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">toInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">range</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L242-L242","name":"Lean.Grind.ToInt.mk","line":242,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_inj</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toInt</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">toInt</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_mem</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">toInt</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">range</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">range</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L239-L248","name":"Lean.Grind.ToInt","line":239,"kind":"class","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt","doc":"`ToInt α I` asserts that `α` can be embedded faithfully into an interval `I` in the integers.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L229-L235","name":"Lean.Grind.IntInterval.wrap_eq_wrap_iff","line":229,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_wrap_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_wrap_iff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_eq_wrap_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi </span><span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co\">co</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span>)</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co\">co</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span>)</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> (<span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">lo</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L190-L227","name":"Lean.Grind.IntInterval.wrap_eq_bmod","line":190,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_bmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_eq_bmod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co\">co</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>) <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">(<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span>).<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L170-L188","name":"Lean.Grind.IntInterval.wrap_mul","line":170,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.isFinite\">isFinite</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">y</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L157-L168","name":"Lean.Grind.IntInterval.wrap_add","line":157,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.isFinite\">isFinite</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">y</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L136-L155","name":"Lean.Grind.IntInterval.wrap_eq_self_iff","line":136,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_self_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_self_iff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_eq_self_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty\">nonEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">i</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L115-L134","name":"Lean.Grind.IntInterval.wrap_mem","line":115,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_mem\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty\">nonEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">i</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L111-L113","name":"Lean.Grind.IntInterval.wrap_wrap","line":111,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_wrap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_wrap\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_wrap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L103-L109","name":"Lean.Grind.IntInterval.wrap","line":103,"kind":"def","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L100-L101","name":"Lean.Grind.IntInterval.nonEmpty_of_mem","line":100,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty_of_mem\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">nonEmpty_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty\">nonEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L98-L98","name":"Lean.Grind.IntInterval.mem_ii","line":98,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_ii","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_ii\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">mem_ii</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ii\">ii</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#True\">True</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L97-L97","name":"Lean.Grind.IntInterval.mem_io","line":97,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_io","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_io\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">mem_io</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi </span><span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.io\">io</a> <span class=\"fn\">hi</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L96-L96","name":"Lean.Grind.IntInterval.mem_ci","line":96,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_ci","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_ci\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">mem_ci</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ci\">ci</a> <span class=\"fn\">lo</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L95-L95","name":"Lean.Grind.IntInterval.mem_co","line":95,"kind":"theorem","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_co","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_co\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">mem_co</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi </span><span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co\">co</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L92-L93","name":"Lean.Grind.IntInterval.instMembershipInt","line":92,"kind":"instance","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.instMembershipInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.instMembershipInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">instMembershipInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L85-L90","name":"Lean.Grind.IntInterval.mem","line":85,"kind":"def","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L77-L83","name":"Lean.Grind.IntInterval.isFinite","line":77,"kind":"def","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.isFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.isFinite\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">isFinite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L69-L75","name":"Lean.Grind.IntInterval.nonEmpty","line":69,"kind":"def","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">nonEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L61-L67","name":"Lean.Grind.IntInterval.hi?","line":61,"kind":"def","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.hi?","doc":"The upper bound of the interval, if finite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.hi?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">hi?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L53-L59","name":"Lean.Grind.IntInterval.lo?","line":53,"kind":"def","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.lo?","doc":"The lower bound of the interval, if finite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.lo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">lo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L50-L51","name":"Lean.Grind.IntInterval.sint","line":50,"kind":"def","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.sint","doc":"The interval `[-2^(n-1), 2^(n-1))`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.sint\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">sint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L48-L49","name":"Lean.Grind.IntInterval.uint","line":48,"kind":"def","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.uint","doc":"The interval `[0, 2^n)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.uint\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">uint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L42-L44","name":"Lean.Grind.instLawfulBEqIntInterval","line":42,"kind":"instance","docLink":"./Init/Grind/ToInt.html#Lean.Grind.instLawfulBEqIntInterval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.instLawfulBEqIntInterval\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instLawfulBEqIntInterval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L40-L40","name":"Lean.Grind.instDecidableEqIntInterval","line":40,"kind":"instance","docLink":"./Init/Grind/ToInt.html#Lean.Grind.instDecidableEqIntInterval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.instDecidableEqIntInterval\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instDecidableEqIntInterval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L40-L40","name":"Lean.Grind.instBEqIntInterval","line":40,"kind":"instance","docLink":"./Init/Grind/ToInt.html#Lean.Grind.instBEqIntInterval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.instBEqIntInterval\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqIntInterval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L38-L39","name":"Lean.Grind.IntInterval.ii","line":38,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ii","doc":"The infinite interval `(-∞, ∞)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ii\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">ii</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L36-L37","name":"Lean.Grind.IntInterval.io","line":36,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.io","doc":"The half-infinite interval `(-∞, hi)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.io\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">io</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L34-L35","name":"Lean.Grind.IntInterval.ci","line":34,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ci","doc":"The half-infinite interval `[lo, ∞)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ci\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">ci</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L32-L33","name":"Lean.Grind.IntInterval.co","line":32,"kind":"ctor","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co","doc":"The finite interval `[lo, hi)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">co</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/ToInt.lean#L30-L40","name":"Lean.Grind.IntInterval","line":30,"kind":"inductive","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval","doc":"An interval in the integers (either finite, half-infinite, or infinite). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}