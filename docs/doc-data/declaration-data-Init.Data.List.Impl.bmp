{"name":"Init.Data.List.Impl","instances":[],"imports":["Init.Data.Array.Bootstrap"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L620-L623","name":"List.intercalate_eq_intercalateTR.go","line":620,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.intercalate_eq_intercalateTR.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.intercalate_eq_intercalateTR.go\"><span class=\"name\">List</span>.<span class=\"name\">intercalate_eq_intercalateTR</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sep</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Impl.html#List.intercalateTR.go\">intercalateTR.go</a> <span class=\"fn\"><span class=\"fn\">sep</span>.<a href=\"./Init/Prelude.html#List.toArray\">toArray</a></span> <span class=\"fn\">x</span> <span class=\"fn\">xs</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.intersperse\">intersperse</a> <span class=\"fn\">sep</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>))</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L614-L624","name":"List.intercalate_eq_intercalateTR","line":614,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.intercalate_eq_intercalateTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.intercalate_eq_intercalateTR\"><span class=\"name\">List</span>.<span class=\"name\">intercalate_eq_intercalateTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.intercalate\">intercalate</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.intercalateTR\">intercalateTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L609-L611","name":"List.intercalateTR.go","line":609,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.intercalateTR.go","doc":"Auxiliary for `intercalateTR`:\n`intercalateTR.go sep x xs acc = acc.toList ++ intercalate sep.toList (x::xs)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.intercalateTR.go\"><span class=\"name\">List</span>.<span class=\"name\">intercalateTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sep</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L591-L611","name":"List.intercalateTR","line":591,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.intercalateTR","doc":"Alternates the lists in `xs` with the separator `sep`.\n\nThis is a tail-recursive version of `List.intercalate` used at runtime.\n\nExamples:\n* `List.intercalateTR sep [] = []`\n* `List.intercalateTR sep [a] = a`\n* `List.intercalateTR sep [a, b] = a ++ sep ++ b`\n* `List.intercalateTR sep [a, b, c] = a ++ sep ++ b ++ sep ++ c`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.intercalateTR\"><span class=\"name\">List</span>.<span class=\"name\">intercalateTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sep</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L578-L582","name":"List.enumFrom_eq_enumFromTR.go","line":578,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.enumFrom_eq_enumFromTR.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.enumFrom_eq_enumFromTR.go\"><span class=\"name\">List</span>.<span class=\"name\">enumFrom_eq_enumFromTR</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">have <span class=\"fn\">f</span> := <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span>) =&gt;\n  <span class=\"fn\">match <span class=\"fn\">x</span> with\n  | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">acc</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">acc</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span>;\n<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">foldr</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.enumFrom\">enumFrom</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L574-L584","name":"List.enumFrom_eq_enumFromTR","line":574,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.enumFrom_eq_enumFromTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.enumFrom_eq_enumFromTR\"><span class=\"name\">List</span>.<span class=\"name\">enumFrom_eq_enumFromTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.enumFrom\">enumFrom</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.enumFromTR\">enumFromTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L567-L571","name":"List.enumFromTR","line":567,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.enumFromTR","doc":"Tail recursive version of `List.enumFrom`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.enumFromTR\"><span class=\"name\">List</span>.<span class=\"name\">enumFromTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L557-L561","name":"List.zipIdx_eq_zipIdxTR.go","line":557,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.zipIdx_eq_zipIdxTR.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.zipIdx_eq_zipIdxTR.go\"><span class=\"name\">List</span>.<span class=\"name\">zipIdx_eq_zipIdxTR</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">have <span class=\"fn\">f</span> := <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>) =&gt;\n  <span class=\"fn\">match <span class=\"fn\">x</span> with\n  | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">acc</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">acc</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span>;\n<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">foldr</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.zipIdx\">zipIdx</a></span> <span class=\"fn\">i</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L554-L563","name":"List.zipIdx_eq_zipIdxTR","line":554,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.zipIdx_eq_zipIdxTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.zipIdx_eq_zipIdxTR\"><span class=\"name\">List</span>.<span class=\"name\">zipIdx_eq_zipIdxTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.zipIdx\">zipIdx</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.zipIdxTR\">zipIdxTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L541-L552","name":"List.zipIdxTR","line":541,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.zipIdxTR","doc":"Pairs each element of a list with its index, optionally starting from an index other than `0`.\n\n`O(|l|)`. This is a tail-recursive version of `List.zipIdx` that's used at runtime.\n\nExamples:\n* `[a, b, c].zipIdxTR = [(a, 0), (b, 1), (c, 2)]`\n* `[a, b, c].zipIdxTR 5 = [(a, 5), (b, 6), (c, 7)]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.zipIdxTR\"><span class=\"name\">List</span>.<span class=\"name\">zipIdxTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L531-L533","name":"List.zipWith_eq_zipWithTR.go","line":531,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.zipWith_eq_zipWithTR.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.zipWith_eq_zipWithTR.go\"><span class=\"name\">List</span>.<span class=\"name\">zipWith_eq_zipWithTR</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Impl.html#List.zipWithTR.go\">zipWithTR.go</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L529-L534","name":"List.zipWith_eq_zipWithTR","line":529,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.zipWith_eq_zipWithTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.zipWith_eq_zipWithTR\"><span class=\"name\">List</span>.<span class=\"name\">zipWith_eq_zipWithTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.zipWith\">zipWith</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.zipWithTR\">zipWithTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L525-L527","name":"List.zipWithTR.go","line":525,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.zipWithTR.go","doc":"Auxiliary for `zipWith`: `zipWith.go f as bs acc = acc.toList ++ zipWith f as bs` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.zipWithTR.go\"><span class=\"name\">List</span>.<span class=\"name\">zipWithTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">γ</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L511-L527","name":"List.zipWithTR","line":511,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.zipWithTR","doc":"Applies a function to the corresponding elements of two lists, stopping at the end of the shorter\nlist.\n\n`O(min |xs| |ys|)`. This is a tail-recursive version of `List.zipWith` that's used at runtime.\n\nExamples:\n* `[1, 2].zipWithTR (· + ·) [5, 6] = [6, 8]`\n* `[1, 2, 3].zipWithTR (· + ·) [5, 6, 10] = [6, 8, 13]`\n* `[].zipWithTR (· + ·) [5, 6] = []`\n* `[x₁, x₂, x₃].zipWithTR f [y₁, y₂, y₃, y₄] = [f x₁ y₁, f x₂ y₂, f x₃ y₃]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.zipWithTR\"><span class=\"name\">List</span>.<span class=\"name\">zipWithTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L494-L505","name":"List.eraseIdx_eq_eraseIdxTR","line":494,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.eraseIdx_eq_eraseIdxTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.eraseIdx_eq_eraseIdxTR\"><span class=\"name\">List</span>.<span class=\"name\">eraseIdx_eq_eraseIdxTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.eraseIdx\">eraseIdx</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.eraseIdxTR\">eraseIdxTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L489-L492","name":"List.eraseIdxTR.go","line":489,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.eraseIdxTR.go","doc":"Auxiliary for `eraseIdxTR`: `eraseIdxTR.go l n xs acc = acc.toList ++ eraseIdx xs a`,\nunless `a` is not present in which case it returns `l` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.eraseIdxTR.go\"><span class=\"name\">List</span>.<span class=\"name\">eraseIdxTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L473-L492","name":"List.eraseIdxTR","line":473,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.eraseIdxTR","doc":"Removes the element at the specified index. If the index is out of bounds, the list is returned\nunmodified.\n\n`O(i)`.\n\nThis is a tail-recursive version of `List.eraseIdx`, used at runtime.\n\nExamples:\n* `[0, 1, 2, 3, 4].eraseIdxTR 0 = [1, 2, 3, 4]`\n* `[0, 1, 2, 3, 4].eraseIdxTR 1 = [0, 2, 3, 4]`\n* `[0, 1, 2, 3, 4].eraseIdxTR 5 = [0, 1, 2, 3, 4]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.eraseIdxTR\"><span class=\"name\">List</span>.<span class=\"name\">eraseIdxTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L462-L467","name":"List.eraseP_eq_erasePTR.go","line":462,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.eraseP_eq_erasePTR.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.eraseP_eq_erasePTR.go\"><span class=\"name\">List</span>.<span class=\"name\">eraseP_eq_erasePTR</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">xs</span> → <span class=\"fn\"><a href=\"./Init/Data/List/Impl.html#List.erasePTR.go\">erasePTR.go</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span> <span class=\"fn\">xs</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.eraseP\">eraseP</a> <span class=\"fn\">p</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L460-L468","name":"List.eraseP_eq_erasePTR","line":460,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.eraseP_eq_erasePTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.eraseP_eq_erasePTR\"><span class=\"name\">List</span>.<span class=\"name\">eraseP_eq_erasePTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.eraseP\">eraseP</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.erasePTR\">erasePTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L456-L458","name":"List.erasePTR.go","line":456,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.erasePTR.go","doc":"Auxiliary for `erasePTR`: `erasePTR.go p l xs acc = acc.toList ++ eraseP p xs`,\nunless `xs` does not contain any elements satisfying `p`, where it returns `l`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.erasePTR.go\"><span class=\"name\">List</span>.<span class=\"name\">erasePTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L442-L458","name":"List.erasePTR","line":442,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.erasePTR","doc":"Removes the first element of a list for which `p` returns `true`. If no element satisfies `p`, then\nthe list is returned unchanged.\n\nThis is a tail-recursive version of `eraseP`, used at runtime.\n\nExamples:\n  * `[2, 1, 2, 1, 3, 4].erasePTR (· < 2) = [2, 2, 1, 3, 4]`\n  * `[2, 1, 2, 1, 3, 4].erasePTR (· > 2) = [2, 1, 2, 1, 4]`\n  * `[2, 1, 2, 1, 3, 4].erasePTR (· > 8) = [2, 1, 2, 1, 3, 4]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.erasePTR\"><span class=\"name\">List</span>.<span class=\"name\">erasePTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L430-L440","name":"List.erase_eq_eraseTR","line":430,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.erase_eq_eraseTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.erase_eq_eraseTR\"><span class=\"name\">List</span>.<span class=\"name\">erase_eq_eraseTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.erase\">List.erase</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.eraseTR\">eraseTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L426-L428","name":"List.eraseTR.go","line":426,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.eraseTR.go","doc":"Auxiliary for `eraseTR`: `eraseTR.go l a xs acc = acc.toList ++ erase xs a`,\nunless `a` is not present in which case it returns `l` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.eraseTR.go\"><span class=\"name\">List</span>.<span class=\"name\">eraseTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L411-L428","name":"List.eraseTR","line":411,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.eraseTR","doc":"Removes the first occurrence of `a` from `l`. If `a` does not occur in `l`, the list is returned\nunmodified.\n\n`O(|l|)`.\n\nThis is a tail-recursive version of `List.erase`, used in runtime code.\n\nExamples:\n* `[1, 5, 3, 2, 5].eraseTR 5 = [1, 3, 2, 5]`\n* `[1, 5, 3, 2, 5].eraseTR 6 = [1, 5, 3, 2, 5]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.eraseTR\"><span class=\"name\">List</span>.<span class=\"name\">eraseTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L406-L407","name":"List.insertIdx_eq_insertIdxTR","line":406,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.insertIdx_eq_insertIdxTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.insertIdx_eq_insertIdxTR\"><span class=\"name\">List</span>.<span class=\"name\">insertIdx_eq_insertIdxTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">insertIdx</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.insertIdxTR\">insertIdxTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L402-L404","name":"List.insertIdxTR_go_eq","line":402,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.insertIdxTR_go_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.insertIdxTR_go_eq\"><span class=\"name\">List</span>.<span class=\"name\">insertIdxTR_go_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Impl.html#List.insertIdxTR.go\">insertIdxTR.go</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">l</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">insertIdx</a></span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L397-L400","name":"List.insertIdxTR.go","line":397,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.insertIdxTR.go","doc":"Auxiliary for `insertIdxTR`: `insertIdxTR.go a n l acc = acc.toList ++ insertIdx n a l`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.insertIdxTR.go\"><span class=\"name\">List</span>.<span class=\"name\">insertIdxTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L380-L400","name":"List.insertIdxTR","line":380,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.insertIdxTR","doc":"Inserts an element into a list at the specified index. If the index is greater than the length of\nthe list, then the list is returned unmodified.\n\nIn other words, the new element is inserted into the list `l` after the first `i` elements of `l`.\n\nThis is a tail-recursive version of `List.insertIdx`, used at runtime.\n\nExamples:\n * `[\"tues\", \"thur\", \"sat\"].insertIdxTR 1 \"wed\" = [\"tues\", \"wed\", \"thur\", \"sat\"]`\n * `[\"tues\", \"thur\", \"sat\"].insertIdxTR 2 \"wed\" = [\"tues\", \"thur\", \"wed\", \"sat\"]`\n * `[\"tues\", \"thur\", \"sat\"].insertIdxTR 3 \"wed\" = [\"tues\", \"thur\", \"sat\", \"wed\"]`\n * `[\"tues\", \"thur\", \"sat\"].insertIdxTR 4 \"wed\" = [\"tues\", \"thur\", \"sat\"]`\n\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.insertIdxTR\"><span class=\"name\">List</span>.<span class=\"name\">insertIdxTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L375-L376","name":"List.modify_eq_modifyTR","line":375,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.modify_eq_modifyTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.modify_eq_modifyTR\"><span class=\"name\">List</span>.<span class=\"name\">modify_eq_modifyTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.modify\">modify</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.modifyTR\">modifyTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L370-L373","name":"List.modifyTR_go_eq","line":370,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.modifyTR_go_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.modifyTR_go_eq\"><span class=\"name\">List</span>.<span class=\"name\">modifyTR_go_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Impl.html#List.modifyTR.go\">modifyTR.go</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span> <span class=\"fn\">i</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.modify\">modify</a></span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L365-L368","name":"List.modifyTR.go","line":365,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.modifyTR.go","doc":"Auxiliary for `modifyTR`: `modifyTR.go f l i acc = acc.toList ++ modify f i l`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.modifyTR.go\"><span class=\"name\">List</span>.<span class=\"name\">modifyTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L353-L368","name":"List.modifyTR","line":353,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.modifyTR","doc":"Replaces the element at the given index, if it exists, with the result of applying `f` to it.\n\nThis is a tail-recursive version of `List.modify`.\n\nExamples:\n* `[1, 2, 3].modifyTR 0 (· * 10) = [10, 2, 3]`\n* `[1, 2, 3].modifyTR 2 (· * 10) = [1, 2, 30]`\n* `[1, 2, 3].modifyTR 3 (· * 10) = [1, 2, 3]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.modifyTR\"><span class=\"name\">List</span>.<span class=\"name\">modifyTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L338-L349","name":"List.replace_eq_replaceTR","line":338,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.replace_eq_replaceTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.replace_eq_replaceTR\"><span class=\"name\">List</span>.<span class=\"name\">replace_eq_replaceTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.replace\">replace</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.replaceTR\">replaceTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L334-L336","name":"List.replaceTR.go","line":334,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.replaceTR.go","doc":"Auxiliary for `replace`: `replace.go l b c xs acc = acc.toList ++ replace xs b c`,\nunless `b` is not found in `xs` in which case it returns `l`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.replaceTR.go\"><span class=\"name\">List</span>.<span class=\"name\">replaceTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L321-L336","name":"List.replaceTR","line":321,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.replaceTR","doc":"Replaces the first element of the list `l` that is equal to `a` with `b`. If no element is equal to\n`a`, then the list is returned unchanged.\n\n`O(|l|)`. This is a tail-recursive version of `List.replace` that's used in runtime code.\n\nExamples:\n* `[1, 4, 2, 3, 3, 7].replaceTR 3 6 = [1, 4, 2, 6, 3, 7]`\n* `[1, 4, 2, 3, 3, 7].replaceTR 5 6 = [1, 4, 2, 3, 3, 7]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.replaceTR\"><span class=\"name\">List</span>.<span class=\"name\">replaceTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L313-L315","name":"List.findSomeRev?_eq_findSome?_reverse","line":313,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.findSomeRev?_eq_findSome?_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.findSomeRev?_eq_findSome?_reverse\"><span class=\"name\">List</span>.<span class=\"name\">findSomeRev?_eq_findSome?_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.findSomeRev?\">findSomeRev?</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.findSome?\">findSome?</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L304-L311","name":"List.findSomeRev?_eq_findSomeRev?TR","line":304,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.findSomeRev?_eq_findSomeRev?TR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.findSomeRev?_eq_findSomeRev?TR\"><span class=\"name\">List</span>.<span class=\"name\">findSomeRev?_eq_findSomeRev?TR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.findSomeRev?\">findSomeRev?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.findSomeRev?TR\">findSomeRev?TR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L297-L302","name":"List.findSome?_append","line":297,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.findSome?_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.findSome?_append\"><span class=\"name\">List</span>.<span class=\"name\">findSome?_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α✝</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.findSome?\">findSome?</a> <span class=\"fn\">f</span> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">ys</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.findSome?\">findSome?</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.or\">or</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.findSome?\">findSome?</a> <span class=\"fn\">f</span> <span class=\"fn\">ys</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L292-L295","name":"List.findSome?_singleton","line":292,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.findSome?_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.findSome?_singleton\"><span class=\"name\">List</span>.<span class=\"name\">findSome?_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α✝</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.findSome?\">findSome?</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L289-L290","name":"List.findSomeRev?TR","line":289,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.findSomeRev?TR","doc":"Tail recursive implementation of `finSomedRev?`. This is only used at runtime. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.findSomeRev?TR\"><span class=\"name\">List</span>.<span class=\"name\">findSomeRev?TR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L285-L287","name":"List.findRev?_eq_find?_reverse","line":285,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.findRev?_eq_find?_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.findRev?_eq_find?_reverse\"><span class=\"name\">List</span>.<span class=\"name\">findRev?_eq_find?_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.findRev?\">findRev?</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">find?</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L277-L283","name":"List.findRev?_eq_findRev?TR","line":277,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.findRev?_eq_findRev?TR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.findRev?_eq_findRev?TR\"><span class=\"name\">List</span>.<span class=\"name\">findRev?_eq_findRev?TR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.findRev?\">findRev?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.findRev?TR\">findRev?TR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L270-L275","name":"List.find?_append","line":270,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.find?_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.find?_append\"><span class=\"name\">List</span>.<span class=\"name\">find?_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">find?</a> <span class=\"fn\">p</span> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">ys</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.find?\">find?</a> <span class=\"fn\">p</span> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.or\">or</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.find?\">find?</a> <span class=\"fn\">p</span> <span class=\"fn\">ys</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L266-L268","name":"List.find?_singleton","line":266,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.find?_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.find?_singleton\"><span class=\"name\">List</span>.<span class=\"name\">find?_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">find?</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L263-L264","name":"List.findRev?TR","line":263,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.findRev?TR","doc":"Tail recursive implementation of `findRev?`. This is only used at runtime. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.findRev?TR\"><span class=\"name\">List</span>.<span class=\"name\">findRev?TR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L258-L259","name":"List.dropLast_eq_dropLastTR","line":258,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.dropLast_eq_dropLastTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.dropLast_eq_dropLastTR\"><span class=\"name\">List</span>.<span class=\"name\">dropLast_eq_dropLastTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.dropLast\">dropLast</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.dropLastTR\">dropLastTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L246-L256","name":"List.dropLastTR","line":246,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.dropLastTR","doc":"Removes the last element of the list, if one exists.\n\nThis is a tail-recursive version of `List.dropLast`, used at runtime.\n\nExamples:\n* `[].dropLastTR = []`\n* `[\"tea\"].dropLastTR = []`\n* `[\"tea\", \"coffee\", \"juice\"].dropLastTR = [\"tea\", \"coffee\"]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.dropLastTR\"><span class=\"name\">List</span>.<span class=\"name\">dropLastTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L231-L242","name":"List.takeWhile_eq_takeWhileTR","line":231,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.takeWhile_eq_takeWhileTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.takeWhile_eq_takeWhileTR\"><span class=\"name\">List</span>.<span class=\"name\">takeWhile_eq_takeWhileTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">takeWhile</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.takeWhileTR\">takeWhileTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L227-L229","name":"List.takeWhileTR.go","line":227,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.takeWhileTR.go","doc":"Auxiliary for `takeWhile`: `takeWhile.go p l xs acc = acc.toList ++ takeWhile p xs`,\nunless no element satisfying `p` is found in `xs` in which case it returns `l`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.takeWhileTR.go\"><span class=\"name\">List</span>.<span class=\"name\">takeWhileTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L214-L229","name":"List.takeWhileTR","line":214,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.takeWhileTR","doc":"Returns the longest initial segment of `xs` for which `p` returns true.\n\n`O(|xs|)`. This is a tail-recursive version of `List.take`, used at runtime.\n\nExamples:\n* `[7, 6, 4, 8].takeWhileTR (· > 5) = [7, 6]`\n* `[7, 6, 6, 5].takeWhileTR (· > 5) = [7, 6, 6]`\n* `[7, 6, 6, 8].takeWhileTR (· > 5) = [7, 6, 6, 8]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.takeWhileTR\"><span class=\"name\">List</span>.<span class=\"name\">takeWhileTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L200-L209","name":"List.take_eq_takeTR","line":200,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.take_eq_takeTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.take_eq_takeTR\"><span class=\"name\">List</span>.<span class=\"name\">take_eq_takeTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.takeTR\">takeTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L195-L198","name":"List.takeTR.go","line":195,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.takeTR.go","doc":"Auxiliary for `take`: `take.go l xs n acc = acc.toList ++ take n xs`,\nunless `n ≥ xs.length` in which case it returns `l`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.takeTR.go\"><span class=\"name\">List</span>.<span class=\"name\">takeTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L182-L198","name":"List.takeTR","line":182,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.takeTR","doc":"Extracts the first `n` elements of `xs`, or the whole list if `n` is greater than `xs.length`.\n\n`O(min n |xs|)`. This is a tail-recursive version of `List.take`, used at runtime.\n\nExamples:\n* `[a, b, c, d, e].takeTR 0 = []`\n* `[a, b, c, d, e].takeTR 3 = [a, b, c]`\n* `[a, b, c, d, e].takeTR 6 = [a, b, c, d, e]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.takeTR\"><span class=\"name\">List</span>.<span class=\"name\">takeTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L175-L176","name":"List.flatten_eq_flattenTR","line":175,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.flatten_eq_flattenTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.flatten_eq_flattenTR\"><span class=\"name\">List</span>.<span class=\"name\">flatten_eq_flattenTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.flattenTR\">flattenTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L164-L173","name":"List.flattenTR","line":164,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.flattenTR","doc":"Concatenates a list of lists into a single list, preserving the order of the elements.\n\n`O(|flatten L|)`. This is a tail-recursive version of `List.flatten`, used in runtime code.\n\nExamples:\n* `[[\"a\"], [\"b\", \"c\"]].flattenTR = [\"a\", \"b\", \"c\"]`\n* `[[\"a\"], [], [\"b\", \"c\"], [\"d\", \"e\", \"f\"]].flattenTR = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.flattenTR\"><span class=\"name\">List</span>.<span class=\"name\">flattenTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L157-L159","name":"List.flatMap_eq_flatMapTR.go","line":157,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.flatMap_eq_flatMapTR.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.flatMap_eq_flatMapTR.go\"><span class=\"name\">List</span>.<span class=\"name\">flatMap_eq_flatMapTR</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Impl.html#List.flatMapTR.go\">flatMapTR.go</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.flatMap\">flatMap</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L155-L160","name":"List.flatMap_eq_flatMapTR","line":155,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.flatMap_eq_flatMapTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.flatMap_eq_flatMapTR\"><span class=\"name\">List</span>.<span class=\"name\">flatMap_eq_flatMapTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.flatMap\">flatMap</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.flatMapTR\">flatMapTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L151-L153","name":"List.flatMapTR.go","line":151,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.flatMapTR.go","doc":"Auxiliary for `flatMap`: `flatMap.go f as = acc.toList ++ bind f as` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.flatMapTR.go\"><span class=\"name\">List</span>.<span class=\"name\">flatMapTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L139-L153","name":"List.flatMapTR","line":139,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.flatMapTR","doc":"Applies a function that returns a list to each element of a list, and concatenates the resulting\nlists.\n\nThis is the tail-recursive version of `List.flatMap` that's used at runtime.\n\nExamples:\n* `[2, 3, 2].flatMapTR List.range = [0, 1, 0, 1, 2, 0, 1]`\n* `[\"red\", \"blue\"].flatMapTR String.toList = ['r', 'e', 'd', 'b', 'l', 'u', 'e']`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.flatMapTR\"><span class=\"name\">List</span>.<span class=\"name\">flatMapTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L134-L135","name":"List.foldr_eq_foldrTR","line":134,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.foldr_eq_foldrTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.foldr_eq_foldrTR\"><span class=\"name\">List</span>.<span class=\"name\">foldr_eq_foldrTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.foldr\">foldr</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.foldrTR\">foldrTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L121-L132","name":"List.foldrTR","line":121,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.foldrTR","doc":"Folds a function over a list from the right, accumulating a value starting with `init`. The\naccumulated value is combined with the each element of the list in reverse order, using `f`.\n\n`O(|l|)`. This is the tail-recursive replacement for `List.foldr` in runtime code.\n\nExamples:\n * `[a, b, c].foldrTR f init  = f a (f b (f c init))`\n * `[1, 2, 3].foldrTR (toString · ++ ·) \"\" = \"123\"`\n * `[1, 2, 3].foldrTR (s!\"({·} {·})\") \"!\" = \"(1 (2 (3 !)))\"`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.foldrTR\"><span class=\"name\">List</span>.<span class=\"name\">foldrTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L111-L116","name":"List.filterMap_eq_filterMapTR.go","line":111,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.filterMap_eq_filterMapTR.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.filterMap_eq_filterMapTR.go\"><span class=\"name\">List</span>.<span class=\"name\">filterMap_eq_filterMapTR</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Impl.html#List.filterMapTR.go\">filterMapTR.go</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L109-L117","name":"List.filterMap_eq_filterMapTR","line":109,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.filterMap_eq_filterMapTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.filterMap_eq_filterMapTR\"><span class=\"name\">List</span>.<span class=\"name\">filterMap_eq_filterMapTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.filterMapTR\">filterMapTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L103-L107","name":"List.filterMapTR.go","line":103,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.filterMapTR.go","doc":"Auxiliary for `filterMap`: `filterMap.go f l = acc.toList ++ filterMap f l` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.filterMapTR.go\"><span class=\"name\">List</span>.<span class=\"name\">filterMapTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L86-L107","name":"List.filterMapTR","line":86,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.filterMapTR","doc":"Applies a function that returns an `Option` to each element of a list, collecting the non-`none`\nvalues.\n\n`O(|l|)`. This is a tail-recursive version of `List.filterMap`, used at runtime.\n\nExample:\n```lean example\n#eval [1, 2, 5, 2, 7, 7].filterMapTR fun x =>\n  if x > 2 then some (2 * x) else none\n```\n```output\n[10, 14, 14]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.filterMapTR\"><span class=\"name\">List</span>.<span class=\"name\">filterMapTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L76-L80","name":"List.set_eq_setTR.go","line":76,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.set_eq_setTR.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.set_eq_setTR.go\"><span class=\"name\">List</span>.<span class=\"name\">set_eq_setTR</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">xs</span> → <span class=\"fn\"><a href=\"./Init/Data/List/Impl.html#List.setTR.go\">setTR.go</a> <span class=\"fn\">l</span> <span class=\"fn\">a</span> <span class=\"fn\">xs</span> <span class=\"fn\">i</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#List.set\">set</a></span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L74-L81","name":"List.set_eq_setTR","line":74,"kind":"theorem","docLink":"./Init/Data/List/Impl.html#List.set_eq_setTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.set_eq_setTR\"><span class=\"name\">List</span>.<span class=\"name\">set_eq_setTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Prelude.html#List.set\">set</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/List/Impl.html#List.setTR\">setTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L69-L72","name":"List.setTR.go","line":69,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.setTR.go","doc":"Auxiliary for `setTR`: `setTR.go l a xs n acc = acc.toList ++ set xs a`,\nunless `n ≥ l.length` in which case it returns `l` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.setTR.go\"><span class=\"name\">List</span>.<span class=\"name\">setTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Impl.lean#L56-L72","name":"List.setTR","line":56,"kind":"def","docLink":"./Init/Data/List/Impl.html#List.setTR","doc":"Replaces the value at (zero-based) index `n` in `l` with `a`. If the index is out of bounds, then\nthe list is returned unmodified.\n\nThis is a tail-recursive version of `List.set` that's used at runtime.\n\nExamples:\n* `[\"water\", \"coffee\", \"soda\", \"juice\"].set 1 \"tea\" = [\"water\", \"tea\", \"soda\", \"juice\"]`\n* `[\"water\", \"coffee\", \"soda\", \"juice\"].set 4 \"tea\" = [\"water\", \"coffee\", \"soda\", \"juice\"]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Impl.html#List.setTR\"><span class=\"name\">List</span>.<span class=\"name\">setTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"}]}