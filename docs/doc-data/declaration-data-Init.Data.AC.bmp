{"name":"Init.Data.AC","instances":[{"typeNames":["Lean.Data.AC.Expr"],"name":"Lean.Data.AC.instInhabitedExpr","className":"Inhabited"},{"typeNames":["Lean.Data.AC.Expr"],"name":"Lean.Data.AC.instReprExpr","className":"Repr"},{"typeNames":["Lean.Data.AC.Expr"],"name":"Lean.Data.AC.instBEqExpr","className":"BEq"},{"typeNames":["Lean.Data.AC.Context"],"name":"Lean.Data.AC.instContextInformationContext","className":"Lean.Data.AC.ContextInformation"},{"typeNames":["Lean.Data.AC.Context"],"name":"Lean.Data.AC.instEvalInformationContext","className":"Lean.Data.AC.EvalInformation"}],"imports":["Init.Classical","Init.ByCases"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L341-L344","name":"Lean.Data.AC.Context.eq_of_norm","line":341,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.eq_of_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.eq_of_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">eq_of_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.norm\">norm</a> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.norm\">norm</a> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L336-L339","name":"Lean.Data.AC.Context.eval_norm","line":336,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.eval_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.eval_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">eval_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.norm\">norm</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L329-L334","name":"Lean.Data.AC.Context.eval_toList","line":329,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.eval_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.eval_toList\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">eval_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.toList\">toList</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L315-L327","name":"Lean.Data.AC.Context.evalList_append","line":315,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_append\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.append\">append</a></span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">r</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L300-L313","name":"Lean.Data.AC.Context.evalList_removeNeutrals","line":300,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_removeNeutrals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_removeNeutrals\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_removeNeutrals</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals\">removeNeutrals</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L289-L298","name":"Lean.Data.AC.Context.unwrap_isNeutral","line":289,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.unwrap_isNeutral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.unwrap_isNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">unwrap_isNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isNeutral\">ContextInformation.isNeutral</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalOp\">EvalInformation.evalOp</a> <span class=\"fn\">ctx</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalVar\">EvalInformation.evalVar</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L280-L287","name":"Lean.Data.AC.Context.toList_nonEmpty","line":280,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.toList_nonEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.toList_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">toList_nonEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.toList\">toList</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L262-L278","name":"Lean.Data.AC.Context.evalList_sort","line":262,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isComm\">ContextInformation.isComm</a> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort\">sort</a> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L238-L260","name":"Lean.Data.AC.Context.evalList_sort_cons","line":238,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort\">sort</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort\">sort</a> <span class=\"fn\">xs</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L223-L236","name":"Lean.Data.AC.Context.evalList_sort_loop_swap","line":223,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_loop_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_loop_swap\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort_loop_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">sort.loop</a> <span class=\"fn\">xs</span> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">sort.loop</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">ys</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L204-L221","name":"Lean.Data.AC.Context.evalList_sort_congr","line":204,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_congr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₄</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">sort.loop</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">sort.loop</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L183-L202","name":"Lean.Data.AC.Context.evalList_insert","line":183,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">xs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L178-L181","name":"Lean.Data.AC.Context.sort_loop_nonEmpty","line":178,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.sort_loop_nonEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.sort_loop_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">sort_loop_nonEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">sort.loop</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L173-L176","name":"Lean.Data.AC.insert_nonEmpty","line":173,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.insert_nonEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.insert_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">insert_nonEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L136-L171","name":"Lean.Data.AC.Context.evalList_mergeIdem","line":136,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_mergeIdem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_mergeIdem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_mergeIdem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isIdem\">ContextInformation.isIdem</a> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L133-L134","name":"Lean.Data.AC.Context.mergeIdem_head2","line":133,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head2\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mergeIdem_head2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L130-L131","name":"Lean.Data.AC.Context.mergeIdem_head","line":130,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mergeIdem_head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L124-L128","name":"Lean.Data.AC.Context.mergeIdem_nonEmpty","line":124,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_nonEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mergeIdem_nonEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">e</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> <span class=\"fn\">e</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L113-L122","name":"Lean.Data.AC.List.two_step_induction","line":113,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.List.two_step_induction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.List.two_step_induction\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">List</span>.<span class=\"name\">two_step_induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <a href=\"./foundational_types.html\">Sort</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">empty</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">single</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L107-L111","name":"Lean.Data.AC.norm","line":107,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">info</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L100-L105","name":"Lean.Data.AC.removeNeutrals.loop","line":100,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">removeNeutrals</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">info</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L94-L105","name":"Lean.Data.AC.removeNeutrals","line":94,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">removeNeutrals</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">info</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L82-L88","name":"Lean.Data.AC.mergeIdem.loop","line":82,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.mergeIdem.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">mergeIdem</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L81-L92","name":"Lean.Data.AC.mergeIdem","line":81,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.mergeIdem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">mergeIdem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L76-L78","name":"Lean.Data.AC.sort.loop","line":76,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.sort.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">sort</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L75-L79","name":"Lean.Data.AC.sort","line":75,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.sort","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.sort\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">sort</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L71-L73","name":"Lean.Data.AC.insert","line":71,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L66-L69","name":"Lean.Data.AC.evalList","line":66,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.evalList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">evalList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L62-L64","name":"Lean.Data.AC.Expr.toList","line":62,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr.toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.toList\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L58-L60","name":"Lean.Data.AC.eval","line":58,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L53-L56","name":"Lean.Data.AC.instEvalInformationContext","line":53,"kind":"instance","docLink":"./Init/Data/AC.html#Lean.Data.AC.instEvalInformationContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instEvalInformationContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instEvalInformationContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L48-L51","name":"Lean.Data.AC.instContextInformationContext","line":48,"kind":"instance","docLink":"./Init/Data/AC.html#Lean.Data.AC.instContextInformationContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instContextInformationContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instContextInformationContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L45-L46","name":"Lean.Data.AC.Context.var","line":45,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">var</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L43-L43","name":"Lean.Data.AC.EvalInformation.evalVar","line":43,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">evalVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L42-L42","name":"Lean.Data.AC.EvalInformation.evalOp","line":42,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">evalOp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L41-L41","name":"Lean.Data.AC.EvalInformation.arbitrary","line":41,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.arbitrary","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.arbitrary\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">arbitrary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L40-L40","name":"Lean.Data.AC.EvalInformation.mk","line":40,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arbitrary</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">evalOp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">evalVar</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L40-L43","name":"Lean.Data.AC.EvalInformation","line":40,"kind":"class","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max (max 1 u) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L38-L38","name":"Lean.Data.AC.ContextInformation.isIdem","line":38,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isIdem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isIdem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">isIdem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L37-L37","name":"Lean.Data.AC.ContextInformation.isComm","line":37,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isComm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isComm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">isComm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L36-L36","name":"Lean.Data.AC.ContextInformation.isNeutral","line":36,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isNeutral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">isNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L35-L35","name":"Lean.Data.AC.ContextInformation.mk","line":35,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isNeutral</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isComm </span><span class=\"fn\">isIdem</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L35-L38","name":"Lean.Data.AC.ContextInformation","line":35,"kind":"class","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max 1 u)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L33-L33","name":"Lean.Data.AC.Context.arbitrary","line":33,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.arbitrary","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.arbitrary\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">arbitrary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L32-L32","name":"Lean.Data.AC.Context.vars","line":32,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.vars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">vars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L31-L31","name":"Lean.Data.AC.Context.idem","line":31,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.idem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.idem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">idem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L30-L30","name":"Lean.Data.AC.Context.comm","line":30,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.comm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L29-L29","name":"Lean.Data.AC.Context.assoc","line":29,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.assoc\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L28-L28","name":"Lean.Data.AC.Context.op","line":28,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.op","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L27-L27","name":"Lean.Data.AC.Context.mk","line":27,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assoc</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">op</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">comm</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">op</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idem</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">op</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\">op</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arbitrary</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L27-L33","name":"Lean.Data.AC.Context","line":27,"kind":"structure","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L25-L25","name":"Lean.Data.AC.Variable.neutral","line":25,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable.neutral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable.neutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span>.<span class=\"name\">neutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">op</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\">op</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">op</span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable.value\">value</a></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L24-L24","name":"Lean.Data.AC.Variable.value","line":24,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span>.<span class=\"name\">value</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">op</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\">op</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L23-L23","name":"Lean.Data.AC.Variable.mk","line":23,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">op</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">neutral</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">op</span> <span class=\"fn\">value</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\">op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L23-L25","name":"Lean.Data.AC.Variable","line":23,"kind":"structure","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L19-L19","name":"Lean.Data.AC.instBEqExpr","line":19,"kind":"instance","docLink":"./Init/Data/AC.html#Lean.Data.AC.instBEqExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instBEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instBEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L19-L19","name":"Lean.Data.AC.instReprExpr","line":19,"kind":"instance","docLink":"./Init/Data/AC.html#Lean.Data.AC.instReprExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instReprExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instReprExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L19-L19","name":"Lean.Data.AC.instInhabitedExpr","line":19,"kind":"instance","docLink":"./Init/Data/AC.html#Lean.Data.AC.instInhabitedExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instInhabitedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L18-L18","name":"Lean.Data.AC.Expr.op","line":18,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr.op","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.op\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">op</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L17-L17","name":"Lean.Data.AC.Expr.var","line":17,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/AC.lean#L16-L19","name":"Lean.Data.AC.Expr","line":16,"kind":"inductive","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}