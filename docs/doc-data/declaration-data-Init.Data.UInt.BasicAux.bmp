{"name":"Init.Data.UInt.BasicAux","instances":[{"typeNames":["UInt8"],"name":"UInt8.instOfNat","className":"OfNat"},{"typeNames":["UInt16"],"name":"UInt16.instOfNat","className":"OfNat"},{"typeNames":["UInt32"],"name":"UInt32.instOfNat","className":"OfNat"},{"typeNames":["UInt64"],"name":"UInt64.instOfNat","className":"OfNat"},{"typeNames":["USize"],"name":"USize.instOfNat","className":"OfNat"},{"typeNames":["USize"],"name":"instAddUSize","className":"Add"},{"typeNames":["USize"],"name":"instSubUSize","className":"Sub"},{"typeNames":["USize"],"name":"instLTUSize","className":"LT"},{"typeNames":["USize"],"name":"instLEUSize","className":"LE"},{"typeNames":["LT.lt"],"name":"USize.decLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"USize.decLe","className":"Decidable"}],"imports":["Init.Data.Fin.Basic","Init.Data.BitVec.BasicAux"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L423-L437","name":"USize.decLe","line":423,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#USize.decLe","doc":"Decides whether one word-sized unsigned integer is less than or equal to another. Usually accessed\nvia the `DecidableLE USize` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (15 : USize) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : USize) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `(if (5 : USize) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `show (7 : USize) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.decLe\"><span class=\"name\">USize</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L408-L421","name":"USize.decLt","line":408,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#USize.decLt","doc":"Decides whether one word-sized unsigned integer is strictly less than another. Usually accessed via\nthe `DecidableLT USize` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (6 : USize) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : USize) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : USize) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.decLt\"><span class=\"name\">USize</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L406-L406","name":"instLEUSize","line":406,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#instLEUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instLEUSize\"><span class=\"name\">instLEUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L405-L405","name":"instLTUSize","line":405,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#instLTUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instLTUSize\"><span class=\"name\">instLTUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L404-L404","name":"instSubUSize","line":404,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#instSubUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instSubUSize\"><span class=\"name\">instSubUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L403-L403","name":"instAddUSize","line":403,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#instAddUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instAddUSize\"><span class=\"name\">instAddUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L401-L401","name":"USize.instOfNat","line":401,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#USize.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.instOfNat\"><span class=\"name\">USize</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#USize\">USize</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L395-L399","name":"USize.le","line":395,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.le","doc":"Non-strict inequality of word-sized unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.le\"><span class=\"name\">USize</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L390-L394","name":"USize.lt","line":390,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.lt","doc":"Strict inequality of word-sized unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.lt\"><span class=\"name\">USize</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L381-L388","name":"USize.sub","line":381,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.sub","doc":"Subtracts one word-sized-bit unsigned integer from another, wrapping around on underflow. Usually\naccessed via the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.sub\"><span class=\"name\">USize</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L373-L380","name":"USize.add","line":373,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.add","doc":"Adds two word-sized unsigned integers, wrapping around on overflow.  Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.add\"><span class=\"name\">USize</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L366-L372","name":"USize.toNat","line":366,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.toNat","doc":"Converts a word-sized unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\"><span class=\"name\">USize</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L365-L365","name":"Nat.toUSize","line":365,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUSize","doc":"Converts an arbitrary-precision natural number to an unsigned word-sized integer, wrapping around on\noverflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUSize\"><span class=\"name\">Nat</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L353-L364","name":"USize.ofNatTruncate","line":353,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.ofNatTruncate","doc":"Converts a natural number to `USize`, returning the largest representable value if the number is too\nlarge.\n\nReturns `USize.size - 1`, which is  `2^64 - 1` or `2^32 - 1` depending on the platform, for natural\nnumbers greater than or equal to `USize.size`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.ofNatTruncate\"><span class=\"name\">USize</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L345-L352","name":"USize.ofNat","line":345,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.ofNat","doc":"Converts an arbitrary-precision natural number to an unsigned word-sized integer, wrapping around on\noverflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\"><span class=\"name\">USize</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L343-L344","name":"USize.val","line":343,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.val","doc":"Converts a `USize` into the corresponding `Fin USize.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.val\"><span class=\"name\">USize</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L341-L342","name":"USize.toFin","line":341,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.toFin","doc":"Converts a `USize` into the corresponding `Fin USize.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\"><span class=\"name\">USize</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L337-L339","name":"usize_size_pos","line":337,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#usize_size_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#usize_size_pos\"><span class=\"name\">usize_size_pos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L333-L335","name":"usize_size_eq","line":333,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#usize_size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#usize_size_eq\"><span class=\"name\">usize_size_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">4294967296</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">18446744073709551616</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L331-L331","name":"UInt64.instOfNat","line":331,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.instOfNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L323-L329","name":"UInt32.toUInt64","line":323,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64","doc":"Converts 32-bit unsigned integers to 64-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L316-L322","name":"UInt16.toUInt64","line":316,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64","doc":"Converts 16-bit unsigned integers to 64-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L309-L315","name":"UInt8.toUInt64","line":309,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64","doc":"Converts 8-bit unsigned integers to 64-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L302-L308","name":"UInt64.toUInt32","line":302,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32","doc":"Converts 64-bit unsigned integers to 32-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L295-L301","name":"UInt64.toUInt16","line":295,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16","doc":"Converts 64-bit unsigned integers to 16-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L288-L294","name":"UInt64.toUInt8","line":288,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8","doc":"Converts 64-bit unsigned integers to 8-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L281-L287","name":"UInt64.toNat","line":281,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toNat","doc":"Converts a 64-bit unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L269-L280","name":"Nat.toUInt64","line":269,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt64","doc":"Converts a natural number to a 64-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt64 5 = 5`\n* `Nat.toUInt64 65539 = 65539`\n* `Nat.toUInt64 4_294_967_299 = 4_294_967_299`\n* `Nat.toUInt64 18_446_744_073_709_551_620 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt64\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L258-L268","name":"UInt64.ofNatTruncate","line":258,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.ofNatTruncate","doc":"Converts a natural number to a 64-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^64 - 1` for natural numbers greater than or equal to `2^64`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNatTruncate\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L245-L257","name":"UInt64.ofNat","line":245,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.ofNat","doc":"Converts a natural number to a 64-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt64.ofNat 5 = 5`\n* `UInt64.ofNat 65539 = 65539`\n* `UInt64.ofNat 4_294_967_299 = 4_294_967_299`\n* `UInt64.ofNat 18_446_744_073_709_551_620 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L243-L244","name":"UInt64.val","line":243,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.val","doc":"Converts a `UInt64` into the corresponding `Fin UInt64.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.val\"><span class=\"name\">UInt64</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L241-L242","name":"UInt64.toFin","line":241,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toFin","doc":"Converts a `UInt64` into the corresponding `Fin UInt64.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L237-L239","name":"UInt32.lt_ofNat'_of_lt","line":237,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.lt_ofNat'_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.lt_ofNat'_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">lt_ofNat'_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">h1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L232-L235","name":"UInt32.lt_ofNatLT_of_lt","line":232,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.lt_ofNatLT_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.lt_ofNatLT_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">lt_ofNatLT_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">h1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L228-L230","name":"UInt32.ofNat'_lt_of_lt","line":228,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNat'_lt_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat'_lt_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNat'_lt_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">h1</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L223-L226","name":"UInt32.ofNatLT_lt_of_lt","line":223,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNatLT_lt_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNatLT_lt_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatLT_lt_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">h1</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L221-L221","name":"UInt32.instOfNat","line":221,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.instOfNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L213-L219","name":"UInt16.toUInt32","line":213,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32","doc":"Converts 16-bit unsigned integers to 32-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L206-L212","name":"UInt8.toUInt32","line":206,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32","doc":"Converts 8-bit unsigned integers to 32-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L199-L205","name":"UInt32.toUInt16","line":199,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16","doc":"Converts 32-bit unsigned integers to 16-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L192-L198","name":"UInt32.toUInt8","line":192,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8","doc":"Converts a 32-bit unsigned integer to an 8-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L180-L190","name":"Nat.toUInt32","line":180,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt32","doc":"Converts a natural number to a 32-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt32 5 = 5`\n* `Nat.toUInt32 65_539 = 65_539`\n* `Nat.toUInt32 4_294_967_299 = 3`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt32\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L169-L179","name":"UInt32.ofNatTruncate","line":169,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNatTruncate","doc":"Converts a natural number to a 32-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^32 - 1` for natural numbers greater than or equal to `2^32`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNatTruncate\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L167-L168","name":"UInt32.ofNat'","line":167,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNat'","doc":"Converts a natural number to a 32-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^32`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat'\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNat'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L155-L166","name":"UInt32.ofNat","line":155,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNat","doc":"Converts a natural number to a 32-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt32.ofNat 5 = 5`\n* `UInt32.ofNat 65539 = 65539`\n* `UInt32.ofNat 4_294_967_299 = 3`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L152-L153","name":"UInt32.val","line":152,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.val","doc":"Converts a `UInt32` into the corresponding `Fin UInt32.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.val\"><span class=\"name\">UInt32</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L150-L151","name":"UInt32.toFin","line":150,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toFin","doc":"Converts a `UInt32` into the corresponding `Fin UInt32.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L148-L148","name":"UInt16.instOfNat","line":148,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.instOfNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L140-L146","name":"UInt8.toUInt16","line":140,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16","doc":"Converts 8-bit unsigned integers to 16-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L133-L139","name":"UInt16.toUInt8","line":133,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8","doc":"Converts 16-bit unsigned integers to 8-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L126-L132","name":"UInt16.toNat","line":126,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toNat","doc":"Converts a 16-bit unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L113-L124","name":"Nat.toUInt16","line":113,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt16","doc":"Converts a natural number to a 16-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt16 5 = 5`\n* `Nat.toUInt16 255 = 255`\n* `Nat.toUInt16 32770 = 32770`\n* `Nat.toUInt16 65537 = 1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt16\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L101-L111","name":"UInt16.ofNatTruncate","line":101,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.ofNatTruncate","doc":"Converts a natural number to a 16-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^16 - 1` for natural numbers greater than or equal to `2^16`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNatTruncate\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L88-L100","name":"UInt16.ofNat","line":88,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.ofNat","doc":"Converts a natural number to a 16-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt16.ofNat 5 = 5`\n* `UInt16.ofNat 255 = 255`\n* `UInt16.ofNat 32770 = 32770`\n* `UInt16.ofNat 65537 = 1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L85-L86","name":"UInt16.val","line":85,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.val","doc":"Converts a `UInt16` into the corresponding `Fin UInt16.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.val\"><span class=\"name\">UInt16</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L83-L84","name":"UInt16.toFin","line":83,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toFin","doc":"Converts a `UInt16` into the corresponding `Fin UInt16.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L81-L81","name":"UInt8.instOfNat","line":81,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.instOfNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L73-L79","name":"UInt8.toNat","line":73,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toNat","doc":"Converts an 8-bit unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L59-L71","name":"Nat.toUInt8","line":59,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt8","doc":"Converts a natural number to an 8-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt8 5 = 5`\n* `Nat.toUInt8 255 = 255`\n* `Nat.toUInt8 256 = 0`\n* `Nat.toUInt8 259 = 3`\n* `Nat.toUInt8 32770 = 2`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt8\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L47-L57","name":"UInt8.ofNatTruncate","line":47,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.ofNatTruncate","doc":"Converts a natural number to an 8-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^8 - 1` for natural numbers greater than or equal to `2^8`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.ofNatTruncate\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L32-L45","name":"UInt8.ofNat","line":32,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.ofNat","doc":"Converts a natural number to an 8-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt8.ofNat 5 = 5`\n* `UInt8.ofNat 255 = 255`\n* `UInt8.ofNat 256 = 0`\n* `UInt8.ofNat 259 = 3`\n* `UInt8.ofNat 32770 = 2`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.ofNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L29-L30","name":"UInt8.val","line":29,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.val","doc":"Converts a `UInt8` into the corresponding `Fin UInt8.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.val\"><span class=\"name\">UInt8</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/BasicAux.lean#L27-L28","name":"UInt8.toFin","line":27,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toFin","doc":"Converts a `UInt8` into the corresponding `Fin UInt8.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span></div></div>"}]}