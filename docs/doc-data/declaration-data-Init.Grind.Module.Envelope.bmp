{"name":"Init.Grind.Module.Envelope","instances":[{"typeNames":["Lean.Grind.IntModule.OfNatModule.Q"],"name":"Lean.Grind.IntModule.OfNatModule.ofNatModule","className":"Lean.Grind.IntModule"},{"typeNames":["Lean.Grind.IntModule.OfNatModule.Q"],"name":"Lean.Grind.IntModule.OfNatModule.instNoNatZeroDivisorsQOfAddRightCancel","className":"Lean.Grind.NoNatZeroDivisors"},{"typeNames":["Lean.Grind.IntModule.OfNatModule.Q"],"name":"Lean.Grind.IntModule.OfNatModule.instLEQOfOrderedAdd","className":"LE"},{"typeNames":["Lean.Grind.IntModule.OfNatModule.Q"],"name":"Lean.Grind.IntModule.OfNatModule.instPreorderQOfOrderedAdd","className":"Lean.Grind.Preorder"},{"typeNames":["Lean.Grind.IntModule.OfNatModule.Q"],"name":"Lean.Grind.IntModule.OfNatModule.instOrderedAddQ","className":"Lean.Grind.OrderedAdd"}],"imports":["Init.Grind.Ordered.Module","Init.Data.AC"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L355-L368","name":"Lean.Grind.IntModule.OfNatModule.instOrderedAddQ","line":355,"kind":"instance","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instOrderedAddQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instOrderedAddQ\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instOrderedAddQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L351-L353","name":"Lean.Grind.IntModule.OfNatModule.toQ_lt","line":351,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L347-L349","name":"Lean.Grind.IntModule.OfNatModule.toQ_le","line":347,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L314-L334","name":"Lean.Grind.IntModule.OfNatModule.instPreorderQOfOrderedAdd","line":314,"kind":"instance","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instPreorderQOfOrderedAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instPreorderQOfOrderedAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instPreorderQOfOrderedAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L310-L312","name":"Lean.Grind.IntModule.OfNatModule.mk_le_mk","line":310,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.mk_le_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.mk_le_mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">mk_le_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\">Q.mk</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a₁</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">a₂</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\">Q.mk</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b₁</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b₂</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L294-L308","name":"Lean.Grind.IntModule.OfNatModule.instLEQOfOrderedAdd","line":294,"kind":"instance","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instLEQOfOrderedAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instLEQOfOrderedAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instLEQOfOrderedAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L277-L292","name":"Lean.Grind.IntModule.OfNatModule.instNoNatZeroDivisorsQOfAddRightCancel","line":277,"kind":"instance","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instNoNatZeroDivisorsQOfAddRightCancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instNoNatZeroDivisorsQOfAddRightCancel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instNoNatZeroDivisorsQOfAddRightCancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.AddRightCancel\">AddRightCancel</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L270-L275","name":"Lean.Grind.IntModule.OfNatModule.toQ_inj","line":270,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_inj\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.AddRightCancel\">AddRightCancel</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">b</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L265-L267","name":"Lean.Grind.IntModule.OfNatModule.Q.exact","line":265,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">Q</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\">mk</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\">mk</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L242-L243","name":"Lean.Grind.IntModule.OfNatModule.toQ_add","line":242,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L237-L238","name":"Lean.Grind.IntModule.OfNatModule.toQ","line":237,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L224-L233","name":"Lean.Grind.IntModule.OfNatModule.ofNatModule","line":224,"kind":"instance","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.ofNatModule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.ofNatModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">ofNatModule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L219-L222","name":"Lean.Grind.IntModule.OfNatModule.zsmul_natCast_eq_nsmul","line":219,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul_natCast_eq_nsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul_natCast_eq_nsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">zsmul_natCast_eq_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">(↑<span class=\"fn\">n</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.nsmul\">nsmul</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L175-L217","name":"Lean.Grind.IntModule.OfNatModule.add_zsmul","line":175,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_zsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">add_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L164-L173","name":"Lean.Grind.IntModule.OfNatModule.zsmul_add","line":164,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">zsmul_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L161-L162","name":"Lean.Grind.IntModule.OfNatModule.zsmul_zero","line":161,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">zsmul_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">a</span> <a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero\">zero</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero\">zero</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L157-L159","name":"Lean.Grind.IntModule.OfNatModule.zero_zsmul","line":157,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero_zsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">zero_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">0</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero\">zero</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L153-L155","name":"Lean.Grind.IntModule.OfNatModule.one_zsmul","line":153,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.one_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.one_zsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">one_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">1</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L147-L151","name":"Lean.Grind.IntModule.OfNatModule.sub_eq_add_neg","line":147,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.sub_eq_add_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.sub\">sub</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg\">neg</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L140-L145","name":"Lean.Grind.IntModule.OfNatModule.add_assoc","line":140,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_assoc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">add_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L136-L138","name":"Lean.Grind.IntModule.OfNatModule.add_zero","line":136,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">add_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">a</span> <a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero\">zero</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L130-L134","name":"Lean.Grind.IntModule.OfNatModule.add_comm","line":130,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_comm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">add_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L124-L128","name":"Lean.Grind.IntModule.OfNatModule.neg_add_cancel","line":124,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg_add_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg_add_cancel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">neg_add_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg\">neg</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero\">zero</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L121-L122","name":"Lean.Grind.IntModule.OfNatModule.zero","line":121,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L111-L115","name":"Lean.Grind.IntModule.OfNatModule.neg","line":111,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L102-L109","name":"Lean.Grind.IntModule.OfNatModule.add","line":102,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q₁ </span><span class=\"fn\">q₂</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L93-L100","name":"Lean.Grind.IntModule.OfNatModule.sub","line":93,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q₁ </span><span class=\"fn\">q₂</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L79-L91","name":"Lean.Grind.IntModule.OfNatModule.zsmul","line":79,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L71-L77","name":"Lean.Grind.IntModule.OfNatModule.nsmul","line":71,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.nsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.nsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L68-L69","name":"Lean.Grind.IntModule.OfNatModule.Q.ind","line":68,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.ind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.ind\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">Q</span>.<span class=\"name\">ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\">mk</a> <span class=\"fn\">a</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L56-L64","name":"Lean.Grind.IntModule.OfNatModule.Q.liftOn₂","line":56,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.liftOn₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.liftOn₂\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">Q</span>.<span class=\"name\">liftOn₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q₁ </span><span class=\"fn\">q₂</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ {<span class=\"fn\">a₁ </span><span class=\"fn\">b₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">b₁</span> <span class=\"fn\">b₂</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L53-L54","name":"Lean.Grind.IntModule.OfNatModule.Q.mk","line":53,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">Q</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L41-L51","name":"Lean.Grind.IntModule.OfNatModule.r_trans","line":41,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_trans\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">r_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L38-L39","name":"Lean.Grind.IntModule.OfNatModule.r_sym","line":38,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_sym","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_sym\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">r_sym</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L35-L36","name":"Lean.Grind.IntModule.OfNatModule.r_rfl","line":35,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_rfl\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">r_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L31-L31","name":"Lean.Grind.IntModule.OfNatModule.Q","line":31,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">Q</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L28-L29","name":"Lean.Grind.IntModule.OfNatModule.r","line":28,"kind":"def","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">r</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L23-L24","name":"Lean.Grind.IntModule.OfNatModule.instCommutativeHAdd","line":23,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instCommutativeHAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instCommutativeHAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instCommutativeHAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Module/Envelope.lean#L21-L22","name":"Lean.Grind.IntModule.OfNatModule.instAssociativeHAdd","line":21,"kind":"theorem","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instAssociativeHAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instAssociativeHAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instAssociativeHAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"}]}