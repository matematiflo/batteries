{"name":"Init.Data.Char.Basic","instances":[{"typeNames":["Char"],"name":"Char.instLT","className":"LT"},{"typeNames":["Char"],"name":"Char.instLE","className":"LE"},{"typeNames":["LT.lt"],"name":"Char.instDecidableLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"Char.instDecidableLe","className":"Decidable"},{"typeNames":["Char"],"name":"Char.instInhabited","className":"Inhabited"}],"imports":["Init.Data.UInt.BasicAux"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L150-L158","name":"Char.toUpper","line":150,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.toUpper","doc":"Converts a lowercase ASCII letter to the corresponding uppercase letter. Letters outside the ASCII\nalphabet are returned unchanged.\n\nThe lowercase ASCII letters are the following: `abcdefghijklmnopqrstuvwxyz`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toUpper\"><span class=\"name\">Char</span>.<span class=\"name\">toUpper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L140-L148","name":"Char.toLower","line":140,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.toLower","doc":"Converts an uppercase ASCII letter to the corresponding lowercase letter. Letters outside the ASCII\nalphabet are returned unchanged.\n\nThe uppercase ASCII letters are the following: `ABCDEFGHIJKLMNOPQRSTUVWXYZ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toLower\"><span class=\"name\">Char</span>.<span class=\"name\">toLower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L131-L138","name":"Char.isAlphanum","line":131,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isAlphanum","doc":"Returns `true` if the character is an ASCII letter or digit.\n\nThe ASCII letters are the following: `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`.\nThe ASCII digits are the following: `0123456789`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isAlphanum\"><span class=\"name\">Char</span>.<span class=\"name\">isAlphanum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L123-L129","name":"Char.isDigit","line":123,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isDigit","doc":"Returns `true` if the character is an ASCII digit.\n\nThe ASCII digits are the following: `0123456789`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isDigit\"><span class=\"name\">Char</span>.<span class=\"name\">isDigit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L115-L121","name":"Char.isAlpha","line":115,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isAlpha","doc":"Returns `true` if the character is an ASCII letter.\n\nThe ASCII letters are the following: `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isAlpha\"><span class=\"name\">Char</span>.<span class=\"name\">isAlpha</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L107-L113","name":"Char.isLower","line":107,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isLower","doc":"Returns `true` if the character is a lowercase ASCII letter.\n\nThe lowercase ASCII letters are the following: `abcdefghijklmnopqrstuvwxyz`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isLower\"><span class=\"name\">Char</span>.<span class=\"name\">isLower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L99-L105","name":"Char.isUpper","line":99,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isUpper","doc":"Returns `true` if the character is a uppercase ASCII letter.\n\nThe uppercase ASCII letters are the following: `ABCDEFGHIJKLMNOPQRSTUVWXYZ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isUpper\"><span class=\"name\">Char</span>.<span class=\"name\">isUpper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L92-L97","name":"Char.isWhitespace","line":92,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isWhitespace","doc":"Returns `true` if the character is a space `(' ', U+0020)`, a tab `('\\t', U+0009)`, a carriage\nreturn `('\\r', U+000D)`, or a newline `('\\n', U+000A)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isWhitespace\"><span class=\"name\">Char</span>.<span class=\"name\">isWhitespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L89-L90","name":"Char.instInhabited","line":89,"kind":"instance","docLink":"./Init/Data/Char/Basic.html#Char.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instInhabited\"><span class=\"name\">Char</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L82-L87","name":"Char.ofUInt8","line":82,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.ofUInt8","doc":"Converts an 8-bit unsigned integer into a character.\n\nThe integer's value is interpreted as a Unicode code point.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.ofUInt8\"><span class=\"name\">Char</span>.<span class=\"name\">ofUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L74-L80","name":"Char.toUInt8","line":74,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.toUInt8","doc":"Converts a character into a `UInt8` that contains its code point.\n\nIf the code point is larger than 255, it is truncated (reduced modulo 256).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toUInt8\"><span class=\"name\">Char</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L68-L72","name":"Char.toNat","line":68,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.toNat","doc":"The character's Unicode code point as a `Nat`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toNat\"><span class=\"name\">Char</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L65-L66","name":"Char.isValidChar_zero","line":65,"kind":"theorem","docLink":"./Init/Data/Char/Basic.html#Char.isValidChar_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidChar_zero\"><span class=\"name\">Char</span>.<span class=\"name\">isValidChar_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#isValidChar\">isValidChar</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L58-L63","name":"Char.isValidChar_of_isValidCharNat","line":58,"kind":"theorem","docLink":"./Init/Data/Char/Basic.html#Char.isValidChar_of_isValidCharNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidChar_of_isValidCharNat\"><span class=\"name\">Char</span>.<span class=\"name\">isValidChar_of_isValidCharNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#Char.isValidCharNat\">isValidCharNat</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#isValidChar\">isValidChar</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#UInt32.ofNatLT\">UInt32.ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L49-L56","name":"Char.isValidUInt32","line":49,"kind":"theorem","docLink":"./Init/Data/Char/Basic.html#Char.isValidUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidUInt32\"><span class=\"name\">Char</span>.<span class=\"name\">isValidUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#Char.isValidCharNat\">isValidCharNat</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L42-L47","name":"Char.isValidCharNat","line":42,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isValidCharNat","doc":"True for natural numbers that are valid [Unicode scalar\nvalues](https://www.unicode.org/glossary/#unicode_scalar_value).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidCharNat\"><span class=\"name\">Char</span>.<span class=\"name\">isValidCharNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L39-L40","name":"Char.instDecidableLe","line":39,"kind":"instance","docLink":"./Init/Data/Char/Basic.html#Char.instDecidableLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instDecidableLe\"><span class=\"name\">Char</span>.<span class=\"name\">instDecidableLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L36-L37","name":"Char.instDecidableLt","line":36,"kind":"instance","docLink":"./Init/Data/Char/Basic.html#Char.instDecidableLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instDecidableLt\"><span class=\"name\">Char</span>.<span class=\"name\">instDecidableLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L34-L34","name":"Char.instLE","line":34,"kind":"instance","docLink":"./Init/Data/Char/Basic.html#Char.instLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instLE\"><span class=\"name\">Char</span>.<span class=\"name\">instLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L33-L33","name":"Char.instLT","line":33,"kind":"instance","docLink":"./Init/Data/Char/Basic.html#Char.instLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instLT\"><span class=\"name\">Char</span>.<span class=\"name\">instLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L27-L31","name":"Char.le","line":27,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.le","doc":"One character is less than or equal to another if its code point is less than or equal to the\nother's.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.le\"><span class=\"name\">Char</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L22-L25","name":"Char.lt","line":22,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.lt","doc":"One character is less than another if its code point is strictly less than the other's.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.lt\"><span class=\"name\">Char</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Char/Basic.lean#L13-L18","name":"isValidChar","line":13,"kind":"def","docLink":"./Init/Data/Char/Basic.html#isValidChar","doc":"Determines if the given integer is a valid [Unicode scalar value](https://www.unicode.org/glossary/#unicode_scalar_value).\n\nNote that values in `[0xd800, 0xdfff]` are reserved for [UTF-16 surrogate pairs](https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#isValidChar\"><span class=\"name\">isValidChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}