{"name":"Lean.Meta.Tactic.Grind.Arith.Linear.ToExpr","instances":[{"typeNames":["Lean.Grind.Linarith.Poly"],"name":"Lean.Meta.Grind.Arith.Linear.instToExprPoly","className":"Lean.ToExpr"},{"typeNames":["Lean.Grind.Linarith.Expr"],"name":"Lean.Meta.Grind.Arith.Linear.instToExprExpr","className":"Lean.ToExpr"}],"imports":["Init.Grind.Ordered.Linarith","Lean.ToExpr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.lean#L38-L40","name":"Lean.Meta.Grind.Arith.Linear.instToExprExpr","line":38,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.html#Lean.Meta.Grind.Arith.Linear.instToExprExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.html#Lean.Meta.Grind.Arith.Linear.instToExprExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instToExprExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">ToExpr</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Grind.Linarith.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.lean#L28-L36","name":"Lean.Meta.Grind.Arith.Linear.ofLinExpr","line":28,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.html#Lean.Meta.Grind.Arith.Linear.ofLinExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.html#Lean.Meta.Grind.Arith.Linear.ofLinExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">ofLinExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Grind.Linarith.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.lean#L22-L24","name":"Lean.Meta.Grind.Arith.Linear.instToExprPoly","line":22,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.html#Lean.Meta.Grind.Arith.Linear.instToExprPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.html#Lean.Meta.Grind.Arith.Linear.instToExprPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instToExprPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">ToExpr</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.lean#L17-L20","name":"Lean.Meta.Grind.Arith.Linear.ofPoly","line":17,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.html#Lean.Meta.Grind.Arith.Linear.ofPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/ToExpr.html#Lean.Meta.Grind.Arith.Linear.ofPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">ofPoly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"}]}