{"name":"Lean.Elab.DeclModifiers","instances":[{"typeNames":["Lean.Elab.Visibility"],"name":"Lean.Elab.instInhabitedVisibility","className":"Inhabited"},{"typeNames":["Lean.Elab.Visibility"],"name":"Lean.Elab.instToStringVisibility","className":"ToString"},{"typeNames":["Lean.Elab.RecKind"],"name":"Lean.Elab.instInhabitedRecKind","className":"Inhabited"},{"typeNames":["Lean.Elab.ComputeKind"],"name":"Lean.Elab.instInhabitedComputeKind","className":"Inhabited"},{"typeNames":["Lean.Elab.Modifiers"],"name":"Lean.Elab.instInhabitedModifiers","className":"Inhabited"},{"typeNames":["Lean.Elab.Modifiers"],"name":"Lean.Elab.instToFormatModifiers","className":"Std.ToFormat"},{"typeNames":["Lean.Elab.Modifiers"],"name":"Lean.Elab.instToStringModifiers","className":"ToString"}],"imports":["Lean.Structure","Lean.Elab.Attributes","Lean.DocString.Add"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L275-L302","name":"Lean.Elab.expandDeclId","line":275,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.expandDeclId","doc":"Given a declaration identifier (e.g., `ident (\".{\" ident,+ \"}\")?`) that may contain explicit universe parameters\n- Ensure the new universe parameters do not shadow universe parameters declared using `universe` command.\n- Create the fully qualified named for the declaration using the current namespace, and given `modifiers`\n- Create a short version for recursively referring to the declaration. Recall that the `protected` modifier affects the generation of the short name.\n\nThe result also contains the universe parameters provided using `universe` command, and the `.{...}` notation.\n\nThis commands also stores the doc string stored in `modifiers`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.expandDeclId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">expandDeclId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currNamespace</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currLevelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declId</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult\">ExpandDeclIdResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L273-L273","name":"Lean.Elab.ExpandDeclIdResult.levelNames","line":273,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult.levelNames","doc":"Universe parameter names provided using the `universe` command and `.{...}` notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult.levelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ExpandDeclIdResult</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult\">ExpandDeclIdResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L271-L271","name":"Lean.Elab.ExpandDeclIdResult.declName","line":271,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult.declName","doc":"Fully qualified name that will be used to name the declaration in the kernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ExpandDeclIdResult</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult\">ExpandDeclIdResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L269-L269","name":"Lean.Elab.ExpandDeclIdResult.shortName","line":269,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult.shortName","doc":"Short name for recursively referring to the declaration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult.shortName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ExpandDeclIdResult</span>.<span class=\"name\">shortName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult\">ExpandDeclIdResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L267-L267","name":"Lean.Elab.ExpandDeclIdResult.mk","line":267,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ExpandDeclIdResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shortName </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult\">ExpandDeclIdResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L266-L273","name":"Lean.Elab.ExpandDeclIdResult","line":266,"kind":"structure","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult","doc":"`expandDeclId` resulting type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ExpandDeclIdResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L251-L264","name":"Lean.Elab.expandDeclIdCore","line":251,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.expandDeclIdCore","doc":"`declId` is of the form\n```\nleading_parser ident >> optional (\".{\" >> sepBy1 ident \", \" >> \"}\")\n```\nbut we also accept a single identifier to users to make macro writing more convenient .\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.expandDeclIdCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">expandDeclIdCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declId</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L226-L249","name":"Lean.Elab.mkDeclName","line":226,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.mkDeclName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.mkDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">mkDeclName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currNamespace</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shortName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L216-L224","name":"Lean.Elab.checkIfShadowingStructureField","line":216,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.checkIfShadowingStructureField","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.checkIfShadowingStructureField\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">checkIfShadowingStructureField</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L202-L214","name":"Lean.Elab.applyVisibility","line":202,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.applyVisibility","doc":"Ensure the function has not already been declared, and apply the given visibility setting to `declName`.\nIf `private`, return the updated name using our internal encoding for private names.\nIf `protected`, register `declName` as protected in the environment.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.applyVisibility\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">applyVisibility</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">visibility</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L165-L200","name":"Lean.Elab.elabModifiers","line":165,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.elabModifiers","doc":"Elaborate declaration modifiers (i.e., attributes, `partial`, `private`, `protected`, `unsafe`, `meta`, `noncomputable`, doc string)"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.elabModifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">elabModifiers</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/ResolveName.html#Lean.MonadResolveName\">MonadResolveName</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/Util.html#Lean.Elab.MonadMacroAdapter\">MonadMacroAdapter</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadRecDepth\">MonadRecDepth</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.declModifiers</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L151-L159","name":"Lean.Elab.expandOptDocComment?","line":151,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.expandOptDocComment?","doc":"Retrieve doc string from `stx` of the form `(docComment)?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.expandOptDocComment?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">expandOptDocComment?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optDocComment</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L149-L149","name":"Lean.Elab.instToStringModifiers","line":149,"kind":"instance","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.instToStringModifiers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.instToStringModifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToStringModifiers</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L133-L147","name":"Lean.Elab.instToFormatModifiers","line":133,"kind":"instance","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.instToFormatModifiers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.instToFormatModifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToFormatModifiers</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L129-L131","name":"Lean.Elab.Modifiers.filterAttrs","line":129,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.filterAttrs","doc":"Filters attributes using `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.filterAttrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">filterAttrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Attribute</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L125-L127","name":"Lean.Elab.Modifiers.addFirstAttr","line":125,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.addFirstAttr","doc":"Adds attribute `attr` in `modifiers`, at the beginning "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.addFirstAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">addFirstAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Attribute</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L121-L123","name":"Lean.Elab.Modifiers.addAttr","line":121,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.addAttr","doc":"Adds attribute `attr` in `modifiers` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.addAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">addAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Attribute</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L118-L119","name":"Lean.Elab.Modifiers.isNoncomputable","line":118,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isNoncomputable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isNoncomputable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">isNoncomputable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L115-L116","name":"Lean.Elab.Modifiers.isMeta","line":115,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isMeta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isMeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">isMeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L111-L113","name":"Lean.Elab.Modifiers.isNonrec","line":111,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isNonrec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isNonrec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">isNonrec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L102-L109","name":"Lean.Elab.Modifiers.isInferredPartial","line":102,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isInferredPartial","doc":"Whether the declaration is explicitly `partial` or should be considered as such via `meta`. In the\nlatter case, elaborators should not produce an error if partialty is unnecessary.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isInferredPartial\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">isInferredPartial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L98-L100","name":"Lean.Elab.Modifiers.isPartial","line":98,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isPartial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isPartial\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">isPartial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L95-L96","name":"Lean.Elab.Modifiers.isInferredPublic","line":95,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isInferredPublic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isInferredPublic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">isInferredPublic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L94-L94","name":"Lean.Elab.Modifiers.isPublic","line":94,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isPublic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isPublic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">isPublic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L93-L93","name":"Lean.Elab.Modifiers.isProtected","line":93,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isProtected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isProtected\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">isProtected</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L92-L92","name":"Lean.Elab.Modifiers.isPrivate","line":92,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isPrivate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isPrivate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">isPrivate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L90-L90","name":"Lean.Elab.instInhabitedModifiers","line":90,"kind":"instance","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.instInhabitedModifiers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.instInhabitedModifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedModifiers</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L89-L89","name":"Lean.Elab.Modifiers.attrs","line":89,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.attrs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.attrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">attrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Attribute</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L88-L88","name":"Lean.Elab.Modifiers.isUnsafe","line":88,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.isUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">isUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L87-L87","name":"Lean.Elab.Modifiers.recKind","line":87,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.recKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.recKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">recKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind\">RecKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L86-L86","name":"Lean.Elab.Modifiers.computeKind","line":86,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.computeKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.computeKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">computeKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind\">ComputeKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L85-L85","name":"Lean.Elab.Modifiers.visibility","line":85,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.visibility","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.visibility\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">visibility</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L84-L84","name":"Lean.Elab.Modifiers.docString?","line":84,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.docString?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.docString?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">docString?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L83-L83","name":"Lean.Elab.Modifiers.stx","line":83,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.stx","doc":"Input syntax, used for adjusting declaration range (unless missing) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.declModifiers</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L81-L81","name":"Lean.Elab.Modifiers.mk","line":81,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.declModifiers</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docString?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">visibility</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">computeKind</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind\">ComputeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recKind</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind\">RecKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isUnsafe</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Attribute</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L80-L90","name":"Lean.Elab.Modifiers","line":80,"kind":"structure","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers","doc":"Flags and data added to declarations (eg docstrings, attributes, `private`, `unsafe`, `partial`, ...). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Modifiers</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L78-L78","name":"Lean.Elab.instInhabitedComputeKind","line":78,"kind":"instance","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.instInhabitedComputeKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.instInhabitedComputeKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedComputeKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind\">ComputeKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L77-L77","name":"Lean.Elab.ComputeKind.noncomputable","line":77,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind.noncomputable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind.noncomputable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ComputeKind</span>.<span class=\"name\">noncomputable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind\">ComputeKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L77-L77","name":"Lean.Elab.ComputeKind.meta","line":77,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind.meta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind.meta\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ComputeKind</span>.<span class=\"name\">meta</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind\">ComputeKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L77-L77","name":"Lean.Elab.ComputeKind.regular","line":77,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind.regular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind.regular\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ComputeKind</span>.<span class=\"name\">regular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind\">ComputeKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L75-L78","name":"Lean.Elab.ComputeKind","line":75,"kind":"inductive","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind","doc":"Codegen-relevant modifiers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ComputeKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ComputeKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L73-L73","name":"Lean.Elab.instInhabitedRecKind","line":73,"kind":"instance","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.instInhabitedRecKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.instInhabitedRecKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedRecKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind\">RecKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L72-L72","name":"Lean.Elab.RecKind.default","line":72,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind.default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">RecKind</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind\">RecKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L72-L72","name":"Lean.Elab.RecKind.nonrec","line":72,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind.nonrec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind.nonrec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">RecKind</span>.<span class=\"name\">nonrec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind\">RecKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L72-L72","name":"Lean.Elab.RecKind.partial","line":72,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind.partial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind.partial\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">RecKind</span>.<span class=\"name\">partial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind\">RecKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L70-L73","name":"Lean.Elab.RecKind","line":70,"kind":"inductive","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind","doc":"Whether a declaration is default, partial or nonrec. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.RecKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">RecKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L67-L68","name":"Lean.Elab.Visibility.isInferredPublic","line":67,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.isInferredPublic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.isInferredPublic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Visibility</span>.<span class=\"name\">isInferredPublic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L63-L65","name":"Lean.Elab.Visibility.isPublic","line":63,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.isPublic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.isPublic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Visibility</span>.<span class=\"name\">isPublic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L59-L61","name":"Lean.Elab.Visibility.isProtected","line":59,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.isProtected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.isProtected\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Visibility</span>.<span class=\"name\">isProtected</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L55-L57","name":"Lean.Elab.Visibility.isPrivate","line":55,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.isPrivate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.isPrivate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Visibility</span>.<span class=\"name\">isPrivate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L48-L53","name":"Lean.Elab.instToStringVisibility","line":48,"kind":"instance","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.instToStringVisibility","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.instToStringVisibility\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToStringVisibility</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L46-L46","name":"Lean.Elab.instInhabitedVisibility","line":46,"kind":"instance","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.instInhabitedVisibility","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.instInhabitedVisibility\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedVisibility</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L45-L45","name":"Lean.Elab.Visibility.public","line":45,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.public","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.public\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Visibility</span>.<span class=\"name\">public</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L45-L45","name":"Lean.Elab.Visibility.private","line":45,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.private","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.private\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Visibility</span>.<span class=\"name\">private</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L45-L45","name":"Lean.Elab.Visibility.protected","line":45,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.protected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.protected\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Visibility</span>.<span class=\"name\">protected</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L45-L45","name":"Lean.Elab.Visibility.regular","line":45,"kind":"ctor","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.regular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility.regular\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Visibility</span>.<span class=\"name\">regular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\">Visibility</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L43-L46","name":"Lean.Elab.Visibility","line":43,"kind":"inductive","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility","doc":"Declaration visibility modifier. That is, whether a declaration is regular, protected or private. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Visibility\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Visibility</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/DeclModifiers.lean#L13-L41","name":"Lean.Elab.checkNotAlreadyDeclared","line":13,"kind":"def","docLink":"./Lean/Elab/DeclModifiers.html#Lean.Elab.checkNotAlreadyDeclared","doc":"Ensure the environment does not contain a declaration with name `declName`.\nRecall that a private declaration cannot shadow a non-private one and vice-versa, although\nthey internally have different names.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.checkNotAlreadyDeclared\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">checkNotAlreadyDeclared</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}