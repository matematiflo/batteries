{"name":"Init.Grind.Ring.OfSemiring","instances":[{"typeNames":["Lean.Grind.Ring.OfSemiring.Expr"],"name":"Lean.Grind.Ring.OfSemiring.instInhabitedExpr","className":"Inhabited"},{"typeNames":["Lean.Grind.Ring.OfSemiring.Expr"],"name":"Lean.Grind.Ring.OfSemiring.instBEqExpr","className":"BEq"},{"typeNames":["Lean.Grind.Ring.OfSemiring.Expr"],"name":"Lean.Grind.Ring.OfSemiring.instHashableExpr","className":"Hashable"}],"imports":["Init.Grind.Ring.Envelope","Init.Data.Hashable","Init.Data.RArray","Init.Grind.Ring.Poly"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L392-L397","name":"Lean.Grind.Ring.OfSemiring.eq_normS","line":392,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.eq_normS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.eq_normS\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">eq_normS</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.eq_normS_cert\">eq_normS_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L389-L390","name":"Lean.Grind.Ring.OfSemiring.eq_normS_cert","line":389,"kind":"def","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.eq_normS_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.eq_normS_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">eq_normS_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L375-L387","name":"Lean.Grind.Ring.OfSemiring.Expr.denoteS_toPoly","line":375,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denoteS_toPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denoteS_toPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteS_toPoly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">CommRing.Poly.denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly\">toPoly</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L365-L373","name":"Lean.Grind.Ring.OfSemiring.Expr.toPoly_NonnegCoeffs","line":365,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly_NonnegCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly\">toPoly</a></span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L349-L358","name":"Lean.Grind.CommRing.Poly.denoteS_pow","line":349,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.pow\">pow</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L344-L347","name":"Lean.Grind.CommRing.Poly.denoteS_mul","line":344,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.mul\">mul</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L328-L342","name":"Lean.Grind.CommRing.Poly.denoteS_mul_go","line":328,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_mul_go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_mul_go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_mul_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.mul.go\">mul.go</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p₁</span> <span class=\"fn\">acc</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L325-L326","name":"Lean.Grind.CommRing.Poly.num_zero_NonnegCoeffs","line":325,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.num_zero_NonnegCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.num_zero_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">num_zero_NonnegCoeffs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.num\">num</a> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L319-L323","name":"Lean.Grind.CommRing.Poly.pow_NonnegCoeffs","line":319,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.pow_NonnegCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.pow_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">pow_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.pow\">pow</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L315-L317","name":"Lean.Grind.CommRing.Poly.mul_NonnegCoeffs","line":315,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.mul_NonnegCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.mul_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.mul\">mul</a></span> <span class=\"fn\">p₂</span>)</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L299-L313","name":"Lean.Grind.CommRing.Poly.mul_go_NonnegCoeffs","line":299,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.mul_go_NonnegCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.mul_go_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul_go_NonnegCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.mul.go\">mul.go</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p₁</span> <span class=\"fn\">acc</span>)</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L278-L297","name":"Lean.Grind.CommRing.Poly.combine_NonnegCoeffs","line":278,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.combine_NonnegCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.combine_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.combine\">combine</a></span> <span class=\"fn\">p₂</span>)</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L273-L276","name":"Lean.Grind.CommRing.Poly.concat_NonnegCoeffs","line":273,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.concat_NonnegCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.concat_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">concat_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.concat\">concat</a></span> <span class=\"fn\">p₂</span>)</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L266-L271","name":"Lean.Grind.CommRing.Poly.addConst_NonnegCoeffs","line":266,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.addConst_NonnegCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.addConst_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">addConst_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.addConst\">addConst</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L253-L264","name":"Lean.Grind.CommRing.Poly.mulMon_NonnegCoeffs","line":253,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.mulMon_NonnegCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.mulMon_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMon_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.mulMon\">mulMon</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L240-L251","name":"Lean.Grind.CommRing.Poly.mulConst_NonnegCoeffs","line":240,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.mulConst_NonnegCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.mulConst_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulConst_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.mulConst\">mulConst</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L206-L238","name":"Lean.Grind.CommRing.Poly.denoteS_combine","line":206,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.combine\">combine</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L182-L204","name":"Lean.Grind.CommRing.Poly.denoteS_mulMon","line":182,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_mulMon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_mulMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_mulMon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.mulMon\">mulMon</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L167-L180","name":"Lean.Grind.CommRing.Poly.denoteS_mulConst","line":167,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_mulConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_mulConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_mulConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.mulConst\">mulConst</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L161-L165","name":"Lean.Grind.CommRing.Poly.denoteS_concat","line":161,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_concat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.concat\">concat</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L133-L159","name":"Lean.Grind.CommRing.Poly.denoteS_insert","line":133,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.insert\">insert</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L120-L131","name":"Lean.Grind.CommRing.Poly.denoteS_addConst","line":120,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_addConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_addConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_addConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.addConst\">addConst</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L116-L118","name":"Lean.Grind.CommRing.Poly.denoteS_ofVar","line":116,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_ofVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_ofVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_ofVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.ofVar\">ofVar</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L112-L114","name":"Lean.Grind.CommRing.Poly.denoteS_ofMon","line":112,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_ofMon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS_ofMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_ofMon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.ofMon\">ofMon</a> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L105-L108","name":"Lean.Grind.CommRing.Poly.denoteS","line":105,"kind":"def","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.denoteS\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L97-L103","name":"Lean.Grind.CommRing.denoteSInt_eq","line":97,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.denoteSInt_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.denoteSInt_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">denoteSInt_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.denoteSInt\">denoteSInt</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L91-L95","name":"Lean.Grind.CommRing.denoteSInt","line":91,"kind":"def","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.denoteSInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.denoteSInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">denoteSInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L89-L89","name":"Lean.Grind.CommRing.Poly.NonnegCoeffs.add","line":89,"kind":"ctor","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">NonnegCoeffs</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.add\">Poly.add</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L88-L88","name":"Lean.Grind.CommRing.Poly.NonnegCoeffs.num","line":88,"kind":"ctor","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs.num","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">NonnegCoeffs</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly.num\">Poly.num</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L87-L89","name":"Lean.Grind.CommRing.Poly.NonnegCoeffs","line":87,"kind":"inductive","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">NonnegCoeffs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L68-L77","name":"Lean.Grind.Ring.OfSemiring.Expr.toPoly","line":68,"kind":"def","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a> → <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">CommRing.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L61-L66","name":"Lean.Grind.Ring.OfSemiring.of_diseq","line":61,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.of_diseq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.of_diseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">of_diseq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.AddRightCancel\">AddRightCancel</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\">Expr.denoteAsRing</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\">Expr.denoteAsRing</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L56-L59","name":"Lean.Grind.Ring.OfSemiring.of_eq","line":56,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.of_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\">Expr.denoteAsRing</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\">Expr.denoteAsRing</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L53-L54","name":"Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing_eq","line":53,"kind":"theorem","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteAsRing_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\">denoteAsRing</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">(<a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L44-L49","name":"Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing","line":44,"kind":"def","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteAsRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L35-L40","name":"Lean.Grind.Ring.OfSemiring.Expr.denote","line":35,"kind":"def","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L32-L33","name":"Lean.Grind.Ring.OfSemiring.Var.denote","line":32,"kind":"def","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Var.denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Var.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Var</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L30-L30","name":"Lean.Grind.Ring.OfSemiring.Context","line":30,"kind":"def","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L28-L28","name":"Lean.Grind.Ring.OfSemiring.instHashableExpr","line":28,"kind":"instance","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.instHashableExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.instHashableExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instHashableExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L28-L28","name":"Lean.Grind.Ring.OfSemiring.instBEqExpr","line":28,"kind":"instance","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.instBEqExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.instBEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instBEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L28-L28","name":"Lean.Grind.Ring.OfSemiring.instInhabitedExpr","line":28,"kind":"instance","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.instInhabitedExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.instInhabitedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L27-L27","name":"Lean.Grind.Ring.OfSemiring.Expr.pow","line":27,"kind":"ctor","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L26-L26","name":"Lean.Grind.Ring.OfSemiring.Expr.mul","line":26,"kind":"ctor","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L25-L25","name":"Lean.Grind.Ring.OfSemiring.Expr.add","line":25,"kind":"ctor","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L24-L24","name":"Lean.Grind.Ring.OfSemiring.Expr.var","line":24,"kind":"ctor","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L23-L23","name":"Lean.Grind.Ring.OfSemiring.Expr.num","line":23,"kind":"ctor","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.num","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L22-L28","name":"Lean.Grind.Ring.OfSemiring.Expr","line":22,"kind":"inductive","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/OfSemiring.lean#L21-L21","name":"Lean.Grind.Ring.OfSemiring.Var","line":21,"kind":"def","docLink":"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/OfSemiring.html#Lean.Grind.Ring.OfSemiring.Var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}