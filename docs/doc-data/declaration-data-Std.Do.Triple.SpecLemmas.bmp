{"name":"Std.Do.Triple.SpecLemmas","instances":[],"imports":["Std.Do.Triple.Basic","Std.Do.WP"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L468-L480","name":"Std.Do.Spec.foldlM_array","line":468,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_array","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_array\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">foldlM_array</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">List.Zipper</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span>) <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">rpref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">rpref</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b'</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suff</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.foldlM\">Array.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span>\n    <span class=\"fn\">xs</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L452-L466","name":"Std.Do.Spec.forIn_array","line":452,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_array","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_array\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn_array</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">List.Zipper</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span>) <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">rpref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">rpref</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suff</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L436-L450","name":"Std.Do.Spec.forIn'_array","line":436,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_array","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_array\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn'_array</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">List.Zipper</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span>) <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">rpref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">rpref</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suff</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L421-L434","name":"Std.Do.Spec.forIn_range","line":421,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_range\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">List.Zipper</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span></span>) <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">rpref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">rpref</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suff</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L406-L419","name":"Std.Do.Spec.forIn'_range","line":406,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_range\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn'_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">List.Zipper</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span></span>) <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">rpref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">rpref</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suff</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L395-L404","name":"Std.Do.Spec.foldlM_list_const_inv","line":395,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_list_const_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_list_const_inv\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">foldlM_list_const_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\">∀ (<span class=\"fn\">hd</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">hd</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b'</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b'</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">init</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">xs</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">inv</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L377-L392","name":"Std.Do.Spec.foldlM_list","line":377,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_list\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">foldlM_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">List.Zipper</a> <span class=\"fn\">xs</span></span>) <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">rpref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">rpref</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b'</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suff</span> := <span class=\"fn\">xs</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">xs</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L366-L375","name":"Std.Do.Spec.forIn_list_const_inv","line":366,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_list_const_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_list_const_inv\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn_list_const_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">hd</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">hd</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b'</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b'</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">init</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">inv</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L350-L363","name":"Std.Do.Spec.forIn_list","line":350,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_list\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">List.Zipper</a> <span class=\"fn\">xs</span></span>) <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">rpref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">rpref</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suff</span> := <span class=\"fn\">xs</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L339-L348","name":"Std.Do.Spec.forIn'_list_const_inv","line":339,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_list_const_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_list_const_inv\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn'_list_const_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b'</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b'</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">init</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">inv</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L304-L336","name":"Std.Do.Spec.forIn'_list","line":304,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_list\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn'_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">List.Zipper</a> <span class=\"fn\">xs</span></span>) <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">rpref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">rpref</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rpref</span>, <span class=\"fn\">suff</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suff</span> := <span class=\"fn\">xs</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">{</a> <span class=\"fn\">rpref</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>, <span class=\"fn\">suff</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L289-L300","name":"Std.Do.Spec.tryCatch_ExceptT_lift","line":289,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ExceptT_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ExceptT_lift\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_ExceptT_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">ε'</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε'</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε'</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L283-L287","name":"Std.Do.Spec.tryCatch_StateT","line":283,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_StateT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">xs</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L277-L281","name":"Std.Do.Spec.tryCatch_ReaderT","line":277,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ReaderT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">r</span></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">r</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L265-L275","name":"Std.Do.Spec.throw_ExceptT_lift","line":265,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ExceptT_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ExceptT_lift\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_ExceptT_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">ε'</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L261-L263","name":"Std.Do.Spec.throw_StateT","line":261,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_StateT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L257-L259","name":"Std.Do.Spec.throw_ReaderT","line":257,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ReaderT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L253-L255","name":"Std.Do.Spec.tryCatch_MonadExcept","line":253,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_MonadExcept","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_MonadExcept\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_MonadExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L249-L251","name":"Std.Do.Spec.throw_MonadExcept","line":249,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_MonadExcept","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_MonadExcept\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_MonadExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s✝</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">s✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">s✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L229-L232","name":"Std.Do.Spec.tryCatch_EStateM","line":229,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_EStateM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">EStateM.Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">EStateM.Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>\n    <span class=\"fn\">s</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L224-L226","name":"Std.Do.Spec.throw_EStateM","line":224,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_EStateM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L220-L222","name":"Std.Do.Spec.modifyGet_EStateM","line":220,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.modifyGet_EStateM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.modifyGet_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">modifyGet_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L216-L218","name":"Std.Do.Spec.set_EStateM","line":216,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.set_EStateM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.set_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">set_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a> <span class=\"fn\">s</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">s</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L212-L214","name":"Std.Do.Spec.get_EStateM","line":212,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.get_EStateM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.get_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">get_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L205-L208","name":"Std.Do.Spec.tryCatch_Except","line":205,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_Except","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_Except\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_Except</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L201-L203","name":"Std.Do.Spec.throw_Except","line":201,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_Except","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_Except\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_Except</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L194-L197","name":"Std.Do.Spec.tryCatch_ExceptT","line":194,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ExceptT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L189-L192","name":"Std.Do.Spec.throw_ExceptT","line":189,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ExceptT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L182-L187","name":"Std.Do.Spec.run_ExceptT","line":182,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.run_ExceptT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.run_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">run_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/Except.html#ExceptT.run\">run</a></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L175-L178","name":"Std.Do.Spec.modifyGet_StateT","line":175,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.modifyGet_StateT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.modifyGet_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">modifyGet_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L171-L173","name":"Std.Do.Spec.set_StateT","line":171,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.set_StateT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.set_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">set_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">psm</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">psm</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">psm</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a> <span class=\"fn\">s</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">s</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L167-L169","name":"Std.Do.Spec.get_StateT","line":167,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.get_StateT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.get_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">get_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">psm</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">psm</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">psm</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L159-L161","name":"Std.Do.Spec.withReader_ReaderT","line":159,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.withReader_ReaderT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.withReader_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">withReader_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">psm</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\">ρ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">psm</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">psm</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">r</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">r</span>)</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L155-L157","name":"Std.Do.Spec.read_ReaderT","line":155,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.read_ReaderT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.read_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">read_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">psm</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">ρ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">psm</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">psm</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">r</span> <span class=\"fn\">r</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <a href=\"./Init/Prelude.html#MonadReaderOf.read\">MonadReaderOf.read</a> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L145-L149","name":"Std.Do.Spec.monadMap_refl","line":145,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadMap_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L138-L143","name":"Std.Do.Spec.monadMap_trans","line":138,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadMap_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">o</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">o</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor\">MonadFunctor</a> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT\">MonadFunctorT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} =&gt; <span class=\"fn\">f</span></span></span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L128-L134","name":"Std.Do.Spec.monadMap_ExceptT","line":128,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_ExceptT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadMap_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/Except.html#ExceptT.run\">run</a></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L123-L126","name":"Std.Do.Spec.monadMap_ReaderT","line":123,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_ReaderT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadMap_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">s</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">s</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L118-L121","name":"Std.Do.Spec.monadMap_StateT","line":118,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_StateT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadMap_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L105-L110","name":"Std.Do.Spec.monadLift_ExceptT","line":105,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_ExceptT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadLift_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L101-L103","name":"Std.Do.Spec.monadLift_ReaderT","line":101,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_ReaderT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadLift_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">s</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L97-L99","name":"Std.Do.Spec.monadLift_StateT","line":97,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_StateT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadLift_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a>fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L91-L93","name":"Std.Do.Spec.seq","line":91,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.seq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.seq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">y</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">(<span class=\"fn\">x</span> &lt;*&gt; <span class=\"fn\">y</span>)</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L87-L89","name":"Std.Do.Spec.map","line":87,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.map\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L83-L85","name":"Std.Do.Spec.bind","line":83,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.bind\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L79-L81","name":"Std.Do.Spec.bind'","line":79,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.bind'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.bind'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">bind'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L75-L77","name":"Std.Do.Spec.pure","line":75,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">Pure.pure</a> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L71-L73","name":"Std.Do.Spec.pure'","line":71,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.pure'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.pure'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">pure'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">Pure.pure</a> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L60-L64","name":"Std.Do.Spec.dite","line":60,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.dite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.dite\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">dite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\">c</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">c</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ifTrue</span> : <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">c</span>), <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ifFalse</span> : <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">c</span>), <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">if h : <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">h</span></span> else <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">h</span></span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L54-L58","name":"Std.Do.Spec.ite","line":54,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.ite\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ifTrue</span> : <span class=\"fn\"><span class=\"fn\">c</span> → <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">t</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ifFalse</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">c</span> → <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">e</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L39-L40","name":"Std.List.Zipper.tail","line":39,"kind":"def","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.tail\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">Zipper</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hd</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">Zipper</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.suff\">suff</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">Zipper</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L38-L38","name":"Std.List.Zipper.end","line":38,"kind":"def","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.end","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.end\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">Zipper</span>.<span class=\"name\">end</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">Zipper</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L37-L37","name":"Std.List.Zipper.begin","line":37,"kind":"def","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.begin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.begin\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">Zipper</span>.<span class=\"name\">begin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">Zipper</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L35-L35","name":"Std.List.Zipper.pref","line":35,"kind":"def","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.pref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.pref\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">Zipper</span>.<span class=\"name\">pref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">Zipper</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L33-L33","name":"Std.List.Zipper.property","line":33,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.property","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.property\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">Zipper</span>.<span class=\"name\">property</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">Zipper</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.rpref\">rpref</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.suff\">suff</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L32-L32","name":"Std.List.Zipper.suff","line":32,"kind":"def","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.suff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.suff\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">Zipper</span>.<span class=\"name\">suff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">Zipper</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L31-L31","name":"Std.List.Zipper.rpref","line":31,"kind":"def","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.rpref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.rpref\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">Zipper</span>.<span class=\"name\">rpref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">Zipper</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L30-L30","name":"Std.List.Zipper.mk","line":30,"kind":"ctor","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.mk\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">Zipper</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rpref </span><span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">property</span> : <span class=\"fn\"><span class=\"fn\">rpref</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">suff</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">Zipper</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L29-L29","name":"Std.List.Zipper.ext","line":29,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.ext\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">Zipper</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">Zipper</a> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rpref</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.rpref\">rpref</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.rpref\">rpref</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suff</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.suff\">suff</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.suff\">suff</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L29-L29","name":"Std.List.Zipper.ext_iff","line":29,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.ext_iff\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">Zipper</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\">Zipper</a> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.rpref\">rpref</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.rpref\">rpref</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.suff\">suff</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper.suff\">suff</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L29-L33","name":"Std.List.Zipper","line":29,"kind":"structure","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.List.Zipper\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">Zipper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L21-L23","name":"Std.Range.toList_range'","line":21,"kind":"theorem","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList_range'\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">toList_range'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span> (<span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.stop\">stop</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/SpecLemmas.lean#L18-L19","name":"Std.Range.toList","line":18,"kind":"def","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"}]}