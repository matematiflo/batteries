{"name":"Std.Do.SPred.SVal","instances":[{"typeNames":["Std.Do.SVal.StateTuple"],"name":"Std.Do.SVal.instInhabitedStateTupleNil","className":"Inhabited"},{"typeNames":["Std.Do.SVal.StateTuple"],"name":"Std.Do.SVal.instInhabitedStateTupleCons","className":"Inhabited"},{"typeNames":["Std.Do.SVal"],"name":"Std.Do.SVal.instInhabited","className":"Inhabited"},{"typeNames":["List.cons"],"name":"Std.Do.SVal.instGetTyCons","className":"Std.Do.SVal.GetTy"},{"typeNames":["List.cons"],"name":"Std.Do.SVal.instGetTyCons_1","className":"Std.Do.SVal.GetTy"}],"imports":["Init.Data.List.Notation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L75-L75","name":"Std.Do.SVal.getThe_there","line":75,"kind":"theorem","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe_there","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe_there\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">getThe_there</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ</span> <span class=\"fn\">σs</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ'</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe\">getThe</a> <span class=\"fn\">σ</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe\">getThe</a> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L74-L74","name":"Std.Do.SVal.getThe_here","line":74,"kind":"theorem","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe_here","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe_here\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">getThe_here</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe\">getThe</a> <span class=\"fn\">σ</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.pure\">pure</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L72-L73","name":"Std.Do.SVal.getThe","line":72,"kind":"def","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe","doc":"Get the top-most state of type `σ` from an `SVal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">getThe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ</span> <span class=\"fn\">σs</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L69-L70","name":"Std.Do.SVal.instGetTyCons_1","line":69,"kind":"instance","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.instGetTyCons_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.instGetTyCons_1\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">instGetTyCons_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ₁</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ₂</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ₁</span> <span class=\"fn\">σs</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ₁</span> (<span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L66-L67","name":"Std.Do.SVal.instGetTyCons","line":66,"kind":"instance","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.instGetTyCons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.instGetTyCons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">instGetTyCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ</span> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L64-L64","name":"Std.Do.SVal.GetTy.get","line":64,"kind":"def","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy.get\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">GetTy</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ</span> <span class=\"fn\">σs</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L63-L63","name":"Std.Do.SVal.GetTy.mk","line":63,"kind":"ctor","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">GetTy</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">get</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ</span> <span class=\"fn\">σs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L63-L64","name":"Std.Do.SVal.GetTy","line":63,"kind":"class","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">GetTy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L60-L61","name":"Std.Do.SVal.instInhabited","line":60,"kind":"instance","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L57-L58","name":"Std.Do.SVal.pure","line":57,"kind":"def","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.pure","doc":"Embed a pure value into an `SVal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L55-L55","name":"Std.Do.SVal.curry_uncurry","line":55,"kind":"theorem","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_uncurry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_uncurry\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">curry_uncurry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">curry</a> <a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\">#</a><span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L54-L54","name":"Std.Do.SVal.uncurry_curry","line":54,"kind":"theorem","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_curry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_curry\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">uncurry_curry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\">#</a><span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">curry</a> <span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L52-L52","name":"Std.Do.SVal.uncurry_cons","line":52,"kind":"theorem","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">uncurry_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>) <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\">#</a><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">t</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\">#</a><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L51-L51","name":"Std.Do.SVal.uncurry_nil","line":51,"kind":"theorem","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">uncurry_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\">#</a><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>) =&gt; <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L47-L50","name":"Std.Do.SVal.uncurry","line":47,"kind":"def","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry","doc":"Uncurry an `SVal` into a function taking a `StateTuple`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">uncurry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L45-L45","name":"Std.Do.SVal.curry_cons","line":45,"kind":"theorem","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">curry_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">curry</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">⌜</a><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">⌝</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L44-L44","name":"Std.Do.SVal.curry_nil","line":44,"kind":"theorem","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">curry_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">curry</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L40-L43","name":"Std.Do.SVal.curry","line":40,"kind":"def","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry","doc":"Curry a function taking a `StateTuple` into an `SVal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">curry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L37-L38","name":"Std.Do.SVal.instInhabitedStateTupleCons","line":37,"kind":"instance","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabitedStateTupleCons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabitedStateTupleCons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">instInhabitedStateTupleCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L34-L35","name":"Std.Do.SVal.instInhabitedStateTupleNil","line":34,"kind":"instance","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabitedStateTupleNil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabitedStateTupleNil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">instInhabitedStateTupleNil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L29-L32","name":"Std.Do.SVal.StateTuple","line":29,"kind":"def","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple","doc":"A tuple capturing the whole state of an `SVal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">StateTuple</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SVal.lean#L13-L21","name":"Std.Do.SVal","line":13,"kind":"def","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal","doc":"A value indexed by a curried tuple of states.\n```\nexample : SVal [Nat, Bool] String = (Nat → Bool → String) := rfl\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}