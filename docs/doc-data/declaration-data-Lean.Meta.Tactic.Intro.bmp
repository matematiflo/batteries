{"name":"Lean.Meta.Tactic.Intro","instances":[],"imports":["Lean.Meta.Tactic.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Intro.lean#L171-L181","name":"Lean.MVarId.intros","line":171,"kind":"def","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intros","doc":"Introduce as many binders as possible without unfolding definitions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intros\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">intros</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Intro.lean#L161-L169","name":"Lean.Meta.getIntrosSize","line":161,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.getIntrosSize","doc":"Calculate the number of new hypotheses that would be created by `intros`,\ni.e. the number of binders which can be introduced without unfolding definitions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Intro.html#Lean.Meta.getIntrosSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getIntrosSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Intro.lean#L154-L159","name":"Lean.MVarId.intro1P","line":154,"kind":"def","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intro1P","doc":"Introduce one object from the goal `mvarid`, preserving the name used in the binder.\nReturns a pair made of the newly introduced variable and the new goal.\nThis will fail if there is nothing to introduce, ie when the goal\ndoes not start with a forall, lambda or let. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intro1P\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">intro1P</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Intro.lean#L147-L152","name":"Lean.MVarId.intro1","line":147,"kind":"def","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intro1","doc":"Introduce one object from the goal `mvarid`, without preserving the name used in the binder.\nReturns a pair made of the newly introduced variable (which will have an inaccessible name)\nand the new goal. This will fail if there is nothing to introduce, ie when the goal\ndoes not start with a forall, lambda or let. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intro1\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">intro1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Intro.lean#L143-L145","name":"Lean.Meta.intro1Core","line":143,"kind":"def","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.intro1Core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Intro.html#Lean.Meta.intro1Core\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">intro1Core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserveBinderNames</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Intro.lean#L136-L141","name":"Lean.MVarId.intro","line":136,"kind":"def","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intro","doc":"Introduce one binder using `name` as the new hypothesis name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intro\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">intro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Intro.lean#L129-L134","name":"Lean.MVarId.introNP","line":129,"kind":"def","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.introNP","doc":"Introduce `n` binders in the goal `mvarId`. The new hypotheses are named using the binder names.\nThe suffix `P` stands for \"preserving`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.introNP\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">introNP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Intro.lean#L123-L127","name":"Lean.MVarId.introN","line":123,"kind":"def","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.introN","doc":"Introduce `n` binders in the goal `mvarId`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.introN\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">introN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useNamesForExplicitOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Intro.lean#L115-L121","name":"Lean.Meta.introNCore","line":115,"kind":"def","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.introNCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Intro.html#Lean.Meta.introNCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">introNCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useNamesForExplicitOnly </span><span class=\"fn\">preserveBinderNames</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Intro.lean#L86-L92","name":"Lean.Meta.mkFreshBinderNameForTactic","line":86,"kind":"def","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.mkFreshBinderNameForTactic","doc":"Similar to `Lean.Core.mkFreshUserName`, but takes into account the `tactic.hygienic` option value.\nIf `tactic.hygienic = true`, then fresh macro scopes are applied to `binderName`.\nIf not, then returns an (accessible) name based on `binderName` that is unused in the local context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Intro.html#Lean.Meta.mkFreshBinderNameForTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkFreshBinderNameForTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Intro.lean#L74-L78","name":"Lean.Meta.tactic.hygienic","line":74,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.tactic.hygienic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Intro.html#Lean.Meta.tactic.hygienic\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">tactic</span>.<span class=\"name\">hygienic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}