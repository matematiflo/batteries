{"name":"Batteries.Data.AssocList","instances":[{"typeNames":["Batteries.AssocList"],"name":"Batteries.instInhabitedAssocList","className":"Inhabited"},{"typeNames":["Batteries.AssocList"],"name":"Batteries.AssocList.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["Batteries.AssocList","Prod"],"name":"Batteries.AssocList.instForInProd","className":"ForIn"},{"typeNames":["Batteries.AssocList","Batteries.AssocList"],"name":"Batteries.AssocList.instToStream","className":"ToStream"},{"typeNames":["Batteries.AssocList","Prod"],"name":"Batteries.AssocList.instStreamProd","className":"Stream"},{"typeNames":["Batteries.AssocList"],"name":"Batteries.AssocList.instBEq","className":"BEq"},{"typeNames":["Batteries.AssocList"],"name":"Batteries.AssocList.instLawfulBEq","className":"LawfulBEq"}],"imports":["Init","Batteries.Data.List.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L306-L309","name":"Batteries.AssocList.beq_eq","line":306,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.beq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.beq_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">beq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">m</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L294-L304","name":"Batteries.AssocList.instLawfulBEq","line":294,"kind":"instance","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.instLawfulBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.instLawfulBEq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">instLawfulBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L291-L292","name":"Batteries.AssocList.beq_cons₂","line":291,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.beq_cons₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.beq_cons₂\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">beq_cons₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b'</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.cons\">cons</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.cons\">cons</a> <span class=\"fn\">a'</span> <span class=\"fn\">b'</span> <span class=\"fn\">t'</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">t'</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L289-L290","name":"Batteries.AssocList.beq_cons_nil","line":289,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.beq_cons_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.beq_cons_nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">beq_cons_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.cons\">cons</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.nil\">nil</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L287-L288","name":"Batteries.AssocList.beq_nil_cons","line":287,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.beq_nil_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.beq_nil_cons\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">beq_nil_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.nil\">nil</a> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.cons\">cons</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">t</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L286-L286","name":"Batteries.AssocList.beq_nil₂","line":286,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.beq_nil₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.beq_nil₂\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">beq_nil₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.nil\">nil</a> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.nil\">nil</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L280-L284","name":"Batteries.AssocList.instBEq","line":280,"kind":"instance","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.instBEq","doc":"Boolean equality for `AssocList`.\n(This relation cares about the ordering of the key-value pairs.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.instBEq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">instBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L273-L278","name":"Batteries.AssocList.beq","line":273,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.beq","doc":"Implementation of `==` on `AssocList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.beq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L269-L271","name":"List.length_toAssocList","line":269,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#List.length_toAssocList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#List.length_toAssocList\"><span class=\"name\">List</span>.<span class=\"name\">length_toAssocList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#List.toAssocList\">toAssocList</a></span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L266-L267","name":"Batteries.AssocList.toList_toAssocList","line":266,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_toAssocList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_toAssocList\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">toList_toAssocList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span>.<a href=\"./Batteries/Data/AssocList.html#List.toAssocList\">toAssocList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L263-L264","name":"List.toList_toAssocList","line":263,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#List.toList_toAssocList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#List.toList_toAssocList\"><span class=\"name\">List</span>.<span class=\"name\">toList_toAssocList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#List.toAssocList\">toAssocList</a></span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L258-L261","name":"List.toAssocList","line":258,"kind":"def","docLink":"./Batteries/Data/AssocList.html#List.toAssocList","doc":"Converts a list into an `AssocList`. This is the inverse function to `AssocList.toList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#List.toAssocList\"><span class=\"name\">List</span>.<span class=\"name\">toAssocList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span> → <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">Batteries.AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L256-L256","name":"Batteries.AssocList.instStreamProd","line":256,"kind":"instance","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.instStreamProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.instStreamProd\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">instStreamProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L255-L255","name":"Batteries.AssocList.instToStream","line":255,"kind":"instance","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.instToStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.instToStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">instToStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream\">ToStream</a> <span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L250-L253","name":"Batteries.AssocList.pop?","line":250,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.pop?","doc":"Split the list into head and tail, if possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.pop?\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">pop?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> ((<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L244-L248","name":"Batteries.AssocList.forIn_eq","line":244,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.forIn_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.forIn_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">forIn_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">l</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L241-L242","name":"Batteries.AssocList.instForInProd","line":241,"kind":"instance","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.instForInProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.instForInProd\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">instForInProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L231-L239","name":"Batteries.AssocList.forIn","line":231,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.forIn","doc":"The implementation of `ForIn`, which enables `for (k, v) in aList do ...` notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.forIn\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L225-L229","name":"Batteries.AssocList.length_modify","line":225,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.length_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length_modify\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">length_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β✝</span> → <span class=\"fn\">β✝</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.modify\">modify</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L218-L223","name":"Batteries.AssocList.toList_modify","line":218,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_modify\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">toList_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.modify\">modify</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.replaceF\">List.replaceF</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\">bif <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> else <a href=\"./Init/Prelude.html#Option.none\">none</a></span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L208-L216","name":"Batteries.AssocList.modify","line":208,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.modify","doc":"`O(n)`. Replace the first entry `a', b` in the list\nwith key equal to `a` to have key `a` and value `f a' b`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.modify\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L205-L206","name":"Batteries.AssocList.toList_erase","line":205,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_erase\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">toList_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.erase\">erase</a> <span class=\"fn\">a</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.eraseP\">List.eraseP</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L201-L203","name":"Batteries.AssocList.erase","line":201,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.erase","doc":"`O(n)`. Remove the first entry in the list with key equal to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.erase\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L197-L199","name":"Batteries.AssocList.toList_eraseP","line":197,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_eraseP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_eraseP\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">toList_eraseP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.eraseP\">eraseP</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.eraseP\">List.eraseP</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L192-L195","name":"Batteries.AssocList.eraseP","line":192,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.eraseP","doc":"`O(n)`. Remove the first entry in the list with key equal to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.eraseP\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">eraseP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L186-L190","name":"Batteries.AssocList.length_replace","line":186,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.length_replace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length_replace\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">length_replace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.replace\">replace</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L181-L184","name":"Batteries.AssocList.toList_replace","line":181,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_replace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_replace\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">toList_replace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.replace\">replace</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.replaceF\">List.replaceF</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> else <a href=\"./Init/Prelude.html#Option.none\">none</a></span>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L171-L179","name":"Batteries.AssocList.replace","line":171,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.replace","doc":"`O(n)`. Replace the first entry in the list\nwith key equal to `a` to have key `a` and value `b`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.replace\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">replace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L167-L169","name":"Batteries.AssocList.contains_eq","line":167,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.contains_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.contains_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">contains_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.contains\">contains</a> <span class=\"fn\">a</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.any\">any</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L164-L165","name":"Batteries.AssocList.contains","line":164,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.contains","doc":"`O(n)`. Returns true if there is an element in the list whose key is equal to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.contains\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L161-L162","name":"Batteries.AssocList.All","line":161,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.All","doc":"Returns true if every entry in the list satisfies `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.All\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">All</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L158-L159","name":"Batteries.AssocList.all_eq","line":158,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.all_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.all_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">all_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.all\">all</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.all\">all</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n    <span class=\"fn\">match <span class=\"fn\">x</span> with\n    | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L153-L156","name":"Batteries.AssocList.all","line":153,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.all","doc":"`O(n)`. Returns true if every entry in the list satisfies `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.all\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L150-L151","name":"Batteries.AssocList.any_eq","line":150,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.any_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.any_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">any_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.any\">any</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.any\">any</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n    <span class=\"fn\">match <span class=\"fn\">x</span> with\n    | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L145-L148","name":"Batteries.AssocList.any","line":145,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.any","doc":"`O(n)`. Returns true if any entry in the list satisfies `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.any\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L142-L143","name":"Batteries.AssocList.find?_eq","line":142,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.find?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.find?_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">find?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.find?\">find?</a> <span class=\"fn\">a</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L138-L140","name":"Batteries.AssocList.find?_eq_findEntry?","line":138,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.find?_eq_findEntry?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.find?_eq_findEntry?\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">find?_eq_findEntry?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.find?\">find?</a> <span class=\"fn\">a</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>)</span> <span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.findEntry?\">findEntry?</a> <span class=\"fn\">a</span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L131-L136","name":"Batteries.AssocList.find?","line":131,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.find?","doc":"`O(n)`. Returns the first value in the list whose key is equal to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.find?\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L128-L129","name":"Batteries.AssocList.findEntry?_eq","line":128,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.findEntry?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.findEntry?_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">findEntry?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.findEntry?\">findEntry?</a> <span class=\"fn\">a</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L124-L126","name":"Batteries.AssocList.findEntry?","line":124,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.findEntry?","doc":"`O(n)`. Returns the first entry in the list whose key is equal to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.findEntry?\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">findEntry?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L120-L122","name":"Batteries.AssocList.findEntryP?_eq","line":120,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.findEntryP?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.findEntryP?_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">findEntryP?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.findEntryP?\">findEntryP?</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L115-L118","name":"Batteries.AssocList.findEntryP?","line":115,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.findEntryP?","doc":"`O(n)`. Returns the first entry in the list whose entry satisfies `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.findEntryP?\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">findEntryP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L112-L113","name":"Batteries.AssocList.length_mapVal","line":112,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.length_mapVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length_mapVal\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">length_mapVal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">β✝</span> → <span class=\"fn\">β✝¹</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α✝</span> <span class=\"fn\">β✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.mapVal\">mapVal</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L108-L110","name":"Batteries.AssocList.toList_mapVal","line":108,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_mapVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_mapVal\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">toList_mapVal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.mapVal\">mapVal</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L103-L106","name":"Batteries.AssocList.mapVal","line":103,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.mapVal","doc":"`O(n)`. Map a function `f` over the values of the list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.mapVal\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">mapVal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">δ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L100-L101","name":"Batteries.AssocList.length_mapKey","line":100,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.length_mapKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length_mapKey\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">length_mapKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝¹</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α✝</span> <span class=\"fn\">β✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.mapKey\">mapKey</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L96-L98","name":"Batteries.AssocList.toList_mapKey","line":96,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_mapKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_mapKey\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">toList_mapKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.mapKey\">mapKey</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L91-L94","name":"Batteries.AssocList.mapKey","line":91,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.mapKey","doc":"`O(n)`. Map a function `f` over the keys of the list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.mapKey\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">mapKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">δ</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L87-L89","name":"Batteries.AssocList.forM_eq","line":87,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.forM_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.forM_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">forM_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.forM\">forM</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span>.<a href=\"./Init/Data/List/Control.html#List.forM\">forM</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n    <span class=\"fn\">match <span class=\"fn\">x</span> with\n    | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L82-L85","name":"Batteries.AssocList.forM","line":82,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.forM","doc":"`O(n)`. Run monadic function `f` on all elements in the list, from head to tail. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.forM\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L79-L80","name":"Batteries.AssocList.toList_eq_toListTR","line":79,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_eq_toListTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList_eq_toListTR\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">toList_eq_toListTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toListTR\">toListTR</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L75-L77","name":"Batteries.AssocList.toListTR","line":75,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.toListTR","doc":"Optimized version of `toList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toListTR\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">toListTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L71-L73","name":"Batteries.AssocList.foldl_eq","line":71,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.foldl_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.foldl_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">foldl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">d</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">d</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span>)</span>\n    <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L67-L69","name":"Batteries.AssocList.foldl","line":67,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.foldl","doc":"`O(n)`. Fold a function over the list, from head to tail. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.foldl\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">δ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L63-L65","name":"Batteries.AssocList.foldlM_eq","line":63,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.foldlM_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.foldlM_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">foldlM_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.foldlM\">foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">d</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">d</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span>)</span>\n    <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L58-L61","name":"Batteries.AssocList.foldlM","line":58,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.foldlM","doc":"`O(n)`. Fold a monadic function over the list, from head to tail. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.foldlM\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L55-L56","name":"Batteries.AssocList.length_toList","line":55,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.length_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">length_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L53-L53","name":"Batteries.AssocList.length_cons","line":53,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.length_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length_cons\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">length_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α✝</span> <span class=\"fn\">β✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.cons\">cons</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L52-L52","name":"Batteries.AssocList.length_nil","line":52,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.length_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length_nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">length_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.nil\">nil</a>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L46-L50","name":"Batteries.AssocList.length","line":46,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.length","doc":"The number of entries in an `AssocList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.length\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L43-L44","name":"Batteries.AssocList.isEmpty_eq","line":43,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.isEmpty_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.isEmpty_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">isEmpty_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L38-L41","name":"Batteries.AssocList.isEmpty","line":38,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.isEmpty","doc":"`O(1)`. Is the list empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.isEmpty\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L36-L36","name":"Batteries.AssocList.empty_eq","line":36,"kind":"theorem","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.empty_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.empty_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">empty_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.nil\">nil</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L34-L34","name":"Batteries.AssocList.instEmptyCollection","line":34,"kind":"instance","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.instEmptyCollection\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L25-L32","name":"Batteries.AssocList.toList","line":25,"kind":"def","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.toList","doc":"`O(n)`. Convert an `AssocList α β` into the equivalent `List (α × β)`.\nThis is used to give specifications for all the `AssocList` functions\nin terms of corresponding list functions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L21-L21","name":"Batteries.instInhabitedAssocList","line":21,"kind":"instance","docLink":"./Batteries/Data/AssocList.html#Batteries.instInhabitedAssocList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.instInhabitedAssocList\"><span class=\"name\">Batteries</span>.<span class=\"name\">instInhabitedAssocList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L19-L20","name":"Batteries.AssocList.cons","line":19,"kind":"ctor","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.cons","doc":"Add a `key, value` pair to the list "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.cons\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">key</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tail</span> : <span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L17-L18","name":"Batteries.AssocList.nil","line":17,"kind":"ctor","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList.nil","doc":"An empty list "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\">AssocList</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/AssocList.lean#L10-L21","name":"Batteries.AssocList","line":10,"kind":"inductive","docLink":"./Batteries/Data/AssocList.html#Batteries.AssocList","doc":"`AssocList α β` is \"the same as\" `List (α × β)`, but flattening the structure\nleads to one fewer pointer indirection (in the current code generator).\nIt is mainly intended as a component of `HashMap`, but it can also be used as a plain\nkey-value map.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/AssocList.html#Batteries.AssocList\"><span class=\"name\">Batteries</span>.<span class=\"name\">AssocList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"}]}