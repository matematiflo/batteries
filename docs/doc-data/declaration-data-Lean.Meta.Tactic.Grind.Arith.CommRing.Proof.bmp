{"name":"Lean.Meta.Tactic.Grind.Arith.CommRing.Proof","instances":[{"typeNames":["Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert"],"name":"Lean.Meta.Grind.Arith.CommRing.Null.instInhabitedPreNullCert","className":"Inhabited"}],"imports":["Init.Grind.Ring.OfSemiring","Lean.Meta.Tactic.Grind.Diseq","Lean.Meta.Tactic.Grind.Arith.ProofUtil","Lean.Meta.Tactic.Grind.Arith.CommRing.RingId","Lean.Meta.Tactic.Grind.Arith.CommRing.DenoteExpr","Lean.Meta.Tactic.Grind.Arith.CommRing.SafePoly","Lean.Meta.Tactic.Grind.Arith.CommRing.ToExpr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L574-L584","name":"Lean.Meta.Grind.Arith.CommRing.setSemiringDiseqUnsat","line":574,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.setSemiringDiseqUnsat","doc":"Given `a` and `b`, such that `a ≠ b` in the core and `sa` and `sb` their reified semiring\nterms s.t. `sa.toPoly == sb.toPoly`, close the goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.setSemiringDiseqUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">setSemiringDiseqUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sa </span><span class=\"fn\">sb</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.SemiringExpr\">SemiringExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.SemiringM\">SemiringM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L568-L572","name":"Lean.Meta.Grind.Arith.CommRing.propagateEq","line":568,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.propagateEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.propagateEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">propagateEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ra </span><span class=\"fn\">rb</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L562-L566","name":"Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.setUnsat","line":562,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.setUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.setUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">setUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L556-L560","name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.setUnsat","line":556,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.setUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.setUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">setUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L547-L552","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.propagateEq","line":547,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.propagateEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.propagateEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">propagateEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ra </span><span class=\"fn\">rb</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L536-L545","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.setDiseqUnsat","line":536,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.setDiseqUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.setDiseqUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">setDiseqUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L520-L534","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.setEqUnsat","line":520,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.setEqUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.setEqUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">setEqUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L411-L448","name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.toExprProof","line":411,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.toExprProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.toExprProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">toExprProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM\">Stepwise.ProofM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L374-L379","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.mkMonDecl","line":374,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkMonDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkMonDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">mkMonDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM\">ProofM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L367-L372","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.mkSExprDecl","line":367,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkSExprDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkSExprDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">mkSExprDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.SemiringExpr\">SemiringExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM\">ProofM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L360-L365","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.mkExprDecl","line":360,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkExprDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkExprDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">mkExprDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM\">ProofM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L353-L358","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.mkPolyDecl","line":353,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkPolyDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkPolyDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">mkPolyDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM\">ProofM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L329-L329","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM","line":329,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L327-L327","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.sctx?","line":327,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.sctx?","doc":"Context for semiring variables if available "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.sctx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">Context</span>.<span class=\"name\">sctx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L325-L325","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.ctx","line":325,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.ctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.ctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">Context</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L324-L324","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.mk","line":324,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L324-L327","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context","line":324,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L322-L322","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.sexprMap","line":322,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.sexprMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.sexprMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">sexprMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.SemiringExpr\">SemiringExpr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L321-L321","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.exprMap","line":321,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.exprMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.exprMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">exprMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L320-L320","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.monMap","line":320,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.monMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.monMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">monMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L319-L319","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.polyMap","line":319,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.polyMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.polyMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">polyMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L318-L318","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.cache","line":318,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.cache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L317-L317","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.mk","line":317,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">polyMap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">monMap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exprMap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sexprMap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.SemiringExpr\">SemiringExpr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L317-L322","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State","line":317,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L289-L307","name":"Lean.Meta.Grind.Arith.CommRing.Null.propagateEq","line":289,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.propagateEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.propagateEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">propagateEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ra </span><span class=\"fn\">rb</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L269-L287","name":"Lean.Meta.Grind.Arith.CommRing.Null.setDiseqUnsat","line":269,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.setDiseqUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.setDiseqUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">setDiseqUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L252-L267","name":"Lean.Meta.Grind.Arith.CommRing.Null.setEqUnsat","line":252,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.setEqUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.setEqUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">setEqUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L238-L243","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs.go","line":238,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">applyEqs</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L231-L243","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs","line":231,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs","doc":"Given a `pr`, returns `pr h₁ ... hₙ`, where `n` is size `nc.qhs.size`, and `hᵢ`s\nare the equalities in the certificate.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">applyEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L223-L229","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert.go","line":223,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">toNullCert</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.NullCert\">Grind.CommRing.NullCert</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">nc</span>.<a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.qhs\">qhs</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.NullCert\">Grind.CommRing.NullCert</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L220-L229","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert","line":220,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">toNullCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.NullCert\">Grind.CommRing.NullCert</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L215-L218","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.check","line":215,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.check","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L209-L213","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toPoly","line":209,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">toPoly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L204-L205","name":"Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.mkNullCertExt","line":204,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.mkNullCertExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.mkNullCertExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">mkNullCertExt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">Null.NullCertExt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L200-L202","name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.mkNullCertExt","line":200,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.mkNullCertExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.mkNullCertExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">mkNullCertExt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">Null.NullCertExt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L196-L198","name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.mkNullCertExt","line":196,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.mkNullCertExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.mkNullCertExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">mkNullCertExt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">Null.NullCertExt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L190-L194","name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier.go","line":190,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">getMultiplier</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L186-L194","name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier","line":186,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier","doc":"Returns the multiplier `k` for the input polynomial. See comment at `PolyDerivation.step`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">getMultiplier</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L176-L184","name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.toPreNullCert","line":176,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.toPreNullCert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.toPreNullCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">toPreNullCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM\">Null.ProofM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">Null.PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L160-L174","name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.toPreNullCert","line":160,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.toPreNullCert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.toPreNullCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">toPreNullCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM\">Null.ProofM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">Null.PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L154-L154","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.qhs","line":154,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.qhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.qhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">qhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L153-L153","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.d","line":153,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.d","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.d\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">d</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L152-L152","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.mk","line":152,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L152-L154","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt","line":152,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L141-L141","name":"Lean.Meta.Grind.Arith.CommRing.Null.ProofM","line":141,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">ProofM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L139-L139","name":"Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.hyps","line":139,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.hyps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.hyps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">hyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L138-L138","name":"Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.cache","line":138,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.cache","doc":"Mapping from `EqCnstr` to `PreNullCert` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L136-L136","name":"Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.mk","line":136,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L136-L139","name":"Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State","line":136,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L134-L134","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.rhs","line":134,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.rhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertHypothesis</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L133-L133","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.lhs","line":133,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.lhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.lhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertHypothesis</span>.<span class=\"name\">lhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L132-L132","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.h","line":132,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.h","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.h\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertHypothesis</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L131-L131","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.mk","line":131,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertHypothesis</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L131-L134","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis","line":131,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertHypothesis</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L101-L129","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.combine","line":101,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L88-L99","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mul","line":88,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L85-L86","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.div","line":85,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.div\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L80-L83","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.unit","line":80,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.unit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.unit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">unit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L77-L78","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.zero","line":77,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L75-L75","name":"Lean.Meta.Grind.Arith.CommRing.Null.instInhabitedPreNullCert","line":75,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.instInhabitedPreNullCert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.instInhabitedPreNullCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">instInhabitedPreNullCert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L74-L74","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.d","line":74,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.d","doc":"We don't use rational coefficients in the polynomials.\nThus, we need to track a denominator to justify the proof step `div`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.d\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">d</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L69-L69","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.qs","line":69,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.qs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.qs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">qs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L68-L68","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mk","line":68,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L52-L75","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert","line":52,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert","doc":"A \"pre\" Nullstellensatz certificate.\nRecall that, given the hypotheses `h₁ : lhs₁ = rhs₁` ... `hₙ : lhsₙ = rhsₙ`,\na Nullstellensatz certificate is of the form\n```\nq₁*(lhs₁ - rhs₁) + ... + qₙ*(lhsₙ - rhsₙ)\n```\nEach hypothesis is an `EqCnstr` justified by a `.core ..` `EqnCnstrProof`.\nWe dynamically associate them with unique indices based on the order we find them\nduring traversal.\nFor the other `EqCnstr`s we compute a \"pre\" certificate as a dense array\ncontaining `q₁` ... `qₙ` needed to create the `EqCnstr`.\n\nWe are assuming the number of hypotheses used to derive a conclusion is small\nand a dense array is a reasonable representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L42-L45","name":"Lean.Meta.Grind.Arith.CommRing.getPolyConst","line":42,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.getPolyConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.getPolyConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">getPolyConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L39-L40","name":"Lean.Meta.Grind.Arith.CommRing.throwNoNatZeroDivisors","line":39,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.throwNoNatZeroDivisors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.throwNoNatZeroDivisors\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">throwNoNatZeroDivisors</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L17-L26","name":"Lean.Meta.Grind.Arith.CommRing.toContextExpr","line":17,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.toContextExpr","doc":"Returns a context of type `RArray α` containing the variables of the given ring.\n`α` is the type of the ring.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.toContextExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">toContextExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}