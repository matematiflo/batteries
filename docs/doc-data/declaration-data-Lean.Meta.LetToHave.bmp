{"name":"Lean.Meta.LetToHave","instances":[{"typeNames":["_private.Lean.Meta.LetToHave.0.Lean.Meta.LetToHave.Result"],"name":"Lean.Meta.LetToHave.instInhabitedResult","className":"Inhabited"}],"imports":["Lean.Meta.Check","Lean.ReservedNameAction","Lean.AddDecl","Lean.Meta.Transform","Lean.Util.CollectFVars","Lean.Util.CollectMVars"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/LetToHave.lean#L429-L437","name":"Lean.Meta.letToHave","line":429,"kind":"def","docLink":"./Lean/Meta/LetToHave.html#Lean.Meta.letToHave","doc":"Transforms nondependent `let` expressions into `have` expressions.\nIf `e` is not type correct, returns `e`.\nThe `Meta.letToHave` trace class logs errors and messages.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LetToHave.html#Lean.Meta.letToHave\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">letToHave</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/LetToHave.lean#L77-L77","name":"Lean.Meta.LetToHave.instInhabitedResult","line":77,"kind":"instance","docLink":"./Lean/Meta/LetToHave.html#Lean.Meta.LetToHave.instInhabitedResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LetToHave.html#Lean.Meta.LetToHave.instInhabitedResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LetToHave</span>.<span class=\"name\">instInhabitedResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/LetToHave.html#_private.Lean.Meta.LetToHave.0.Lean.Meta.LetToHave.Result\">Lean.Meta.LetToHave.Result‚úù</a></span></div></div>"}]}