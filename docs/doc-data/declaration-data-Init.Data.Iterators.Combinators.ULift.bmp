{"name":"Init.Data.Iterators.Combinators.ULift","instances":[],"imports":["Init.Data.Iterators.Combinators.Monadic.ULift"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/ULift.lean#L28-L49","name":"Std.Iterators.Iter.uLift","line":28,"kind":"def","docLink":"./Init/Data/Iterators/Combinators/ULift.html#Std.Iterators.Iter.uLift","doc":"Transforms an iterator with values in `β` into one with values in `ULift β`.\n\nMost other combinators like `map` cannot switch between universe levels. This combinators\nmakes it possible to transition to a higher universe.\n\n**Marble diagram:**\n\n```\nit            ---a    ----b    ---c    --d    ---⊥\nit.uLift n    ---.up a----.up b---.up c--.up d---⊥\n```\n\n**Termination properties:**\n\n* `Finite`: only if the original iterator is finite\n* `Productive`: only if the original iterator is productive\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/ULift.html#Std.Iterators.Iter.uLift\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">uLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/ULift.lean#L19-L26","name":"Std.Iterators.Types.ULiftIterator.modifyStep","line":19,"kind":"def","docLink":"./Init/Data/Iterators/Combinators/ULift.html#Std.Iterators.Types.ULiftIterator.modifyStep","doc":"Transforms a step of the base iterator into a step of the `uLift` iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/ULift.html#Std.Iterators.Types.ULiftIterator.modifyStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">modifyStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span>)</span></span></div></div>"}]}