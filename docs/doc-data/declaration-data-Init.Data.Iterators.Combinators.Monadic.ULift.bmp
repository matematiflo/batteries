{"name":"Init.Data.Iterators.Combinators.Monadic.ULift","instances":[{"typeNames":["Std.Iterators.ULiftT"],"name":"Std.Iterators.instMonadULiftT","className":"Monad"},{"typeNames":["Std.Iterators.ULiftT"],"name":"Std.Iterators.instLawfulMonadULiftT","className":"LawfulMonad"},{"typeNames":["Std.Iterators.Types.ULiftIterator","ULift"],"name":"Std.Iterators.Types.ULiftIterator.instIterator","className":"Std.Iterators.Iterator"},{"typeNames":["Std.Iterators.Types.ULiftIterator"],"name":"Std.Iterators.Types.ULiftIterator.instFinite","className":"Std.Iterators.Finite"},{"typeNames":["Std.Iterators.Types.ULiftIterator"],"name":"Std.Iterators.Types.ULiftIterator.instProductive","className":"Std.Iterators.Productive"},{"typeNames":["Std.Iterators.Types.ULiftIterator"],"name":"Std.Iterators.Types.ULiftIterator.instIteratorLoop","className":"Std.Iterators.IteratorLoop"},{"typeNames":["Std.Iterators.Types.ULiftIterator"],"name":"Std.Iterators.Types.ULiftIterator.instIteratorLoopPartial","className":"Std.Iterators.IteratorLoopPartial"},{"typeNames":["Std.Iterators.Types.ULiftIterator"],"name":"Std.Iterators.Types.ULiftIterator.instIteratorCollect","className":"Std.Iterators.IteratorCollect"},{"typeNames":["Std.Iterators.Types.ULiftIterator"],"name":"Std.Iterators.Types.ULiftIterator.instIteratorCollectPartial","className":"Std.Iterators.IteratorCollectPartial"},{"typeNames":["Std.Iterators.Types.ULiftIterator"],"name":"Std.Iterators.Types.ULiftIterator.instIteratorSize","className":"Std.Iterators.IteratorSize"},{"typeNames":["Std.Iterators.Types.ULiftIterator"],"name":"Std.Iterators.Types.ULiftIterator.instIteratorSizePartial","className":"Std.Iterators.IteratorSizePartial"}],"imports":["Init.Data.Iterators.Basic","Init.Data.Iterators.Internal.Termination","Init.Data.Iterators.Consumers.Monadic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L151-L171","name":"Std.Iterators.IterM.uLift","line":151,"kind":"def","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.IterM.uLift","doc":"Transforms an `m`-monadic iterator with values in `β` into an `n`-monadic iterator with\nvalues in `ULift β`. Requires a `MonadLift m (ULiftT n)` instance.\n\n**Marble diagram:**\n\n```\nit            ---a    ----b    ---c    --d    ---⊥\nit.uLift n    ---.up a----.up b---.up c--.up d---⊥\n```\n\n**Termination properties:**\n\n* `Finite`: only if the original iterator is finite\n* `Productive`: only if the original iterator is productive\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.IterM.uLift\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">uLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">lift</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L147-L149","name":"Std.Iterators.Types.ULiftIterator.instIteratorSizePartial","line":147,"kind":"instance","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorSizePartial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorSizePartial\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorSizePartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">IteratorSize</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSizePartial\">IteratorSizePartial</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L142-L145","name":"Std.Iterators.Types.ULiftIterator.instIteratorSize","line":142,"kind":"instance","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorSize\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">IteratorSize</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">IteratorSize</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L138-L140","name":"Std.Iterators.Types.ULiftIterator.instIteratorCollectPartial","line":138,"kind":"instance","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorCollectPartial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorCollectPartial\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorCollectPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">IteratorCollectPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L134-L136","name":"Std.Iterators.Types.ULiftIterator.instIteratorCollect","line":134,"kind":"instance","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorCollect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorCollect\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorCollect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L130-L132","name":"Std.Iterators.Types.ULiftIterator.instIteratorLoopPartial","line":130,"kind":"instance","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorLoopPartial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorLoopPartial\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorLoopPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">IteratorLoopPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L126-L128","name":"Std.Iterators.Types.ULiftIterator.instIteratorLoop","line":126,"kind":"instance","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorLoop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorLoop\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">IteratorLoop</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L122-L124","name":"Std.Iterators.Types.ULiftIterator.instProductive","line":122,"kind":"instance","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instProductive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instProductive\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instProductive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L112-L120","name":"Std.Iterators.Types.ULiftIterator.instProductivenessRelation","line":112,"kind":"def","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instProductivenessRelation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instProductivenessRelation\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instProductivenessRelation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Internal/Termination.html#Std.Iterators.ProductivenessRelation\">ProductivenessRelation</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L108-L110","name":"Std.Iterators.Types.ULiftIterator.instFinite","line":108,"kind":"instance","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instFinite\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L96-L106","name":"Std.Iterators.Types.ULiftIterator.instFinitenessRelation","line":96,"kind":"def","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instFinitenessRelation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instFinitenessRelation\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instFinitenessRelation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Internal/Termination.html#Std.Iterators.FinitenessRelation\">FinitenessRelation</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L85-L94","name":"Std.Iterators.Types.ULiftIterator.instIterator","line":85,"kind":"instance","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L74-L83","name":"Std.Iterators.Types.ULiftIterator.Monadic.modifyStep","line":74,"kind":"def","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.Monadic.modifyStep","doc":"Transforms a step of the base iterator into a step of the `uLift` iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.Monadic.modifyStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">Monadic</span>.<span class=\"name\">modifyStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L69-L69","name":"Std.Iterators.Types.ULiftIterator.inner","line":69,"kind":"def","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.inner","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.inner\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L67-L67","name":"Std.Iterators.Types.ULiftIterator.mk","line":67,"kind":"ctor","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inner</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L65-L69","name":"Std.Iterators.Types.ULiftIterator","line":65,"kind":"structure","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator","doc":"Internal state of the `uLift` iterator combinator. Do not depend on its internals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L57-L61","name":"Std.Iterators.ULiftT.run_map","line":57,"kind":"theorem","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_map\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ULiftT</span>.<span class=\"name\">run_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>).<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">do\n  let <span class=\"fn\">a</span> ← <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span>\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L51-L55","name":"Std.Iterators.ULiftT.run_bind","line":51,"kind":"theorem","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_bind\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ULiftT</span>.<span class=\"name\">run_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>).<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">do\n  let <span class=\"fn\">a</span> ← <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span>\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span>)</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L46-L49","name":"Std.Iterators.ULiftT.run_pure","line":46,"kind":"theorem","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_pure\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ULiftT</span>.<span class=\"name\">run_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L34-L44","name":"Std.Iterators.instLawfulMonadULiftT","line":34,"kind":"instance","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.instLawfulMonadULiftT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.instLawfulMonadULiftT\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instLawfulMonadULiftT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L29-L32","name":"Std.Iterators.instMonadULiftT","line":29,"kind":"instance","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.instMonadULiftT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.instMonadULiftT\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instMonadULiftT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L24-L27","name":"Std.Iterators.ULiftT.run","line":24,"kind":"def","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run","doc":"Returns the underlying `n`-monadic representation of a `ULiftT n α` value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ULiftT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L21-L22","name":"Std.Iterators.ULiftT","line":21,"kind":"def","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT","doc":"`ULiftT.{v, u}` shrinks a monad on `Type max u v` to a monad on `Type u`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ULiftT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> v'</div></div>"}]}