{"name":"Std.Tactic.Do.ProofMode","instances":[],"imports":["Std.Do.SPred.SPred"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/Do/ProofMode.lean#L22-L24","name":"Std.Tactic.Do.MGoalHypMarker","line":22,"kind":"def","docLink":"./Std/Tactic/Do/ProofMode.html#Std.Tactic.Do.MGoalHypMarker","doc":"This is only used for delaboration purposes, so that we can render context variables that appear\nto have type `A : PROP` even though `PROP` is not a type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Do/ProofMode.html#Std.Tactic.Do.MGoalHypMarker\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">MGoalHypMarker</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ﾏピ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_A</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">Do.SPred</a> <span class=\"fn\">ﾏピ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/Do/ProofMode.lean#L18-L20","name":"Std.Tactic.Do.MGoalEntails","line":18,"kind":"def","docLink":"./Std/Tactic/Do/ProofMode.html#Std.Tactic.Do.MGoalEntails","doc":"This is the same as `SPred.entails`.\nThis constant is used to detect `SPred` proof mode goals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Do/ProofMode.html#Std.Tactic.Do.MGoalEntails\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">MGoalEntails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ﾏピ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">Do.SPred</a> <span class=\"fn\">ﾏピ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/Do/ProofMode.lean#L16-L16","name":"Std.Tactic.Do.mgoalStx","line":16,"kind":"def","docLink":"./Std/Tactic/Do/ProofMode.html#Std.Tactic.Do.mgoalStx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Do/ProofMode.html#Std.Tactic.Do.mgoalStx\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">mgoalStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/Do/ProofMode.lean#L14-L14","name":"Std.Tactic.Do.mgoalHyp","line":14,"kind":"def","docLink":"./Std/Tactic/Do/ProofMode.html#Std.Tactic.Do.mgoalHyp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Do/ProofMode.html#Std.Tactic.Do.mgoalHyp\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">mgoalHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}