{"name":"Std.Data.Iterators.Combinators.StepSize","instances":[],"imports":["Std.Data.Iterators.Combinators.Monadic.StepSize"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/Iterators/Combinators/StepSize.lean#L15-L19","name":"Std.Iterators.Iter.stepSize","line":15,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/StepSize.html#Std.Iterators.Iter.stepSize","doc":"Produces an iterator that emits one value of `it`, then drops `n - 1` elements, then emits another\nvalue, and so on. In other words, it emits every `n`-th value of `it`, starting with the first one.\n\nIf `n = 0`, the iterator behaves like for `n = 1`: It emits all values of `it`.\n\n\n**Marble diagram:**\n\n```\nit               ---1----2----3---4----5\nit.stepSize 2    ---1---------3--------5\n```\n\n**Availability:**\n\nThis operation is currently only available for iterators implementing `IteratorAccess`,\nsuch as `PRange.iter` range iterators.\n\n**Termination properties:**\n\n* `Finite` instance: only if the base iterator `it` is finite\n* `Productive` instance: always\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/StepSize.html#Std.Iterators.Iter.stepSize\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">stepSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess\">IteratorAccess</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span></div></div>"}]}