{"name":"Std.Do.SPred.SPred","instances":[],"imports":["Init.Ext","Std.Do.SPred.SVal"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L108-L109","name":"Std.Do.SPred.conjunction_apply","line":108,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">conjunction_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">env</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>))</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction\">conjunction</a> <span class=\"fn\">env</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction\">conjunction</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">env</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L107-L107","name":"Std.Do.SPred.conjunction_cons","line":107,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">conjunction_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">env</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction\">conjunction</a> (<span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">env</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction\">conjunction</a> <span class=\"fn\">env</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L106-L106","name":"Std.Do.SPred.conjunction_nil","line":106,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">conjunction_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction\">conjunction</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#_private.Std.Do.SPred.SPred.0.Std.Do.SPred.pure\">Std.Do.SPred.pure✝</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L102-L105","name":"Std.Do.SPred.conjunction","line":102,"kind":"def","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction","doc":"Conjunction of a list of `SPred`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.conjunction\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">conjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L100-L100","name":"Std.Do.SPred.forall_cons","line":100,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">forall_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">P</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L99-L99","name":"Std.Do.SPred.forall_nil","line":99,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">forall_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L95-L98","name":"Std.Do.SPred.forall","line":95,"kind":"def","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall","doc":"Universal quantifier in `SPred`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L93-L93","name":"Std.Do.SPred.exists_cons","line":93,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">exists_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">P</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L92-L92","name":"Std.Do.SPred.exists_nil","line":92,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">exists_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L88-L91","name":"Std.Do.SPred.exists","line":88,"kind":"def","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists","doc":"Existential quantifier in `SPred`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L86-L86","name":"Std.Do.SPred.iff_cons","line":86,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">iff_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff\">↔</a> <span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff\">)</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff\">spred(</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff\">↔</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">s</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L85-L85","name":"Std.Do.SPred.iff_nil","line":85,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">iff_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff\">↔</a> <span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff\">)</a> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">P</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">Q</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L81-L84","name":"Std.Do.SPred.iff","line":81,"kind":"def","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff","doc":"Biconditional in `SPred`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.iff\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L79-L79","name":"Std.Do.SPred.imp_cons","line":79,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\"><span class=\"fn\">P</span> → <span class=\"fn\">Q</span></a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">)</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">s</span></span></a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L78-L78","name":"Std.Do.SPred.imp_nil","line":78,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\"><span class=\"fn\">P</span> → <span class=\"fn\">Q</span></a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">)</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">P</span> → <span class=\"fn\">Q</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L74-L77","name":"Std.Do.SPred.imp","line":74,"kind":"def","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp","doc":"Implication in `SPred`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L72-L72","name":"Std.Do.SPred.not_cons","line":72,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.not_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">not_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not\">¬</a><span class=\"fn\">P</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not\">)</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not\">¬</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L71-L71","name":"Std.Do.SPred.not_nil","line":71,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.not_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">not_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not\">¬</a><span class=\"fn\">P</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not\">)</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L67-L70","name":"Std.Do.SPred.not","line":67,"kind":"def","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.not","doc":"Negation in `SPred`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.not\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L65-L65","name":"Std.Do.SPred.or_cons","line":65,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.or_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">)</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">spred(</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">s</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L64-L64","name":"Std.Do.SPred.or_nil","line":64,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.or_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">)</a> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">Q</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L60-L63","name":"Std.Do.SPred.or","line":60,"kind":"def","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.or","doc":"Disjunction in `SPred`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L58-L58","name":"Std.Do.SPred.and_cons","line":58,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.and_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">s</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L57-L57","name":"Std.Do.SPred.and_nil","line":57,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.and_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">Q</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L53-L56","name":"Std.Do.SPred.and","line":53,"kind":"def","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.and","doc":"Conjunction in `SPred`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L51-L51","name":"Std.Do.SPred.bientails_cons_intro","line":51,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails_cons_intro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails_cons_intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails_cons_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">s</span></span>)</span> → <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L50-L50","name":"Std.Do.SPred.bientails_cons","line":50,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L49-L49","name":"Std.Do.SPred.bientails_nil","line":49,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">P</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">Q</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L45-L48","name":"Std.Do.SPred.bientails","line":45,"kind":"def","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails","doc":"Equivalence relation on `SPred`. Convert to `Eq` via `bientails.to_eq`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L41-L41","name":"Std.Do.SPred.entails_cons_intro","line":41,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails_cons_intro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails_cons_intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails_cons_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">s</span></span>)</span> → <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L40-L40","name":"Std.Do.SPred.entails_cons","line":40,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L39-L39","name":"Std.Do.SPred.entails_nil","line":39,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">P</span> → <span class=\"fn\">Q</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L35-L38","name":"Std.Do.SPred.entails","line":35,"kind":"def","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails","doc":"Entailment in `SPred`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L32-L32","name":"Std.Do.SPred.ext_iff","line":32,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.ext_iff\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Q</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L32-L33","name":"Std.Do.SPred.ext","line":32,"kind":"theorem","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.ext\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">s</span></span>)</span> → <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/SPred.lean#L19-L25","name":"Std.Do.SPred","line":19,"kind":"def","docLink":"./Std/Do/SPred/SPred.html#Std.Do.SPred","doc":"A predicate indexed by a list of states.\n```\nexample : SPred [Nat, Bool] = (Nat → Bool → Prop) := rfl\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}