{"name":"Lean.ReservedNameAction","instances":[],"imports":["Lean.CoreM"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/ReservedNameAction.lean#L79-L86","name":"Lean.realizeGlobalConstNoOverload","line":79,"kind":"def","docLink":"./Lean/ReservedNameAction.html#Lean.realizeGlobalConstNoOverload","doc":"Similar to `realizeGlobalConstNoOverload`, but also executes reserved name actions.\n\nConsider using `realizeGlobalConstNoOverloadWithInfo` if you want the syntax to show the resulting\nname's info on hover.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ReservedNameAction.html#Lean.realizeGlobalConstNoOverload\"><span class=\"name\">Lean</span>.<span class=\"name\">realizeGlobalConstNoOverload</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/ReservedNameAction.lean#L70-L77","name":"Lean.realizeGlobalConst","line":70,"kind":"def","docLink":"./Lean/ReservedNameAction.html#Lean.realizeGlobalConst","doc":"Similar to `resolveGlobalConst`, but also executes reserved name actions.\n\nConsider using `realizeGlobalConstWithInfo` if you want the syntax to show the resulting name's info\non hover.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ReservedNameAction.html#Lean.realizeGlobalConst\"><span class=\"name\">Lean</span>.<span class=\"name\">realizeGlobalConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/ReservedNameAction.lean#L64-L68","name":"Lean.realizeGlobalConstNoOverloadCore","line":64,"kind":"def","docLink":"./Lean/ReservedNameAction.html#Lean.realizeGlobalConstNoOverloadCore","doc":"Similar to `realizeGlobalConstNoOverloadCore`, but also executes reserved name actions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ReservedNameAction.html#Lean.realizeGlobalConstNoOverloadCore\"><span class=\"name\">Lean</span>.<span class=\"name\">realizeGlobalConstNoOverloadCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/ReservedNameAction.lean#L57-L62","name":"Lean.realizeGlobalConstCore","line":57,"kind":"def","docLink":"./Lean/ReservedNameAction.html#Lean.realizeGlobalConstCore","doc":"Similar to `resolveGlobalConstCore`, but also executes reserved name actions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ReservedNameAction.html#Lean.realizeGlobalConstCore\"><span class=\"name\">Lean</span>.<span class=\"name\">realizeGlobalConstCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/ReservedNameAction.lean#L38-L55","name":"Lean.realizeGlobalName","line":38,"kind":"def","docLink":"./Lean/ReservedNameAction.html#Lean.realizeGlobalName","doc":"Similar to `resolveGlobalName`, but also executes reserved name actions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ReservedNameAction.html#Lean.realizeGlobalName\"><span class=\"name\">Lean</span>.<span class=\"name\">realizeGlobalName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/ReservedNameAction.lean#L29-L36","name":"Lean.executeReservedNameAction","line":29,"kind":"def","docLink":"./Lean/ReservedNameAction.html#Lean.executeReservedNameAction","doc":"Execute a registered reserved action for the given reserved name.\nNote that the handler can throw an exception.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ReservedNameAction.html#Lean.executeReservedNameAction\"><span class=\"name\">Lean</span>.<span class=\"name\">executeReservedNameAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/ReservedNameAction.lean#L21-L27","name":"Lean.registerReservedNameAction","line":21,"kind":"def","docLink":"./Lean/ReservedNameAction.html#Lean.registerReservedNameAction","doc":"Register a new function that is invoked when trying to resolve a reserved name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ReservedNameAction.html#Lean.registerReservedNameAction\"><span class=\"name\">Lean</span>.<span class=\"name\">registerReservedNameAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <a href=\"./Lean/ReservedNameAction.html#Lean.ReservedNameAction\">ReservedNameAction</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/ReservedNameAction.lean#L11-L17","name":"Lean.ReservedNameAction","line":11,"kind":"def","docLink":"./Lean/ReservedNameAction.html#Lean.ReservedNameAction","doc":"When trying to resolve a reserved name, an action can be executed to generate the actual definition/theorem.\nThe action returns `true` if it \"handled\" the given name.\n\nRemark: usually when one install a reserved name predicate, an associated action is also installed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ReservedNameAction.html#Lean.ReservedNameAction\"><span class=\"name\">Lean</span>.<span class=\"name\">ReservedNameAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}