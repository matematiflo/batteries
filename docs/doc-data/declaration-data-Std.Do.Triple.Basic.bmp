{"name":"Std.Do.Triple.Basic","instances":[{"typeNames":["Std.Do.Triple","Std.Do.SPred.imp"],"name":"Std.Do.Triple.instPropAsSPredTautologyImpApplyWp","className":"Std.Do.SPred.Tactic.PropAsSPredTautology"}],"imports":["Std.Do.WP","Std.Do.SPred"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/Basic.lean#L65-L67","name":"Std.Do.Triple.rewrite_program","line":65,"kind":"theorem","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple.rewrite_program","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple.rewrite_program\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span>.<span class=\"name\">rewrite_program</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prog₁ </span><span class=\"fn\">prog₂</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heq</span> : <span class=\"fn\">prog₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">prog₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hprf</span> : <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">prog₂</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">prog₁</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/Basic.lean#L62-L63","name":"Std.Do.Triple.and","line":62,"kind":"theorem","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple.and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple.and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P₁</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q₁</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P₂</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q₂</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P₁</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q₁</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P₂</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q₂</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P₁</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P₂</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q₁</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and\">∧ₚ</a> <span class=\"fn\">Q₂</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/Basic.lean#L52-L60","name":"Std.Do.Triple.bind","line":52,"kind":"theorem","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple.bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple.bind\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">Q</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">b</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">R</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">R</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/Basic.lean#L49-L50","name":"Std.Do.Triple.pure","line":49,"kind":"theorem","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple.pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple.pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\"><span class=\"fn\">ps</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.args\">args</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">himp</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">Pure.pure</a> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/Basic.lean#L46-L47","name":"Std.Do.Triple.instPropAsSPredTautologyImpApplyWp","line":46,"kind":"instance","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple.instPropAsSPredTautologyImpApplyWp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple.instPropAsSPredTautologyImpApplyWp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span>.<span class=\"name\">instPropAsSPredTautologyImpApplyWp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">SPred.Tactic.PropAsSPredTautology</a> (<a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">spred(</a><span class=\"fn\">P</span> → <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/Basic.lean#L35-L36","name":"Std.Do.triple","line":35,"kind":"def","docLink":"./Std/Do/Triple/Basic.html#Std.Do.triple","doc":"A Hoare triple for reasoning about monadic programs.\nA proof for `Triple x P Q` is a *specification* for `x`:\nIf assertion `P` holds before `x`, then postcondition `Q` holds after running `x`.\n\n`⦃P⦄ x ⦃Q⦄` is convenient syntax for `Triple x P Q`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.triple\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">triple</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/Triple/Basic.lean#L25-L33","name":"Std.Do.Triple","line":25,"kind":"def","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple","doc":"A Hoare triple for reasoning about monadic programs.\nA proof for `Triple x P Q` is a *specification* for `x`:\nIf assertion `P` holds before `x`, then postcondition `Q` holds after running `x`.\n\n`⦃P⦄ x ⦃Q⦄` is convenient syntax for `Triple x P Q`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}