{"name":"Init.ShareCommon","instances":[{"typeNames":["ShareCommon.StateFactory"],"name":"ShareCommon.instNonemptyStateFactory","className":"Nonempty"},{"typeNames":["ShareCommon.State"],"name":"ShareCommon.instNonemptyState","className":"Nonempty"},{"typeNames":["ShareCommon.State"],"name":"ShareCommon.instInhabitedState","className":"Inhabited"},{"typeNames":["ShareCommonT"],"name":"ShareCommonT.monadShareCommon","className":"MonadShareCommon"}],"imports":["Init.Util","Init.Data.UInt.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L111-L117","name":"ShareCommon.shareCommon'","line":111,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.shareCommon'","doc":"A more restrictive but efficient max sharing primitive.\n\nRemark: it optimizes the number of RC operations, and the strategy for caching results.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.shareCommon'\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">shareCommon'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L109-L109","name":"ShareCommonM.run","line":109,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommonM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonM.run\"><span class=\"name\">ShareCommonM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommonM\">ShareCommonM</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L108-L108","name":"ShareCommonT.run","line":108,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommonT.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonT.run\"><span class=\"name\">ShareCommonT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommonT\">ShareCommonT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L105-L106","name":"ShareCommonT.monadShareCommon","line":105,"kind":"instance","docLink":"./Init/ShareCommon.html#ShareCommonT.monadShareCommon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonT.monadShareCommon\"><span class=\"name\">ShareCommonT</span>.<span class=\"name\">monadShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> <span class=\"fn\">(<a href=\"./Init/ShareCommon.html#ShareCommonT\">ShareCommonT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L102-L103","name":"ShareCommonT.withShareCommon","line":102,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommonT.withShareCommon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonT.withShareCommon\"><span class=\"name\">ShareCommonT</span>.<span class=\"name\">withShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommonT\">ShareCommonT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L100-L100","name":"ShareCommonM","line":100,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommonM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonM\"><span class=\"name\">ShareCommonM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L99-L99","name":"ShareCommonT","line":99,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommonT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonT\"><span class=\"name\">ShareCommonT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L96-L97","name":"shareCommonM","line":96,"kind":"def","docLink":"./Init/ShareCommon.html#shareCommonM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#shareCommonM\"><span class=\"name\">shareCommonM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L94-L94","name":"withShareCommon","line":94,"kind":"def","docLink":"./Init/ShareCommon.html#withShareCommon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#withShareCommon\"><span class=\"name\">withShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L92-L92","name":"MonadShareCommon.withShareCommon","line":92,"kind":"def","docLink":"./Init/ShareCommon.html#MonadShareCommon.withShareCommon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#MonadShareCommon.withShareCommon\"><span class=\"name\">MonadShareCommon</span>.<span class=\"name\">withShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L91-L91","name":"MonadShareCommon.mk","line":91,"kind":"ctor","docLink":"./Init/ShareCommon.html#MonadShareCommon.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#MonadShareCommon.mk\"><span class=\"name\">MonadShareCommon</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">withShareCommon</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L91-L92","name":"MonadShareCommon","line":91,"kind":"class","docLink":"./Init/ShareCommon.html#MonadShareCommon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#MonadShareCommon\"><span class=\"name\">MonadShareCommon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L86-L87","name":"ShareCommon.State.shareCommon","line":86,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.State.shareCommon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.State.shareCommon\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">State</span>.<span class=\"name\">shareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L84-L84","name":"ShareCommon.instInhabitedState","line":84,"kind":"instance","docLink":"./Init/ShareCommon.html#ShareCommon.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.instInhabitedState\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L83-L83","name":"ShareCommon.State.mk","line":83,"kind":"opaque","docLink":"./Init/ShareCommon.html#ShareCommon.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.State.mk\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L82-L82","name":"ShareCommon.mkStateImpl","line":82,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.mkStateImpl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.mkStateImpl\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">mkStateImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L80-L80","name":"ShareCommon.instNonemptyState","line":80,"kind":"instance","docLink":"./Init/ShareCommon.html#ShareCommon.instNonemptyState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.instNonemptyState\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">instNonemptyState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L79-L79","name":"ShareCommon.State","line":79,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.State\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L77-L78","name":"ShareCommon.StatePointed","line":77,"kind":"opaque","docLink":"./Init/ShareCommon.html#ShareCommon.StatePointed","doc":"Internally `State` is implemented as a pair `ObjectMap` and `ObjectSet` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StatePointed\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StatePointed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#NonemptyType\">NonemptyType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L75-L75","name":"ShareCommon.StateFactory.get","line":75,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactory.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactory.get\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactory</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a> → <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L72-L73","name":"ShareCommon.StateFactory.mk","line":72,"kind":"opaque","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactory.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactory.mk\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactory</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a> → <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L58-L70","name":"ShareCommon.StateFactory.mkImpl","line":58,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactory.mkImpl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactory.mkImpl\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactory</span>.<span class=\"name\">mkImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a> → <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L56-L56","name":"ShareCommon.StateFactoryBuilder.setInsert","line":56,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.setInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.setInsert\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">setInsert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set\">Set</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set\">Set</a></span> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L55-L55","name":"ShareCommon.StateFactoryBuilder.setFind?","line":55,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.setFind?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.setFind?\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">setFind?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set\">Set</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L54-L54","name":"ShareCommon.StateFactoryBuilder.mkSet","line":54,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mkSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mkSet\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">mkSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set\">Set</a></span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L53-L53","name":"ShareCommon.StateFactoryBuilder.Set","line":53,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">Set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L52-L52","name":"ShareCommon.StateFactoryBuilder.mapInsert","line":52,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mapInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mapInsert\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">mapInsert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map\">Map</a></span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map\">Map</a></span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L51-L51","name":"ShareCommon.StateFactoryBuilder.mapFind?","line":51,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mapFind?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mapFind?\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">mapFind?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map\">Map</a></span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L50-L50","name":"ShareCommon.StateFactoryBuilder.mkMap","line":50,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mkMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mkMap\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">mkMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map\">Map</a></span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L49-L49","name":"ShareCommon.StateFactoryBuilder.Map","line":49,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">Map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">_β</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L48-L48","name":"ShareCommon.StateFactoryBuilder.mk","line":48,"kind":"ctor","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mk\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Map</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>) → <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <a href=\"./foundational_types.html\">Type</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkMap</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">Map</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapFind?</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Map</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapInsert</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Map</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">Map</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Set</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>) → <span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <a href=\"./foundational_types.html\">Type</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkSet</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">Set</span> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setFind?</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Set</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setInsert</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Set</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">Set</span> <span class=\"fn\">α</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L48-L56","name":"ShareCommon.StateFactoryBuilder","line":48,"kind":"structure","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L45-L46","name":"ShareCommon.Object.hash","line":45,"kind":"opaque","docLink":"./Init/ShareCommon.html#ShareCommon.Object.hash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.Object.hash\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">Object</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L42-L43","name":"ShareCommon.Object.eq","line":42,"kind":"opaque","docLink":"./Init/ShareCommon.html#ShareCommon.Object.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.Object.eq\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">Object</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L40-L40","name":"ShareCommon.instNonemptyStateFactory","line":40,"kind":"instance","docLink":"./Init/ShareCommon.html#ShareCommon.instNonemptyStateFactory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.instNonemptyStateFactory\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">instNonemptyStateFactory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L39-L39","name":"ShareCommon.StateFactory","line":39,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L38-L38","name":"ShareCommon.StateFactoryPointed","line":38,"kind":"opaque","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryPointed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryPointed\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryPointed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#NonemptyType\">NonemptyType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L36-L36","name":"ShareCommon.StateFactoryImpl.setInsert","line":36,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.setInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.setInsert\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">setInsert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set\">Set</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set\">Set</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L35-L35","name":"ShareCommon.StateFactoryImpl.setFind?","line":35,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.setFind?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.setFind?\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">setFind?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set\">Set</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L34-L34","name":"ShareCommon.StateFactoryImpl.mapInsert","line":34,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mapInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mapInsert\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">mapInsert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map\">Map</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">v</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map\">Map</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L33-L33","name":"ShareCommon.StateFactoryImpl.mapFind?","line":33,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mapFind?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mapFind?\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">mapFind?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map\">Map</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L32-L32","name":"ShareCommon.StateFactoryImpl.mkState","line":32,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mkState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mkState\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">mkState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map\">Map</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set\">Set</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L31-L31","name":"ShareCommon.StateFactoryImpl.Set","line":31,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">Set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L31-L31","name":"ShareCommon.StateFactoryImpl.Map","line":31,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">Map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L30-L30","name":"ShareCommon.StateFactoryImpl.mk","line":30,"kind":"ctor","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mk\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Map </span><span class=\"fn\">Set</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkState</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\">Map</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Set</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapFind?</span> : <span class=\"fn\"><span class=\"fn\">Map</span> → <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapInsert</span> : <span class=\"fn\"><span class=\"fn\">Map</span> → <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a> → <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a> → <span class=\"fn\">Map</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setFind?</span> : <span class=\"fn\"><span class=\"fn\">Set</span> → <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setInsert</span> : <span class=\"fn\"><span class=\"fn\">Set</span> → <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a> → <span class=\"fn\">Set</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L30-L36","name":"ShareCommon.StateFactoryImpl","line":30,"kind":"structure","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L27-L28","name":"ShareCommon.Object.ptrHash","line":27,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.Object.ptrHash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.Object.ptrHash\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">Object</span>.<span class=\"name\">ptrHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L24-L25","name":"ShareCommon.Object.ptrEq","line":24,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.Object.ptrEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.Object.ptrEq\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">Object</span>.<span class=\"name\">ptrEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/ShareCommon.lean#L22-L22","name":"ShareCommon.Object","line":22,"kind":"def","docLink":"./Init/ShareCommon.html#ShareCommon.Object","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.Object\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">Object</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}