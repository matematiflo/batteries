{"name":"Lean.Elab.Tactic.Do.ProofMode.Refine","instances":[],"imports":["Std.Tactic.Do.Syntax","Lean.Elab.Tactic.Do.ProofMode.Focus","Lean.Elab.Tactic.Do.ProofMode.Assumption","Lean.Elab.Tactic.Do.ProofMode.Exact"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Refine.lean#L74-L80","name":"Lean.Elab.Tactic.Do.ProofMode.elabMExists","line":74,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Refine.html#Lean.Elab.Tactic.Do.ProofMode.elabMExists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Refine.html#Lean.Elab.Tactic.Do.ProofMode.elabMExists\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">elabMExists</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Refine.lean#L58-L72","name":"Lean.Elab.Tactic.Do.ProofMode.elabMRefine","line":58,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Refine.html#Lean.Elab.Tactic.Do.ProofMode.elabMRefine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Refine.html#Lean.Elab.Tactic.Do.ProofMode.elabMRefine\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">elabMRefine</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Refine.lean#L25-L56","name":"Lean.Elab.Tactic.Do.ProofMode.mRefineCore","line":25,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Refine.html#Lean.Elab.Tactic.Do.ProofMode.mRefineCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Refine.html#Lean.Elab.Tactic.Do.ProofMode.mRefineCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">mRefineCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Elab/Tactic/Do/ProofMode/MGoal.html#Lean.Elab.Tactic.Do.ProofMode.MGoal\">MGoal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Std/Tactic/Do/Syntax.html#Lean.Parser.Tactic.MRefinePat\">Parser.Tactic.MRefinePat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Do/ProofMode/MGoal.html#Lean.Elab.Tactic.Do.ProofMode.MGoal\">MGoal</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Refine.lean#L16-L23","name":"Lean.Elab.Tactic.Do.ProofMode.patAsTerm","line":16,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Refine.html#Lean.Elab.Tactic.Do.ProofMode.patAsTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Refine.html#Lean.Elab.Tactic.Do.ProofMode.patAsTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">patAsTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Std/Tactic/Do/Syntax.html#Lean.Parser.Tactic.MRefinePat\">Parser.Tactic.MRefinePat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expected</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}