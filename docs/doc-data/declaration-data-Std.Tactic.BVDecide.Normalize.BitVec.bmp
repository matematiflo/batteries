{"name":"Std.Tactic.BVDecide.Normalize.BitVec","instances":[],"imports":["Init.Data.BitVec.Bitblast","Init.Data.AC","Std.Tactic.BVDecide.Normalize.Bool","Std.Tactic.BVDecide.Normalize.Canonicalize","Init.Data.SInt.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L586-L589","name":"Std.Tactic.BVDecide.Normalize.ISize.toBitVec_ite","line":586,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.ISize.toBitVec_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.ISize.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L581-L584","name":"Std.Tactic.BVDecide.Normalize.Int64.toBitVec_ite","line":581,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int64.toBitVec_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int64.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L576-L579","name":"Std.Tactic.BVDecide.Normalize.Int32.toBitVec_ite","line":576,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int32.toBitVec_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int32.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L571-L574","name":"Std.Tactic.BVDecide.Normalize.Int16.toBitVec_ite","line":571,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int16.toBitVec_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int16.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L566-L569","name":"Std.Tactic.BVDecide.Normalize.Int8.toBitVec_ite","line":566,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int8.toBitVec_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int8.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L561-L564","name":"Std.Tactic.BVDecide.Normalize.USize.toBitVec_ite","line":561,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.USize.toBitVec_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.USize.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">USize</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L556-L559","name":"Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_ite","line":556,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt64</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L551-L554","name":"Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_ite","line":551,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt32</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L546-L549","name":"Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_ite","line":546,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt16</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L541-L544","name":"Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_ite","line":541,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt8</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L536-L539","name":"Std.Tactic.BVDecide.Normalize.ISize.toBitVec_cond","line":536,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.ISize.toBitVec_cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.ISize.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L531-L534","name":"Std.Tactic.BVDecide.Normalize.Int64.toBitVec_cond","line":531,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int64.toBitVec_cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int64.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L526-L529","name":"Std.Tactic.BVDecide.Normalize.Int32.toBitVec_cond","line":526,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int32.toBitVec_cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int32.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L521-L524","name":"Std.Tactic.BVDecide.Normalize.Int16.toBitVec_cond","line":521,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int16.toBitVec_cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int16.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L516-L519","name":"Std.Tactic.BVDecide.Normalize.Int8.toBitVec_cond","line":516,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int8.toBitVec_cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int8.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L511-L514","name":"Std.Tactic.BVDecide.Normalize.USize.toBitVec_cond","line":511,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.USize.toBitVec_cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.USize.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">USize</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L506-L509","name":"Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_cond","line":506,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt64</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L501-L504","name":"Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_cond","line":501,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt32</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L496-L499","name":"Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_cond","line":496,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt16</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L491-L494","name":"Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_cond","line":491,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt8</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L485-L489","name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_right","line":485,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_beq_mul_short_circuit_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y₁ </span><span class=\"fn\">y₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y₁</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a>(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">y₁</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">y₂</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y₁</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y₂</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L479-L483","name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_left","line":479,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_beq_mul_short_circuit_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂ </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a>(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L475-L477","name":"Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul'","line":475,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">norm_bv_add_mul'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L471-L473","name":"Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul","line":471,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">norm_bv_add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L468-L469","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'''","line":468,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_neg_mul'''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L465-L466","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul''","line":465,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_neg_mul''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L462-L463","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'","line":462,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_neg_mul'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L459-L460","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul","line":459,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_neg_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L455-L457","name":"Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim'","line":455,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">signExtend_elim'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">0</span> <span class=\"fn\">w</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L449-L453","name":"Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim","line":449,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">signExtend_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">⋯</span> (<span class=\"fn\">(bif <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a>(<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">v</span>) else 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a>(<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">v</span>))</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L441-L447","name":"Std.Tactic.BVDecide.Normalize.BitVec.append_const_right","line":441,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.append_const_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.append_const_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">append_const_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w1 </span><span class=\"fn\">w2 </span><span class=\"fn\">b </span><span class=\"fn\">w3 </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w2</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w3</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">⋯</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> (<span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w2</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w3</span> <span class=\"fn\">c</span></span>))</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L432-L439","name":"Std.Tactic.BVDecide.Normalize.BitVec.append_const_left","line":432,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.append_const_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.append_const_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">append_const_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w3 </span><span class=\"fn\">w1 </span><span class=\"fn\">a </span><span class=\"fn\">w2 </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w3</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w1</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> (<span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w2</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">⋯</span> (<span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w1</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w2</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L426-L429","name":"Std.Tactic.BVDecide.Normalize.BitVec.and_const_right'","line":426,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_right'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_right'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_const_right'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L421-L424","name":"Std.Tactic.BVDecide.Normalize.BitVec.and_const_left'","line":421,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_left'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_left'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_const_left'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L416-L419","name":"Std.Tactic.BVDecide.Normalize.BitVec.and_const_right","line":416,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_const_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L411-L414","name":"Std.Tactic.BVDecide.Normalize.BitVec.and_const_left","line":411,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_const_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L405-L409","name":"Std.Tactic.BVDecide.Normalize.BitVec.const_beq_const_add_beq","line":405,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_beq_const_add_beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_beq_const_add_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">const_beq_const_add_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">c </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L399-L403","name":"Std.Tactic.BVDecide.Normalize.BitVec.const_beq_add_const_beq","line":399,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_beq_add_const_beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_beq_add_const_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">const_beq_add_const_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L393-L397","name":"Std.Tactic.BVDecide.Normalize.BitVec.const_add_beq_const","line":393,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_add_beq_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_add_beq_const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">const_add_beq_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L387-L391","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_const_beq_const","line":387,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_beq_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_beq_const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_const_beq_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L382-L384","name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_ones","line":382,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ones","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ones\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_ones</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L377-L379","name":"Std.Tactic.BVDecide.Normalize.BitVec.ones_mul","line":377,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ones_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ones_mul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ones_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L371-L374","name":"Std.Tactic.BVDecide.Normalize.BitVec.exctractLsb'_if","line":371,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.exctractLsb'_if","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.exctractLsb'_if\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">exctractLsb'_if</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">x</span> else <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span></span> else <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L362-L366","name":"Std.Tactic.BVDecide.Normalize.BitVec.udiv_ofNat_eq_of_lt","line":362,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.udiv_ofNat_eq_of_lt","doc":"`x / (BitVec.ofNat n)` where `n = 2^k` is the same as shifting `x` right by `k`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.udiv_ofNat_eq_of_lt\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">udiv_ofNat_eq_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlt</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L331-L334","name":"Std.Tactic.BVDecide.Normalize.BitVec.ult_max'","line":331,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ult_max'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ult_max'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ult_max'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L327-L329","name":"Std.Tactic.BVDecide.Normalize.BitVec.max_ult'","line":327,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.max_ult'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.max_ult'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">max_ult'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L321-L324","name":"Std.Tactic.BVDecide.Normalize.BitVec.lt_one_iff","line":321,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.lt_one_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.lt_one_iff\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">lt_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">n</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L318-L319","name":"Std.Tactic.BVDecide.Normalize.BitVec.not_lt_zero","line":318,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_lt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_lt_zero\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_lt_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L313-L316","name":"Std.Tactic.BVDecide.Normalize.BitVec.lt_irrefl","line":313,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.lt_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.lt_irrefl\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">lt_irrefl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L305-L311","name":"Std.Tactic.BVDecide.Normalize.BitVec.zero_ult'","line":305,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_ult'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_ult'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero_ult'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L300-L303","name":"Std.Tactic.BVDecide.Normalize.BitVec.zero_lt_iff_zero_neq","line":300,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_lt_iff_zero_neq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_lt_iff_zero_neq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero_lt_iff_zero_neq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L297-L298","name":"Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_self","line":297,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_self\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRight_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L291-L295","name":"Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_zero'","line":291,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_zero'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_zero'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRight_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">w'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L280-L283","name":"Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_neg","line":280,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w₁</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L274-L278","name":"Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_zero'","line":274,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_zero'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_zero'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">w'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L267-L269","name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_neg","line":267,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L263-L265","name":"Std.Tactic.BVDecide.Normalize.BitVec.neg_mul","line":263,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.neg_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.neg_mul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">neg_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L250-L253","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_const_right'","line":250,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_right'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_right'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_const_right'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L245-L248","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_const_left'","line":245,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_left'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_left'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_const_left'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L240-L243","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_const_right","line":240,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_const_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L235-L238","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_const_left","line":235,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_const_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L232-L233","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_same","line":232,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_same","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_same\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_same</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> 2<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L227-L230","name":"Std.Tactic.BVDecide.Normalize.BitVec.not_neg''","line":227,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_neg''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L221-L225","name":"Std.Tactic.BVDecide.Normalize.BitVec.not_neg'","line":221,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_neg'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L216-L219","name":"Std.Tactic.BVDecide.Normalize.BitVec.not_neg","line":216,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L210-L214","name":"Std.Tactic.BVDecide.Normalize.BitVec.neg_add","line":210,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.neg_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.neg_add\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">neg_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L205-L208","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_neg","line":205,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L201-L203","name":"Std.Tactic.BVDecide.Normalize.BitVec.not_add","line":201,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_add\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L197-L199","name":"Std.Tactic.BVDecide.Normalize.BitVec.add_not","line":197,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_not\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L193-L195","name":"Std.Tactic.BVDecide.Normalize.BitVec.and_contra'","line":193,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_contra'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_contra'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_contra'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L189-L191","name":"Std.Tactic.BVDecide.Normalize.BitVec.and_contra","line":189,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_contra","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_contra\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_contra</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L185-L187","name":"Std.Tactic.BVDecide.Normalize.BitVec.one_plus_not_eq_not_plus_one","line":185,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.one_plus_not_eq_not_plus_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.one_plus_not_eq_not_plus_one\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">one_plus_not_eq_not_plus_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L179-L181","name":"Std.Tactic.BVDecide.Normalize.BitVec.and_ones","line":179,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_ones","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_ones\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_ones</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L174-L176","name":"Std.Tactic.BVDecide.Normalize.BitVec.ones_and","line":174,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ones_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ones_and\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ones_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L141-L144","name":"Std.Tactic.BVDecide.Normalize.BitVec.getElem_eq_getLsbD","line":141,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.getElem_eq_getLsbD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.getElem_eq_getLsbD\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getElem_eq_getLsbD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L135-L137","name":"Std.Tactic.BVDecide.Normalize.BitVec.abs_eq","line":135,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.abs_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.abs_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">abs_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.abs\">abs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> else <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L119-L133","name":"Std.Tactic.BVDecide.Normalize.BitVec.srem_umod","line":119,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.srem_umod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.srem_umod\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">srem_umod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>) else <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>)</span>\n  else <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> else <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L103-L117","name":"Std.Tactic.BVDecide.Normalize.BitVec.smtSDiv_smtUDiv","line":103,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.smtSDiv_smtUDiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.smtSDiv_smtUDiv\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">smtSDiv_smtUDiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smtSDiv\">smtSDiv</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smtUDiv\">smtUDiv</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)</span> else <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smtUDiv\">smtUDiv</a></span> <span class=\"fn\">y</span></span></span>\n  else <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smtUDiv\">smtUDiv</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)</span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smtUDiv\">smtUDiv</a></span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L85-L99","name":"Std.Tactic.BVDecide.Normalize.BitVec.smod_umod","line":85,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.smod_umod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.smod_umod\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">smod_umod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>) else <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> else <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span></span></span>\n  else <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">bif <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> then <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> else <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.umod\">umod</a></span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L69-L83","name":"Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv","line":69,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sdiv_udiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> else <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>)</span>\n  else <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>) else <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L64-L67","name":"Std.Tactic.BVDecide.Normalize.BitVec.ofBool_eq_if","line":64,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ofBool_eq_if","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ofBool_eq_if\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofBool_eq_if</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L60-L62","name":"Std.Tactic.BVDecide.Normalize.BitVec.ofNatLT_reduce","line":60,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ofNatLT_reduce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ofNatLT_reduce\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofNatLT_reduce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#BitVec.ofNatLT\">#'</a><span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L53-L56","name":"Std.Tactic.BVDecide.Normalize.BitVec.sle_eq_ult","line":53,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.sle_eq_ult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.sle_eq_ult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sle_eq_ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a>(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">x</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L48-L51","name":"Std.Tactic.BVDecide.Normalize.BitVec.slt_eq_ult","line":48,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.slt_eq_ult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.slt_eq_ult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">slt_eq_ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">y</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L37-L39","name":"Std.Tactic.BVDecide.Normalize.BitVec.ge_ule","line":37,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ge_ule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ge_ule\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ge_ule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">y</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L33-L35","name":"Std.Tactic.BVDecide.Normalize.BitVec.gt_ult","line":33,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.gt_ult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.gt_ult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">gt_ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L25-L29","name":"Std.Tactic.BVDecide.Normalize.BitVec.le_ult","line":25,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.le_ult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.le_ult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">le_ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">x</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"}]}