{"name":"Lean.Meta.Tactic.Grind.Arith.Linear.Types","instances":[{"typeNames":["Lean.Grind.Linarith.Poly"],"name":"Lean.Meta.Grind.Arith.Linear.instHashablePoly_lean","className":"Hashable"},{"typeNames":["Lean.Grind.Linarith.Expr"],"name":"Lean.Meta.Grind.Arith.Linear.instHashableExpr_lean","className":"Hashable"},{"typeNames":["Lean.Meta.Grind.Arith.Linear.DiseqCnstr"],"name":"Lean.Meta.Grind.Arith.Linear.instInhabitedDiseqCnstr","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Arith.Linear.EqCnstr"],"name":"Lean.Meta.Grind.Arith.Linear.instInhabitedEqCnstr","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Arith.Linear.Struct"],"name":"Lean.Meta.Grind.Arith.Linear.instInhabitedStruct","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Arith.Linear.State"],"name":"Lean.Meta.Grind.Arith.Linear.instInhabitedState","className":"Inhabited"}],"imports":["Std.Internal.Rat","Init.Grind.Ring.Poly","Init.Grind.Ordered.Linarith","Lean.Data.PersistentArray","Lean.Meta.Tactic.Grind.ExprPtr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L209-L209","name":"Lean.Meta.Grind.Arith.Linear.instInhabitedState","line":209,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L208-L208","name":"Lean.Meta.Grind.Arith.Linear.State.exprToStructId","line":208,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State.exprToStructId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State.exprToStructId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">State</span>.<span class=\"name\">exprToStructId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L206-L206","name":"Lean.Meta.Grind.Arith.Linear.State.typeIdOf","line":206,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State.typeIdOf","doc":"Mapping from types to its \"structure id\". We cache failures using `none`.\n`typeIdOf[type]` is `some id`, then `id < structs.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State.typeIdOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">State</span>.<span class=\"name\">typeIdOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L202-L202","name":"Lean.Meta.Grind.Arith.Linear.State.structs","line":202,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State.structs","doc":"Structures detected.\nWe expect to find a small number of `IntModule`s in a given goal. Thus, using `Array` is fine here.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State.structs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">State</span>.<span class=\"name\">structs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L197-L197","name":"Lean.Meta.Grind.Arith.Linear.State.mk","line":197,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeIdOf</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exprToStructId</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L196-L209","name":"Lean.Meta.Grind.Arith.Linear.State","line":196,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State","doc":"State for all `IntModule` types detected by `grind`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L194-L194","name":"Lean.Meta.Grind.Arith.Linear.instInhabitedStruct","line":194,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instInhabitedStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instInhabitedStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instInhabitedStruct</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L193-L193","name":"Lean.Meta.Grind.Arith.Linear.Struct.ignored","line":193,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.ignored","doc":"Linear constraints that are not supported.\nWe use this information for diagnostics.\nTODO: store constraints instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.ignored\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">ignored</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L187-L187","name":"Lean.Meta.Grind.Arith.Linear.Struct.occurs","line":187,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.occurs","doc":"Mapping from variable to occurrences.\nFor example, an entry `x ↦ {y, z}` means that `x` may occur in `lowers`, or `uppers`, or `diseqs` of\nvariables `y` and `z`.\nIf `x` occurs in `diseqs[y]`, `lowers[y]`, or `uppers[y]`, then `y` is in `occurs[x]`,\nbut the reverse is not true.\nIf `x` is in `elimStack`, then `occurs[x]` is the empty set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.occurs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">occurs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.VarSet\">VarSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L178-L178","name":"Lean.Meta.Grind.Arith.Linear.Struct.elimStack","line":178,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.elimStack","doc":"Elimination stack. For every variable in `elimStack`. If `x` in `elimStack`, then `elimEqs[x]` is not `none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.elimStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">elimStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L174-L174","name":"Lean.Meta.Grind.Arith.Linear.Struct.elimEqs","line":174,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.elimEqs","doc":"Mapping from variable to equation constraint used to eliminate it. `solved` variables should not occur in\n`diseqs`, `lowers`, or `uppers`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.elimEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">elimEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L169-L169","name":"Lean.Meta.Grind.Arith.Linear.Struct.diseqSplits","line":169,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.diseqSplits","doc":"Cache decision variables used when splitting on disequalities.\nThis is necessary because the same disequality may be in different conflicts.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.diseqSplits\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">diseqSplits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L164-L164","name":"Lean.Meta.Grind.Arith.Linear.Struct.conflict?","line":164,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.conflict?","doc":"`conflict?` is `some ..` if a contradictory constraint was derived.\nThis field is only set when `caseSplits` is `true`. Otherwise, we\ncan convert `UnsatProof` into a Lean term and close the current `grind` goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.conflict?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">conflict?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.UnsatProof\">UnsatProof</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L158-L158","name":"Lean.Meta.Grind.Arith.Linear.Struct.caseSplits","line":158,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.caseSplits","doc":"`caseSplits` is `true` if linarith is searching for model and already performed case splits.\nThis information is used to decide whether a conflict should immediately close the\ncurrent `grind` goal or not.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.caseSplits\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">caseSplits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L152-L152","name":"Lean.Meta.Grind.Arith.Linear.Struct.assignment","line":152,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.assignment","doc":"Partial assignment being constructed by linarith. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.assignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">assignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Std/Internal/Rat.html#Std.Internal.Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L150-L150","name":"Lean.Meta.Grind.Arith.Linear.Struct.diseqs","line":150,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.diseqs","doc":"Mapping from variables to their disequalities. We say a disequality constraint `c` is a disequality for a variable `x`\nif `x` is the maximal variable in `c`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.diseqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">diseqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L145-L145","name":"Lean.Meta.Grind.Arith.Linear.Struct.uppers","line":145,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.uppers","doc":"Mapping from variables to their \"upper\" bounds. We say a relational constraint `c` is a upper bound for a variable `x`\nif `x` is the maximal variable in `c`, and `x` coefficient in `c` is positive.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.uppers\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">uppers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L140-L140","name":"Lean.Meta.Grind.Arith.Linear.Struct.lowers","line":140,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.lowers","doc":"Mapping from variables to their \"lower\" bounds. We say a relational constraint `c` is a lower bound for a variable `x`\nif `x` is the maximal variable in `c`, and `x` coefficient in `c` is negative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.lowers\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">lowers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L135-L135","name":"Lean.Meta.Grind.Arith.Linear.Struct.varMap","line":135,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.varMap","doc":"Mapping from `Expr` to a variable representing it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.varMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">varMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L133-L133","name":"Lean.Meta.Grind.Arith.Linear.Struct.vars","line":133,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.vars","doc":"Mapping from variables to their denotations.\nRemark each variable can be in only one ring.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">vars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L128-L128","name":"Lean.Meta.Grind.Arith.Linear.Struct.negFn","line":128,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.negFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.negFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">negFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L127-L127","name":"Lean.Meta.Grind.Arith.Linear.Struct.subFn","line":127,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.subFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.subFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">subFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L126-L126","name":"Lean.Meta.Grind.Arith.Linear.Struct.homomulFn?","line":126,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.homomulFn?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.homomulFn?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">homomulFn?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L125-L125","name":"Lean.Meta.Grind.Arith.Linear.Struct.nsmulFn?","line":125,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.nsmulFn?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.nsmulFn?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">nsmulFn?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L124-L124","name":"Lean.Meta.Grind.Arith.Linear.Struct.zsmulFn?","line":124,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.zsmulFn?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.zsmulFn?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">zsmulFn?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L123-L123","name":"Lean.Meta.Grind.Arith.Linear.Struct.nsmulFn","line":123,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.nsmulFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.nsmulFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">nsmulFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L122-L122","name":"Lean.Meta.Grind.Arith.Linear.Struct.zsmulFn","line":122,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.zsmulFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.zsmulFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">zsmulFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L121-L121","name":"Lean.Meta.Grind.Arith.Linear.Struct.addFn","line":121,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.addFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.addFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">addFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L120-L120","name":"Lean.Meta.Grind.Arith.Linear.Struct.ltFn?","line":120,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.ltFn?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.ltFn?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">ltFn?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L119-L119","name":"Lean.Meta.Grind.Arith.Linear.Struct.leFn?","line":119,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.leFn?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.leFn?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">leFn?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L118-L118","name":"Lean.Meta.Grind.Arith.Linear.Struct.one?","line":118,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.one?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.one?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">one?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L117-L117","name":"Lean.Meta.Grind.Arith.Linear.Struct.ofNatZero","line":117,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.ofNatZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.ofNatZero\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">ofNatZero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L116-L116","name":"Lean.Meta.Grind.Arith.Linear.Struct.zero","line":116,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L115-L115","name":"Lean.Meta.Grind.Arith.Linear.Struct.charInst?","line":115,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.charInst?","doc":"`IsCharP` instance for `type` if available. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.charInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">charInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L113-L113","name":"Lean.Meta.Grind.Arith.Linear.Struct.fieldInst?","line":113,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.fieldInst?","doc":"`Field` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.fieldInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">fieldInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L111-L111","name":"Lean.Meta.Grind.Arith.Linear.Struct.orderedRingInst?","line":111,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.orderedRingInst?","doc":"`OrderedRing` instance with `Preorder` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.orderedRingInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">orderedRingInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L109-L109","name":"Lean.Meta.Grind.Arith.Linear.Struct.commRingInst?","line":109,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.commRingInst?","doc":"`CommRing` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.commRingInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">commRingInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L107-L107","name":"Lean.Meta.Grind.Arith.Linear.Struct.ringInst?","line":107,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.ringInst?","doc":"`Ring` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.ringInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">ringInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L105-L105","name":"Lean.Meta.Grind.Arith.Linear.Struct.noNatDivInst?","line":105,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.noNatDivInst?","doc":"`NoNatZeroDivisors` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.noNatDivInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">noNatDivInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L103-L103","name":"Lean.Meta.Grind.Arith.Linear.Struct.linearInst?","line":103,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.linearInst?","doc":"`LinearOrder` instance if available "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.linearInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">linearInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L101-L101","name":"Lean.Meta.Grind.Arith.Linear.Struct.partialInst?","line":101,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.partialInst?","doc":"`PartialOrder` instance if available "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.partialInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">partialInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L99-L99","name":"Lean.Meta.Grind.Arith.Linear.Struct.orderedAddInst?","line":99,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.orderedAddInst?","doc":"`OrderedAdd` instance with `Preorder` if available "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.orderedAddInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">orderedAddInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L97-L97","name":"Lean.Meta.Grind.Arith.Linear.Struct.preorderInst?","line":97,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.preorderInst?","doc":"`Preorder` instance if available "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.preorderInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">preorderInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L95-L95","name":"Lean.Meta.Grind.Arith.Linear.Struct.intModuleInst","line":95,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.intModuleInst","doc":"`IntModule` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.intModuleInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">intModuleInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L93-L93","name":"Lean.Meta.Grind.Arith.Linear.Struct.u","line":93,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.u","doc":"Cached `getDecLevel type` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.u\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">u</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Level.html#Lean.Level\">Level</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L91-L91","name":"Lean.Meta.Grind.Arith.Linear.Struct.type","line":91,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L90-L90","name":"Lean.Meta.Grind.Arith.Linear.Struct.ringId?","line":90,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.ringId?","doc":"If the structure is a ring, we store its id in the `CommRing` module at `ringId?` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.ringId?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">ringId?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L88-L88","name":"Lean.Meta.Grind.Arith.Linear.Struct.id","line":88,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L87-L87","name":"Lean.Meta.Grind.Arith.Linear.Struct.mk","line":87,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ringId?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">intModuleInst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preorderInst? </span><span class=\"fn\">orderedAddInst? </span><span class=\"fn\">partialInst? </span><span class=\"fn\">linearInst? </span><span class=\"fn\">noNatDivInst? </span><span class=\"fn\">ringInst? </span><span class=\"fn\">commRingInst? </span><span class=\"fn\">orderedRingInst?\n  </span><span class=\"fn\">fieldInst?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">charInst?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero </span><span class=\"fn\">ofNatZero</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">one? </span><span class=\"fn\">leFn? </span><span class=\"fn\">ltFn?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addFn </span><span class=\"fn\">zsmulFn </span><span class=\"fn\">nsmulFn</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zsmulFn? </span><span class=\"fn\">nsmulFn? </span><span class=\"fn\">homomulFn?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subFn </span><span class=\"fn\">negFn</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vars</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lowers </span><span class=\"fn\">uppers</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diseqs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Std/Internal/Rat.html#Std.Internal.Rat\">Rat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">caseSplits</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">conflict?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.UnsatProof\">UnsatProof</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diseqSplits</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimEqs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimStack</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occurs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.VarSet\">VarSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ignored</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L82-L194","name":"Lean.Meta.Grind.Arith.Linear.Struct","line":82,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct","doc":"State for each algebraic structure by this module.\nEach type must at least implement the instance `IntModule`.\nFor being able to process inequalities, it must at least implement `Preorder`, and `OrderedAdd`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Struct</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L80-L80","name":"Lean.Meta.Grind.Arith.Linear.VarSet","line":80,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.VarSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.VarSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">VarSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L77-L78","name":"Lean.Meta.Grind.Arith.Linear.instInhabitedEqCnstr","line":77,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instInhabitedEqCnstr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instInhabitedEqCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instInhabitedEqCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L74-L75","name":"Lean.Meta.Grind.Arith.Linear.instInhabitedDiseqCnstr","line":74,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instInhabitedDiseqCnstr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instInhabitedDiseqCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instInhabitedDiseqCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L70-L70","name":"Lean.Meta.Grind.Arith.Linear.UnsatProof.lt","line":70,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.UnsatProof.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.UnsatProof.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">UnsatProof</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.UnsatProof\">UnsatProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L69-L69","name":"Lean.Meta.Grind.Arith.Linear.UnsatProof.diseq","line":69,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.UnsatProof.diseq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.UnsatProof.diseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">UnsatProof</span>.<span class=\"name\">diseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.UnsatProof\">UnsatProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L68-L70","name":"Lean.Meta.Grind.Arith.Linear.UnsatProof","line":68,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.UnsatProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.UnsatProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">UnsatProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L66-L66","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.oneNeZero","line":66,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.oneNeZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.oneNeZero\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">oneNeZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L65-L65","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.subst1","line":65,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.subst1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.subst1\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">subst1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L64-L64","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.subst","line":64,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L63-L63","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.neg","line":63,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L62-L62","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.coreCommRing","line":62,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.coreCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.coreCommRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">coreCommRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ra </span><span class=\"fn\">rb</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Expr\">Grind.CommRing.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">CommRing.Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs'</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\">LinExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L61-L61","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.core","line":61,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof.core\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\">LinExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L60-L66","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof","line":60,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstrProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L58-L58","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstr.h","line":58,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr.h","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr.h\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L57-L57","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstr.p","line":57,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr.p","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr.p\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">p</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L56-L56","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstr.mk","line":56,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstrProof\">DiseqCnstrProof</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L56-L58","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstr","line":56,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L54-L54","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.subst","line":54,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L52-L53","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.ofCommRingEq","line":52,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.ofCommRingEq","doc":"`a ≤ b` from an equality `a = b` coming from the core. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.ofCommRingEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">ofCommRingEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ra </span><span class=\"fn\">rb</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Expr\">Grind.CommRing.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">CommRing.Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs'</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\">LinExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L50-L51","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.ofEq","line":50,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.ofEq","doc":"`a ≤ b` from an equality `a = b` coming from the core. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.ofEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">ofEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">la </span><span class=\"fn\">lb</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\">LinExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L49-L49","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.oneGtZero","line":49,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.oneGtZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.oneGtZero\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">oneGtZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L48-L48","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.ofDiseqSplit","line":48,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.ofDiseqSplit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.ofDiseqSplit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">ofDiseqSplit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decVar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.UnsatProof\">UnsatProof</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L47-L47","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.dec","line":47,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.dec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.dec\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">dec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L46-L46","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.norm","line":46,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L45-L45","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.combine","line":45,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L44-L44","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.notCoreCommRing","line":44,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.notCoreCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.notCoreCommRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">notCoreCommRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Expr\">Grind.CommRing.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">CommRing.Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs'</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\">LinExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L43-L43","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.coreCommRing","line":43,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.coreCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.coreCommRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">coreCommRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Expr\">Grind.CommRing.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">CommRing.Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs'</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\">LinExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L42-L42","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.notCore","line":42,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.notCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.notCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">notCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\">LinExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L41-L41","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.core","line":41,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof.core\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span>.<span class=\"name\">core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\">LinExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L40-L54","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstrProof","line":40,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstrProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L38-L38","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstr.h","line":38,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.h","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.h\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstr</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L37-L37","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstr.strict","line":37,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.strict","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.strict\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstr</span>.<span class=\"name\">strict</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L36-L36","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstr.p","line":36,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.p","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.p\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstr</span>.<span class=\"name\">p</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L35-L35","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstr.mk","line":35,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">strict</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstrProof\">IneqCnstrProof</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L34-L38","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstr","line":34,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr","doc":"An inequality constraint and its justification/proof. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L32-L32","name":"Lean.Meta.Grind.Arith.Linear.EqCnstrProof.subst","line":32,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof.subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof.subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L31-L31","name":"Lean.Meta.Grind.Arith.Linear.EqCnstrProof.coeff","line":31,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof.coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof.coeff\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L30-L30","name":"Lean.Meta.Grind.Arith.Linear.EqCnstrProof.neg","line":30,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L29-L29","name":"Lean.Meta.Grind.Arith.Linear.EqCnstrProof.coreCommRing","line":29,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof.coreCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof.coreCommRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">coreCommRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ra </span><span class=\"fn\">rb</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Expr\">Grind.CommRing.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/Poly.html#Lean.Grind.CommRing.Poly\">CommRing.Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs'</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\">LinExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L28-L28","name":"Lean.Meta.Grind.Arith.Linear.EqCnstrProof.core","line":28,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof.core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof.core\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\">LinExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L27-L32","name":"Lean.Meta.Grind.Arith.Linear.EqCnstrProof","line":27,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">EqCnstrProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L25-L25","name":"Lean.Meta.Grind.Arith.Linear.EqCnstr.h","line":25,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr.h","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr.h\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L24-L24","name":"Lean.Meta.Grind.Arith.Linear.EqCnstr.p","line":24,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr.p","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr.p\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">p</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L23-L23","name":"Lean.Meta.Grind.Arith.Linear.EqCnstr.mk","line":23,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstrProof\">EqCnstrProof</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">EqCnstr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L22-L25","name":"Lean.Meta.Grind.Arith.Linear.EqCnstr","line":22,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr","doc":"An equality constraint and its justification/proof. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">EqCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L19-L19","name":"Lean.Meta.Grind.Arith.Linear.instHashableExpr_lean","line":19,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instHashableExpr_lean","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instHashableExpr_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instHashableExpr_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Grind.Linarith.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L18-L18","name":"Lean.Meta.Grind.Arith.Linear.instHashablePoly_lean","line":18,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instHashablePoly_lean","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.instHashablePoly_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instHashablePoly_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Types.lean#L16-L16","name":"Lean.Meta.Grind.Arith.Linear.LinExpr","line":16,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">LinExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}