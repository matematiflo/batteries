{"name":"Std.Data.Iterators.Lemmas.Consumers.Monadic.Collect","instances":[],"imports":["Init.Data.Array.Lemmas","Init.Data.Iterators.Consumers.Monadic.Collect","Init.Data.Iterators.Lemmas.Consumers.Monadic.Collect","Init.Data.Iterators.Lemmas.Monadic.Basic","Std.Data.Iterators.Lemmas.Equivalence.StepCongr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/Iterators/Lemmas/Consumers/Monadic/Collect.lean#L44-L50","name":"Std.Iterators.IterM.Equiv.toArray_eq","line":44,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Consumers/Monadic/Collect.html#Std.Iterators.IterM.Equiv.toArray_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Consumers/Monadic/Collect.html#Std.Iterators.IterM.Equiv.toArray_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">toArray_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β </span><span class=\"fn\">α₂</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.LawfulIteratorCollect\">LawfulIteratorCollect</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.LawfulIteratorCollect\">LawfulIteratorCollect</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ita</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">itb</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ita</span>.<a href=\"./Std/Data/Iterators/Lemmas/Equivalence/Basic.html#Std.Iterators.IterM.Equiv\">Equiv</a></span> <span class=\"fn\">itb</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ita</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">itb</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toArray\">toArray</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/Iterators/Lemmas/Consumers/Monadic/Collect.lean#L36-L42","name":"Std.Iterators.IterM.Equiv.toList_eq","line":36,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Consumers/Monadic/Collect.html#Std.Iterators.IterM.Equiv.toList_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Consumers/Monadic/Collect.html#Std.Iterators.IterM.Equiv.toList_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">toList_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">α₁ </span><span class=\"fn\">α₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.LawfulIteratorCollect\">LawfulIteratorCollect</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.LawfulIteratorCollect\">LawfulIteratorCollect</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ita</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">itb</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ita</span>.<a href=\"./Std/Data/Iterators/Lemmas/Equivalence/Basic.html#Std.Iterators.IterM.Equiv\">Equiv</a></span> <span class=\"fn\">itb</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ita</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">itb</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/Iterators/Lemmas/Consumers/Monadic/Collect.lean#L15-L34","name":"Std.Iterators.IterM.Equiv.toListRev_eq","line":15,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Consumers/Monadic/Collect.html#Std.Iterators.IterM.Equiv.toListRev_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Consumers/Monadic/Collect.html#Std.Iterators.IterM.Equiv.toListRev_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">toListRev_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β </span><span class=\"fn\">α₂</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ita</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">itb</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ita</span>.<a href=\"./Std/Data/Iterators/Lemmas/Equivalence/Basic.html#Std.Iterators.IterM.Equiv\">Equiv</a></span> <span class=\"fn\">itb</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ita</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">itb</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toListRev\">toListRev</a></span></div></div>"}]}