{"name":"Std.Tactic.BVDecide.Bitblast.BVExpr.Basic","instances":[{"typeNames":["Std.Tactic.BVDecide.BVBit"],"name":"Std.Tactic.BVDecide.instHashableBVBit","className":"Hashable"},{"typeNames":["Eq"],"name":"Std.Tactic.BVDecide.instDecidableEqBVBit","className":"Decidable"},{"typeNames":["Std.Tactic.BVDecide.BVBit"],"name":"Std.Tactic.BVDecide.instReprBVBit","className":"Repr"},{"typeNames":["Std.Tactic.BVDecide.BVBit"],"name":"Std.Tactic.BVDecide.instToStringBVBit","className":"ToString"},{"typeNames":["Std.Tactic.BVDecide.BVBit"],"name":"Std.Tactic.BVDecide.instInhabitedBVBit","className":"Inhabited"},{"typeNames":["Std.Tactic.BVDecide.BVBinOp"],"name":"Std.Tactic.BVDecide.instHashableBVBinOp","className":"Hashable"},{"typeNames":["Eq"],"name":"Std.Tactic.BVDecide.instDecidableEqBVBinOp","className":"Decidable"},{"typeNames":["Std.Tactic.BVDecide.BVBinOp"],"name":"Std.Tactic.BVDecide.BVBinOp.instToString","className":"ToString"},{"typeNames":["Std.Tactic.BVDecide.BVUnOp"],"name":"Std.Tactic.BVDecide.instHashableBVUnOp","className":"Hashable"},{"typeNames":["Eq"],"name":"Std.Tactic.BVDecide.instDecidableEqBVUnOp","className":"Decidable"},{"typeNames":["Std.Tactic.BVDecide.BVUnOp"],"name":"Std.Tactic.BVDecide.BVUnOp.instToString","className":"ToString"},{"typeNames":["Std.Tactic.BVDecide.BVExpr"],"name":"Std.Tactic.BVDecide.BVExpr.instHashable","className":"Hashable"},{"typeNames":["Eq"],"name":"Std.Tactic.BVDecide.BVExpr.decEq","className":"Decidable"},{"typeNames":["Std.Tactic.BVDecide.BVExpr"],"name":"Std.Tactic.BVDecide.BVExpr.instToString","className":"ToString"},{"typeNames":["Std.Tactic.BVDecide.BVBinPred"],"name":"Std.Tactic.BVDecide.BVBinPred.instToString","className":"ToString"},{"typeNames":["Std.Tactic.BVDecide.BVPred"],"name":"Std.Tactic.BVDecide.BVPred.instToString","className":"ToString"}],"imports":["Init.Data.Hashable","Init.Data.BitVec.Lemmas","Init.Data.RArray","Std.Tactic.BVDecide.Bitblast.BoolExpr.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L588-L588","name":"Std.Tactic.BVDecide.BVLogicalExpr.sat_true","line":588,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.sat_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.sat_true\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVLogicalExpr</span>.<span class=\"name\">sat_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.Sat\">Sat</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.BoolExpr.const\">BoolExpr.const</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span> <span class=\"fn\">assign</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L583-L586","name":"Std.Tactic.BVDecide.BVLogicalExpr.sat_and","line":583,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.sat_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.sat_and\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVLogicalExpr</span>.<span class=\"name\">sat_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">BVLogicalExpr</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.Sat\">Sat</a></span> <span class=\"fn\">assign</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.Sat\">Sat</a></span> <span class=\"fn\">assign</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.Sat\">Sat</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.BoolExpr.gate\">BoolExpr.gate</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.Gate.and\">Gate.and</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span> <span class=\"fn\">assign</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L581-L581","name":"Std.Tactic.BVDecide.BVLogicalExpr.Unsat","line":581,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.Unsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.Unsat\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVLogicalExpr</span>.<span class=\"name\">Unsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">BVLogicalExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L579-L579","name":"Std.Tactic.BVDecide.BVLogicalExpr.Sat","line":579,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.Sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.Sat\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVLogicalExpr</span>.<span class=\"name\">Sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">BVLogicalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L576-L577","name":"Std.Tactic.BVDecide.BVLogicalExpr.eval_ite","line":576,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVLogicalExpr</span>.<span class=\"name\">eval_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d </span><span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.BoolExpr\">BoolExpr</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred\">BVPred</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.BoolExpr.ite\">ite</a></span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">d</span></span> then <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">l</span></span> else <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L575-L575","name":"Std.Tactic.BVDecide.BVLogicalExpr.eval_gate","line":575,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval_gate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval_gate\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVLogicalExpr</span>.<span class=\"name\">eval_gate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.Gate\">Gate</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.BoolExpr\">BoolExpr</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred\">BVPred</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.BoolExpr.gate\">BoolExpr.gate</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.Gate.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">y</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L574-L574","name":"Std.Tactic.BVDecide.BVLogicalExpr.eval_not","line":574,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval_not\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVLogicalExpr</span>.<span class=\"name\">eval_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.BoolExpr\">BoolExpr</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred\">BVPred</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.BoolExpr.not\">not</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L573-L573","name":"Std.Tactic.BVDecide.BVLogicalExpr.eval_const","line":573,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval_const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVLogicalExpr</span>.<span class=\"name\">eval_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.BoolExpr.const\">BoolExpr.const</a> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L572-L572","name":"Std.Tactic.BVDecide.BVLogicalExpr.eval_literal","line":572,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval_literal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval_literal\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVLogicalExpr</span>.<span class=\"name\">eval_literal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pred</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred\">BVPred</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.BoolExpr.literal\">BoolExpr.literal</a> <span class=\"fn\">pred</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.eval\">BVPred.eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">pred</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L566-L570","name":"Std.Tactic.BVDecide.BVLogicalExpr.eval","line":566,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval","doc":"The semantics of boolean problems involving BitVec predicates as atoms.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVLogicalExpr</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">BVLogicalExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L559-L562","name":"Std.Tactic.BVDecide.BVLogicalExpr","line":559,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr","doc":"Boolean substructure of problems involving predicates on BitVec as atoms.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVLogicalExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L553-L555","name":"Std.Tactic.BVDecide.BVPred.eval_getLsbD","line":553,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.eval_getLsbD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.eval_getLsbD\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">eval_getLsbD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">expr</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.getLsbD\">getLsbD</a> <span class=\"fn\">expr</span> <span class=\"fn\">idx</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">BVExpr.eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">expr</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">idx</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L549-L551","name":"Std.Tactic.BVDecide.BVPred.eval_bin","line":549,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.eval_bin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.eval_bin\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">eval_bin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">op</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred\">BVBinPred</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.bin\">bin</a> <span class=\"fn\">lhs</span> <span class=\"fn\">op</span> <span class=\"fn\">rhs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">op</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">BVExpr.eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">lhs</span>)</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">BVExpr.eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">rhs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L542-L547","name":"Std.Tactic.BVDecide.BVPred.eval","line":542,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.eval","doc":"The semantics for `BVPred`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">BVExpr.Assignment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred\">BVPred</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L540-L540","name":"Std.Tactic.BVDecide.BVPred.instToString","line":540,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred\">BVPred</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L536-L538","name":"Std.Tactic.BVDecide.BVPred.toString","line":536,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.toString\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred\">BVPred</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L534-L534","name":"Std.Tactic.BVDecide.BVPred.ExprPair.rhs","line":534,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair.rhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair.rhs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">ExprPair</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair\">ExprPair</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair.w\">w</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L533-L533","name":"Std.Tactic.BVDecide.BVPred.ExprPair.lhs","line":533,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair.lhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair.lhs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">ExprPair</span>.<span class=\"name\">lhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair\">ExprPair</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair.w\">w</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L532-L532","name":"Std.Tactic.BVDecide.BVPred.ExprPair.w","line":532,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair.w","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair.w\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">ExprPair</span>.<span class=\"name\">w</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair\">ExprPair</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L531-L531","name":"Std.Tactic.BVDecide.BVPred.ExprPair.mk","line":531,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">ExprPair</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair\">ExprPair</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L528-L534","name":"Std.Tactic.BVDecide.BVPred.ExprPair","line":528,"kind":"structure","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair","doc":"Pack two `BVExpr` of equivalent width into one parameter-less structure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.ExprPair\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">ExprPair</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L521-L524","name":"Std.Tactic.BVDecide.BVPred.getLsbD","line":521,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.getLsbD","doc":"Getting a constant LSB from a `BitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.getLsbD\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">getLsbD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred\">BVPred</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L517-L520","name":"Std.Tactic.BVDecide.BVPred.bin","line":517,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.bin","doc":"A binary predicate on `BVExpr`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred.bin\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span>.<span class=\"name\">bin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred\">BVBinPred</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred\">BVPred</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L513-L524","name":"Std.Tactic.BVDecide.BVPred","line":513,"kind":"inductive","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred","doc":"Supported predicates on `BVExpr`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVPred\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVPred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L509-L509","name":"Std.Tactic.BVDecide.BVBinPred.eval_ult","line":509,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eval_ult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eval_ult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinPred</span>.<span class=\"name\">eval_ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.ult\">ult</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">BitVec.ult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L508-L508","name":"Std.Tactic.BVDecide.BVBinPred.eval_eq","line":508,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eval_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eval_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinPred</span>.<span class=\"name\">eval_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eq\">eq</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L501-L506","name":"Std.Tactic.BVDecide.BVBinPred.eval","line":501,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eval","doc":"The semantics for `BVBinPred`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinPred</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred\">BVBinPred</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L499-L499","name":"Std.Tactic.BVDecide.BVBinPred.instToString","line":499,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinPred</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred\">BVBinPred</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L495-L497","name":"Std.Tactic.BVDecide.BVBinPred.toString","line":495,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.toString\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinPred</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred\">BVBinPred</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L488-L491","name":"Std.Tactic.BVDecide.BVBinPred.ult","line":488,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.ult","doc":"Unsigned Less Than\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.ult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinPred</span>.<span class=\"name\">ult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred\">BVBinPred</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L484-L487","name":"Std.Tactic.BVDecide.BVBinPred.eq","line":484,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eq","doc":"Equality.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred.eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinPred</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred\">BVBinPred</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L480-L491","name":"Std.Tactic.BVDecide.BVBinPred","line":480,"kind":"inductive","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred","doc":"Supported binary predicates on `BVExpr`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinPred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L473-L476","name":"Std.Tactic.BVDecide.BVExpr.eval_arithShiftRight","line":473,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_arithShiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_arithShiftRight\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">eval_arithShiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝¹</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.arithShiftRight\">arithShiftRight</a></span> <span class=\"fn\">rhs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">lhs</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">rhs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L469-L471","name":"Std.Tactic.BVDecide.BVExpr.eval_shiftRight","line":469,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_shiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_shiftRight\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">eval_shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝¹</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.shiftRight\">shiftRight</a></span> <span class=\"fn\">rhs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">rhs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L465-L467","name":"Std.Tactic.BVDecide.BVExpr.eval_shiftLeft","line":465,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_shiftLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">eval_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝¹</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.shiftLeft\">shiftLeft</a></span> <span class=\"fn\">rhs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">rhs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L461-L463","name":"Std.Tactic.BVDecide.BVExpr.eval_replicate","line":461,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_replicate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_replicate\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">eval_replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">expr</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">a✝</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a✝</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">expr</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.replicate\">BitVec.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">expr</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L457-L459","name":"Std.Tactic.BVDecide.BVExpr.eval_append","line":457,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_append\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">eval_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝¹</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">a✝</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a✝¹</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a✝</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a✝¹</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.append\">append</a></span> <span class=\"fn\">rhs</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">rhs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L453-L455","name":"Std.Tactic.BVDecide.BVExpr.eval_un","line":453,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_un","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_un\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">eval_un</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">op</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">operand</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.un\">un</a> <span class=\"fn\">op</span> <span class=\"fn\">operand</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">op</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">operand</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L449-L451","name":"Std.Tactic.BVDecide.BVExpr.eval_bin","line":449,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_bin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_bin\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">eval_bin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">op</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.bin\">bin</a></span> <span class=\"fn\">op</span> <span class=\"fn\">rhs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">op</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">lhs</span>)</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">rhs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L445-L447","name":"Std.Tactic.BVDecide.BVExpr.eval_extract","line":445,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_extract\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">eval_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">start </span><span class=\"fn\">len </span><span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">expr</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.extract\">extract</a> <span class=\"fn\">start</span> <span class=\"fn\">len</span> <span class=\"fn\">expr</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">start</span> <span class=\"fn\">len</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">expr</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L442-L443","name":"Std.Tactic.BVDecide.BVExpr.eval_const","line":442,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">eval_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">val</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.const\">const</a> <span class=\"fn\">val</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">val</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L433-L440","name":"Std.Tactic.BVDecide.BVExpr.eval_var","line":433,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval_var\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">eval_var</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.var\">var</a> <span class=\"fn\">idx</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.truncate\">BitVec.truncate</a> <span class=\"fn\">w</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">assign</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment.get\">get</a></span> <span class=\"fn\">idx</span>)</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec.bv\">bv</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L409-L431","name":"Std.Tactic.BVDecide.BVExpr.eval","line":409,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval","doc":"The semantics for `BVExpr`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L403-L407","name":"Std.Tactic.BVDecide.BVExpr.Assignment.get","line":403,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment.get","doc":"Get the value of a `BVExpr.var` from an `Assignment`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment.get\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">Assignment</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Assignment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">PackedBitVec</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L398-L401","name":"Std.Tactic.BVDecide.BVExpr.Assignment","line":398,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment","doc":"The notion of variable assignments for `BVExpr`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">Assignment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L396-L396","name":"Std.Tactic.BVDecide.BVExpr.PackedBitVec.bv","line":396,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec.bv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec.bv\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">PackedBitVec</span>.<span class=\"name\">bv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">PackedBitVec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec.w\">w</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L395-L395","name":"Std.Tactic.BVDecide.BVExpr.PackedBitVec.w","line":395,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec.w","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec.w\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">PackedBitVec</span>.<span class=\"name\">w</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">PackedBitVec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L394-L394","name":"Std.Tactic.BVDecide.BVExpr.PackedBitVec.mk","line":394,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">PackedBitVec</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bv</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">PackedBitVec</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L391-L396","name":"Std.Tactic.BVDecide.BVExpr.PackedBitVec","line":391,"kind":"structure","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec","doc":"Pack a `BitVec` with its width into a single parameter-less structure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">PackedBitVec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L389-L389","name":"Std.Tactic.BVDecide.BVExpr.instToString","line":389,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">instToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L376-L386","name":"Std.Tactic.BVDecide.BVExpr.toString","line":376,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.toString\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L263-L374","name":"Std.Tactic.BVDecide.BVExpr.decEq","line":263,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.decEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.decEq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">decEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L260-L261","name":"Std.Tactic.BVDecide.BVExpr.instHashable","line":260,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.instHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.instHashable\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">instHashable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L231-L234","name":"Std.Tactic.BVDecide.BVExpr.arithShiftRight","line":231,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.arithShiftRight","doc":"shift right arithmetically by another BitVec expression. For constant shifts there exists a `BVUnop`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.arithShiftRight\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">arithShiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L227-L230","name":"Std.Tactic.BVDecide.BVExpr.shiftRight","line":227,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.shiftRight","doc":"shift right by another BitVec expression. For constant shifts there exists a `BVUnop`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.shiftRight\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L223-L226","name":"Std.Tactic.BVDecide.BVExpr.shiftLeft","line":223,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.shiftLeft","doc":"shift left by another BitVec expression. For constant shifts there exists a `BVUnop`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.shiftLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L219-L222","name":"Std.Tactic.BVDecide.BVExpr.replicate","line":219,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.replicate","doc":"Concatenate a bitvector with itself `n` times.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.replicate\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">w'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">w'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L215-L218","name":"Std.Tactic.BVDecide.BVExpr.append","line":215,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.append","doc":"Concatenate two bitvectors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.append\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L211-L214","name":"Std.Tactic.BVDecide.BVExpr.un","line":211,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.un","doc":"A unary operation on two `BVExpr`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.un\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">un</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">operand</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L207-L210","name":"Std.Tactic.BVDecide.BVExpr.bin","line":207,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.bin","doc":"A binary operation on two `BVExpr`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.bin\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L203-L206","name":"Std.Tactic.BVDecide.BVExpr.extract","line":203,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.extract","doc":"Extract a slice from a `BitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.extract\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start </span><span class=\"fn\">len</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">len</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L199-L202","name":"Std.Tactic.BVDecide.BVExpr.const","line":199,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.const","doc":"A constant `BitVec` value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L195-L198","name":"Std.Tactic.BVDecide.BVExpr.var","line":195,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.var","doc":"A `BitVec` variable, referred to through an index.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.var\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">var</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L191-L255","name":"Std.Tactic.BVDecide.BVExpr.hashCode","line":191,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.hashCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.hashCode\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">hashCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">BVExpr</a> <span class=\"fn\">w</span></span> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L191-L255","name":"Std.Tactic.BVDecide.BVExpr","line":191,"kind":"inductive","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr","doc":"All supported expressions involving `BitVec` and operations on them.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L187-L187","name":"Std.Tactic.BVDecide.BVUnOp.eval_clz","line":187,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_clz","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_clz\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">eval_clz</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.clz\">clz</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/BitVec/Basic.html#BitVec.clz\">BitVec.clz</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L185-L185","name":"Std.Tactic.BVDecide.BVUnOp.eval_reverse","line":185,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_reverse\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">eval_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.reverse\">reverse</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/BitVec/Basic.html#BitVec.reverse\">BitVec.reverse</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L181-L183","name":"Std.Tactic.BVDecide.BVUnOp.eval_arithShiftRightConst","line":181,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_arithShiftRightConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_arithShiftRightConst\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">eval_arithShiftRightConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.arithShiftRightConst\">arithShiftRightConst</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight\">sshiftRight</a></span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L177-L179","name":"Std.Tactic.BVDecide.BVUnOp.eval_rotateRight","line":177,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_rotateRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_rotateRight\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">eval_rotateRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.rotateRight\">rotateRight</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.rotateRight\">rotateRight</a></span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L173-L175","name":"Std.Tactic.BVDecide.BVUnOp.eval_rotateLeft","line":173,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_rotateLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_rotateLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">eval_rotateLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.rotateLeft\">rotateLeft</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.rotateLeft\">rotateLeft</a></span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L171-L171","name":"Std.Tactic.BVDecide.BVUnOp.eval_not","line":171,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval_not\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">eval_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.not\">not</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L160-L169","name":"Std.Tactic.BVDecide.BVUnOp.eval","line":160,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval","doc":"The semantics for `BVUnOp`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L158-L158","name":"Std.Tactic.BVDecide.BVUnOp.instToString","line":158,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L150-L156","name":"Std.Tactic.BVDecide.BVUnOp.toString","line":150,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.toString\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L146-L146","name":"Std.Tactic.BVDecide.instDecidableEqBVUnOp","line":146,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instDecidableEqBVUnOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instDecidableEqBVUnOp\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">instDecidableEqBVUnOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L146-L146","name":"Std.Tactic.BVDecide.instHashableBVUnOp","line":146,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instHashableBVUnOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instHashableBVUnOp\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">instHashableBVUnOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L142-L145","name":"Std.Tactic.BVDecide.BVUnOp.clz","line":142,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.clz","doc":"Count leading zeros.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.clz\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">clz</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L138-L141","name":"Std.Tactic.BVDecide.BVUnOp.reverse","line":138,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.reverse","doc":"Reverse the bits in a bitvector.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.reverse\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">reverse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L130-L137","name":"Std.Tactic.BVDecide.BVUnOp.arithShiftRightConst","line":130,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.arithShiftRightConst","doc":"Arithmetic shift right by a constant value.\n\nThis operation has a dedicated constant representation as shiftRight can take `Nat` as a shift amount.\nWe can obviously not bitblast a `Nat` but still want to support the case where the user shifts by a\nconstant `Nat` value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.arithShiftRightConst\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">arithShiftRightConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L126-L129","name":"Std.Tactic.BVDecide.BVUnOp.rotateRight","line":126,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.rotateRight","doc":"Rotating right by a constant value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.rotateRight\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">rotateRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L122-L125","name":"Std.Tactic.BVDecide.BVUnOp.rotateLeft","line":122,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.rotateLeft","doc":"Rotating left by a constant value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.rotateLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">rotateLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L118-L121","name":"Std.Tactic.BVDecide.BVUnOp.not","line":118,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.not","doc":"Bitwise not.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp.not\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span>.<span class=\"name\">not</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">BVUnOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L114-L146","name":"Std.Tactic.BVDecide.BVUnOp","line":114,"kind":"inductive","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp","doc":"All supported unary operators on `BVExpr`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVUnOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L110-L110","name":"Std.Tactic.BVDecide.BVBinOp.eval_umod","line":110,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_umod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_umod\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">eval_umod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.umod\">umod</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">x2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L109-L109","name":"Std.Tactic.BVDecide.BVBinOp.eval_udiv","line":109,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_udiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_udiv\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">eval_udiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.udiv\">udiv</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">x2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L108-L108","name":"Std.Tactic.BVDecide.BVBinOp.eval_mul","line":108,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_mul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">eval_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.mul\">mul</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L107-L107","name":"Std.Tactic.BVDecide.BVBinOp.eval_add","line":107,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_add\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">eval_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.add\">add</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L106-L106","name":"Std.Tactic.BVDecide.BVBinOp.eval_xor","line":106,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_xor\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">eval_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.xor\">xor</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L105-L105","name":"Std.Tactic.BVDecide.BVBinOp.eval_or","line":105,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_or","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_or\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">eval_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.or\">or</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L104-L104","name":"Std.Tactic.BVDecide.BVBinOp.eval_and","line":104,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval_and\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">eval_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.and\">and</a>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L92-L102","name":"Std.Tactic.BVDecide.BVBinOp.eval","line":92,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval","doc":"The semantics for `BVBinOp`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L90-L90","name":"Std.Tactic.BVDecide.BVBinOp.instToString","line":90,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L81-L88","name":"Std.Tactic.BVDecide.BVBinOp.toString","line":81,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.toString\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L77-L77","name":"Std.Tactic.BVDecide.instDecidableEqBVBinOp","line":77,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instDecidableEqBVBinOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instDecidableEqBVBinOp\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">instDecidableEqBVBinOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L77-L77","name":"Std.Tactic.BVDecide.instHashableBVBinOp","line":77,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instHashableBVBinOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instHashableBVBinOp\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">instHashableBVBinOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L73-L76","name":"Std.Tactic.BVDecide.BVBinOp.umod","line":73,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.umod","doc":"Unsigned modulo.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.umod\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">umod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L69-L72","name":"Std.Tactic.BVDecide.BVBinOp.udiv","line":69,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.udiv","doc":"Unsigned division.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.udiv\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">udiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L65-L68","name":"Std.Tactic.BVDecide.BVBinOp.mul","line":65,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.mul","doc":"Multiplication.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.mul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L61-L64","name":"Std.Tactic.BVDecide.BVBinOp.add","line":61,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.add","doc":"Addition.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.add\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L57-L60","name":"Std.Tactic.BVDecide.BVBinOp.xor","line":57,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.xor","doc":"Bitwise xor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.xor\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L53-L56","name":"Std.Tactic.BVDecide.BVBinOp.or","line":53,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.or","doc":"Bitwise or.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.or\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">or</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L49-L52","name":"Std.Tactic.BVDecide.BVBinOp.and","line":49,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.and","doc":"Bitwise and.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp.and\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span>.<span class=\"name\">and</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">BVBinOp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L45-L77","name":"Std.Tactic.BVDecide.BVBinOp","line":45,"kind":"inductive","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp","doc":"All supported binary operations on `BVExpr`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBinOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L42-L43","name":"Std.Tactic.BVDecide.instInhabitedBVBit","line":42,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instInhabitedBVBit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instInhabitedBVBit\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">instInhabitedBVBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">BVBit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L39-L40","name":"Std.Tactic.BVDecide.instToStringBVBit","line":39,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instToStringBVBit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instToStringBVBit\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">instToStringBVBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">BVBit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L37-L37","name":"Std.Tactic.BVDecide.instReprBVBit","line":37,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instReprBVBit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instReprBVBit\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">instReprBVBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">BVBit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L37-L37","name":"Std.Tactic.BVDecide.instDecidableEqBVBit","line":37,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instDecidableEqBVBit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instDecidableEqBVBit\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">instDecidableEqBVBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">BVBit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L37-L37","name":"Std.Tactic.BVDecide.instHashableBVBit","line":37,"kind":"instance","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instHashableBVBit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.instHashableBVBit\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">instHashableBVBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">BVBit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L36-L36","name":"Std.Tactic.BVDecide.BVBit.idx","line":36,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit.idx","doc":"The bit that we take out of the BitVec variable by getLsb.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit.idx\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBit</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">BVBit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit.w\">w</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L32-L32","name":"Std.Tactic.BVDecide.BVBit.w","line":32,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit.w","doc":"The width of the BitVec variable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit.w\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBit</span>.<span class=\"name\">w</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">BVBit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L28-L28","name":"Std.Tactic.BVDecide.BVBit.var","line":28,"kind":"def","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit.var","doc":"A numeric identifier for the BitVec variable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit.var\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBit</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">BVBit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L24-L24","name":"Std.Tactic.BVDecide.BVBit.mk","line":24,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBit</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">BVBit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean#L21-L37","name":"Std.Tactic.BVDecide.BVBit","line":21,"kind":"structure","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit","doc":"The variable definition used by the bitblaster.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}