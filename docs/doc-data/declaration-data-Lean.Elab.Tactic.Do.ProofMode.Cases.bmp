{"name":"Lean.Elab.Tactic.Do.ProofMode.Cases","instances":[],"imports":["Std.Tactic.Do.Syntax","Lean.Elab.Tactic.Do.ProofMode.Focus","Lean.Elab.Tactic.Do.ProofMode.Basic","Lean.Elab.Tactic.Do.ProofMode.Pure","Lean.Elab.Tactic.Do.ProofMode.Intro"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Cases.lean#L186-L206","name":"Lean.Elab.Tactic.Do.ProofMode.elabMCases","line":186,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Cases.html#Lean.Elab.Tactic.Do.ProofMode.elabMCases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Cases.html#Lean.Elab.Tactic.Do.ProofMode.elabMCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">elabMCases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Cases.lean#L74-L172","name":"Lean.Elab.Tactic.Do.ProofMode.mCasesCore","line":74,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Cases.html#Lean.Elab.Tactic.Do.ProofMode.mCasesCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Cases.html#Lean.Elab.Tactic.Do.ProofMode.mCasesCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">mCasesCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs </span><span class=\"fn\">H</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Std/Tactic/Do/Syntax.html#Lean.Parser.Tactic.MCasesPat\">Parser.Tactic.MCasesPat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Do/ProofMode/MGoal.html#Lean.Elab.Tactic.Do.ProofMode.MGoal\">MGoal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Do/ProofMode/MGoal.html#Lean.Elab.Tactic.Do.ProofMode.MGoal\">MGoal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Cases.lean#L51-L62","name":"Lean.Elab.Tactic.Do.ProofMode.mCasesExists","line":51,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Cases.html#Lean.Elab.Tactic.Do.ProofMode.mCasesExists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Cases.html#Lean.Elab.Tactic.Do.ProofMode.mCasesExists\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">mCasesExists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Do/ProofMode/MGoal.html#Lean.Elab.Tactic.Do.ProofMode.MGoal\">MGoal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Do/ProofMode/MGoal.html#Lean.Elab.Tactic.Do.ProofMode.MGoal\">MGoal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Cases.lean#L31-L40","name":"Lean.Elab.Tactic.Do.ProofMode.mCasesAddGoal","line":31,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Cases.html#Lean.Elab.Tactic.Do.ProofMode.mCasesAddGoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Cases.html#Lean.Elab.Tactic.Do.ProofMode.mCasesAddGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">mCasesAddGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs </span><span class=\"fn\">T </span><span class=\"fn\">Q </span><span class=\"fn\">H</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Do/ProofMode/MGoal.html#Lean.Elab.Tactic.Do.ProofMode.MGoal\">MGoal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Cases.lean#L20-L28","name":"Lean.Elab.Tactic.Do.ProofMode.synthIsAnd","line":20,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Cases.html#Lean.Elab.Tactic.Do.ProofMode.synthIsAnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Cases.html#Lean.Elab.Tactic.Do.ProofMode.synthIsAnd\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">synthIsAnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs </span><span class=\"fn\">H</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"}]}