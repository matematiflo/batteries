{"name":"Init.Grind.Attr","instances":[],"imports":["Init.Tactics"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L91-L91","name":"Lean.Parser.Attr.grind?","line":91,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grind?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grind?\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grind?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L90-L90","name":"Lean.Parser.Attr.grind","line":90,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grind\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L86-L89","name":"Lean.Parser.Attr.grindMod","line":86,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L85-L85","name":"Lean.Parser.Attr.grindSym","line":85,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindSym","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindSym\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindSym</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L84-L84","name":"Lean.Parser.Attr.grindExt","line":84,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L83-L83","name":"Lean.Parser.Attr.grindIntro","line":83,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindIntro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindIntro\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindIntro</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L82-L82","name":"Lean.Parser.Attr.grindCasesEager","line":82,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindCasesEager","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindCasesEager\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindCasesEager</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L81-L81","name":"Lean.Parser.Attr.grindCases","line":81,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindCases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindCases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L80-L80","name":"Lean.Parser.Attr.grindUsr","line":80,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindUsr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindUsr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindUsr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L79-L79","name":"Lean.Parser.Attr.grindLR","line":79,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindLR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindLR\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindLR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L78-L78","name":"Lean.Parser.Attr.grindRL","line":78,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindRL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindRL\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindRL</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L77-L77","name":"Lean.Parser.Attr.grindFwd","line":77,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindFwd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindFwd\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindFwd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L76-L76","name":"Lean.Parser.Attr.grindBwd","line":76,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindBwd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindBwd\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindBwd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L75-L75","name":"Lean.Parser.Attr.grindEqBwd","line":75,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindEqBwd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindEqBwd\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindEqBwd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L74-L74","name":"Lean.Parser.Attr.grindEqRhs","line":74,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindEqRhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindEqRhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindEqRhs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L73-L73","name":"Lean.Parser.Attr.grindEqBoth","line":73,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindEqBoth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindEqBoth\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindEqBoth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L72-L72","name":"Lean.Parser.Attr.grindEq","line":72,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L71-L71","name":"Lean.Parser.Attr.grindGen","line":71,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.Attr.grindGen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.Attr.grindGen\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">grindGen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L65-L68","name":"Lean.Parser.resetGrindAttrs","line":65,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Parser.resetGrindAttrs","doc":"Reset all `grind` attributes. This command is intended for testing purposes only and should not be used in applications.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Parser.resetGrindAttrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">resetGrindAttrs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L60-L61","name":"Lean.Grind.genHEqPattern","line":60,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Grind.genHEqPattern","doc":"Similar to `genPattern` but for the heterogeneous case "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Grind.genHEqPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">genHEqPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_h</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_val</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Attr.lean#L14-L58","name":"Lean.Grind.genPattern","line":14,"kind":"def","docLink":"./Init/Grind/Attr.html#Lean.Grind.genPattern","doc":"Gadget for representing generalization steps `h : x = val` in patterns\nThis gadget is used to represent patterns in theorems that have been generalized to reduce the\nnumber of casts introduced during E-matching based instantiation.\n\nFor example, consider the theorem\n```\nOption.pbind_some {α1 : Type u_1} {a : α1} {α2 : Type u_2}\n    {f : (a_1 : α1) → some a = some a_1 → Option α2}\n    : (some a).pbind f = f a rfl\n```\nNow, suppose we have a goal containing the term `c.pbind g` and the equivalence class\n`{c, some b}`. The E-matching module generates the instance\n```\n(some b).pbind (cast ⋯ g)\n```\nThe `cast` is necessary because `g`'s type contains `c` instead of `some b.\nThis `cast` problematic because we don't have a systematic way of pushing casts over functions\nto its arguments. Moreover, heterogeneous equality is not effective because the following theorem\nis not provable in DTT:\n```\ntheorem hcongr (h₁ : f ≍ g) (h₂ : a ≍ b)  : f a ≍ g b := ...\n```\nThe standard solution is to generalize the theorem above and write it as\n```\ntheorem Option.pbind_some'\n        {α1 : Type u_1} {a : α1} {α2 : Type u_2}\n        {x : Option α1}\n        {f : (a_1 : α1) → x = some a_1 → Option α2}\n        (h : x = some a)\n        : x.pbind f = f a h := by\n  subst h\n  apply Option.pbind_some\n```\nInternally, we use this gadget to mark the E-matching pattern as\n```\n(genPattern h x (some a)).pbind f\n```\nThis pattern is matched in the same way we match `(some a).pbind f`, but it saves the proof\nfor the actual term to the `some`-application in `f`, and the actual term in `x`.\n\nIn the example above, `c.pbind g` also matches the pattern `(genPattern h x (some a)).pbind f`,\nand stores `c` in `x`, `b` in `a`, and the proof that `c = some b` in `h`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Attr.html#Lean.Grind.genPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">genPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_h</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">_val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"}]}