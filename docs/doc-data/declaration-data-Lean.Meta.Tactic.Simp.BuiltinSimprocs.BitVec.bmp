{"name":"Lean.Meta.Tactic.Simp.BuiltinSimprocs.BitVec","instances":[{"typeNames":["Eq"],"name":"BitVec.instDecidableEqLiteral","className":"Decidable"},{"typeNames":["BitVec.Literal"],"name":"BitVec.instReprLiteral","className":"Repr"}],"imports":["Lean.Meta.LitValues","Lean.Meta.Tactic.Simp.BuiltinSimprocs.Nat","Lean.Meta.Tactic.Simp.BuiltinSimprocs.Int","Init.Data.BitVec.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L350-L351","name":"BitVec.reduceShiftRightShiftRight","line":350,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftRightShiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftRightShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftRightShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L348-L349","name":"BitVec.reduceShiftLeftShiftLeft","line":348,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftShiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftShiftLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftLeftShiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L331-L346","name":"BitVec.reduceShiftShift","line":331,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftShift","doc":"Helper function for reducing `(x <<< i) <<< j` (and `(x >>> i) >>> j`) where `i` and `j` are\nnatural number literals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftShift\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftShift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">thmName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L326-L329","name":"BitVec.reduceBitVecToFin","line":326,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecToFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecToFin\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBitVecToFin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L320-L324","name":"BitVec.reduceBitVecOfFin","line":320,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecOfFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecOfFin\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBitVecOfFin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L314-L318","name":"BitVec.reduceAllOnes","line":314,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAllOnes","doc":"Simplification procedure for `allOnes` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAllOnes\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAllOnes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L311-L312","name":"BitVec.reduceSignExtend","line":311,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSignExtend","doc":"Simplification procedure for `signExtend` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSignExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSignExtend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L308-L309","name":"BitVec.reduceZeroExtend","line":308,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceZeroExtend","doc":"Simplification procedure for `zeroExtend` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceZeroExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceZeroExtend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L305-L306","name":"BitVec.reduceSetWidth","line":305,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth","doc":"Simplification procedure for `setWidth` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSetWidth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L298-L303","name":"BitVec.reduceReplicate","line":298,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceReplicate","doc":"Simplification procedure for `replicate` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceReplicate\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceReplicate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L290-L296","name":"BitVec.reduceExtracLsb'","line":290,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtracLsb'","doc":"Simplification procedure for `extractLsb'` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtracLsb'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceExtracLsb'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L283-L288","name":"BitVec.reduceShiftLeftZeroExtend","line":283,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftZeroExtend","doc":"Simplification procedure for `shiftLeftZeroExtend` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftZeroExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftLeftZeroExtend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L273-L281","name":"BitVec.reduceSetWidth'","line":273,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth'","doc":"Simplification procedure for `setWidth'` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSetWidth'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L269-L271","name":"BitVec.reduceSLE","line":269,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLE","doc":"Simplification procedure for signed less than or equal `sle` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L266-L268","name":"BitVec.reduceSLT","line":266,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLT","doc":"Simplification procedure for signed less than `slt` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L263-L265","name":"BitVec.reduceULE","line":263,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULE","doc":"Simplification procedure for unsigned less than or equal `ule` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceULE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L260-L262","name":"BitVec.reduceULT","line":260,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULT","doc":"Simplification procedure for unsigned less than `ult` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceULT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L257-L258","name":"BitVec.reduceGE","line":257,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGE","doc":"Simplification procedure for `≥` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L255-L256","name":"BitVec.reduceGT","line":255,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGT","doc":"Simplification procedure for `>` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L253-L254","name":"BitVec.reduceLE","line":253,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLE","doc":"Simplification procedure for `≤` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L251-L252","name":"BitVec.reduceLT","line":251,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLT","doc":"Simplification procedure for `<` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L247-L249","name":"BitVec.reduceBNe","line":247,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBNe","doc":"Simplification procedure for `!=` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBNe\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBNe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L244-L246","name":"BitVec.reduceBEq","line":244,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBEq","doc":"Simplification procedure for `==` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBEq\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L242-L243","name":"BitVec.reduceNe","line":242,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNe","doc":"Simplification procedure for `≠` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNe\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceNe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L240-L241","name":"BitVec.reduceEq","line":240,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceEq","doc":"Simplification procedure for `=` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceEq\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L231-L238","name":"BitVec.reduceOfNat","line":231,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfNat","doc":"Simplification procedure for ensuring `BitVec.ofNat` literals are normalized. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L224-L229","name":"BitVec.reduceOfInt","line":224,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfInt","doc":"Simplification procedure for `BitVec.ofInt`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceOfInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L218-L222","name":"BitVec.reduceToInt","line":218,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToInt","doc":"Simplification procedure for `BitVec.toInt`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceToInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L212-L216","name":"BitVec.reduceToNat","line":212,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToNat","doc":"Simplification procedure for `BitVec.toNat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceToNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L205-L210","name":"BitVec.reduceCast","line":205,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceCast","doc":"Simplification procedure for casting `BitVec`s along an equality of the size. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceCast\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L198-L203","name":"BitVec.reduceAppend","line":198,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAppend","doc":"Simplification procedure for append on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAppend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L194-L196","name":"BitVec.reduceRotateRight","line":194,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateRight","doc":"Simplification procedure for rotate right on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceRotateRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L191-L193","name":"BitVec.reduceRotateLeft","line":191,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateLeft","doc":"Simplification procedure for rotate left on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceRotateLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L188-L190","name":"BitVec.reduceHShiftRight'","line":188,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight'","doc":"Simplification procedure for converting a shift with a bit-vector literal into a natural number literal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftRight'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L185-L187","name":"BitVec.reduceHShiftRight","line":185,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight","doc":"Simplification procedure for shift right on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L182-L184","name":"BitVec.reduceHShiftLeft'","line":182,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft'","doc":"Simplification procedure for converting a shift with a bit-vector literal into a natural number literal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftLeft'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L179-L181","name":"BitVec.reduceHShiftLeft","line":179,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft","doc":"Simplification procedure for shift left on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L176-L178","name":"BitVec.reduceSShiftRight","line":176,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSShiftRight","doc":"Simplification procedure for signed shift right on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L173-L175","name":"BitVec.reduceUShiftRight","line":173,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUShiftRight","doc":"Simplification procedure for unsigned shift right on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L170-L172","name":"BitVec.reduceShiftLeft","line":170,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeft","doc":"Simplification procedure for shift left on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L162-L168","name":"BitVec.reduceGetElem","line":162,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetElem","doc":"Simplification procedure for `getElem`  on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetElem\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGetElem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L159-L160","name":"BitVec.reduceClz","line":159,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceClz","doc":"Simplification procedure for `clz` (count leading zeros) on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceClz\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceClz</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L157-L158","name":"BitVec.reduceGetMsb","line":157,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetMsb","doc":"Simplification procedure for `getMsb` (most significant bit) on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetMsb\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGetMsb</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L155-L156","name":"BitVec.reduceGetLsb","line":155,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetLsb","doc":"Simplification procedure for `getLsb` (lowest significant bit) on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetLsb\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGetLsb</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L153-L154","name":"BitVec.reduceSMTSDiv","line":153,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTSDiv","doc":"Simplification procedure for signed division of `BitVec`s using the SMT-LIB conventions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTSDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSMTSDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L151-L152","name":"BitVec.reduceSDiv","line":151,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSDiv","doc":"Simplification procedure for signed t-division of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L149-L150","name":"BitVec.reduceSRem","line":149,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSRem","doc":"Simplification procedure for signed remainder of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSRem\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSRem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L147-L148","name":"BitVec.reduceSMod","line":147,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMod","doc":"Simplification procedure for the signed modulo operation on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMod\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L145-L146","name":"BitVec.reduceSMTUDiv","line":145,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTUDiv","doc":"Simplification procedure for division of `BitVec`s using the SMT-LIB conventions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTUDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSMTUDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L143-L144","name":"BitVec.reduceUDiv","line":143,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUDiv","doc":"Simplification procedure for unsigned division of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L141-L142","name":"BitVec.reduceUMod","line":141,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUMod","doc":"Simplification procedure for the unsigned modulo operation on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUMod\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L139-L140","name":"BitVec.reduceMod","line":139,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMod","doc":"Simplification procedure for the modulo operation on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMod\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L137-L138","name":"BitVec.reduceDiv","line":137,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceDiv","doc":"Simplification procedure for division of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L135-L136","name":"BitVec.reduceSub","line":135,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSub","doc":"Simplification procedure for subtraction of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSub\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L133-L134","name":"BitVec.reduceMul","line":133,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMul","doc":"Simplification procedure for multiplication of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMul\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L131-L132","name":"BitVec.reduceAdd","line":131,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAdd","doc":"Simplification procedure for addition of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAdd\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L129-L130","name":"BitVec.reduceXOr","line":129,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceXOr","doc":"Simplification procedure for bitwise xor of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceXOr\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceXOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L127-L128","name":"BitVec.reduceOr","line":127,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOr","doc":"Simplification procedure for bitwise or of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOr\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L125-L126","name":"BitVec.reduceAnd","line":125,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAnd","doc":"Simplification procedure for bitwise and of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAnd\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L123-L124","name":"BitVec.reduceAbs","line":123,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAbs","doc":"Simplification procedure for absolute value of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAbs\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAbs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L120-L122","name":"BitVec.reduceNot","line":120,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNot","doc":"Simplification procedure for bitwise not of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNot\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceNot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L118-L119","name":"BitVec.reduceNeg","line":118,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNeg","doc":"Simplification procedure for negation of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNeg\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L106-L115","name":"BitVec.reduceBoolPred","line":106,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBoolPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBoolPred\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBoolPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L92-L104","name":"BitVec.reduceBinPred","line":92,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBinPred","doc":"Helper function for reducing bitvector predicates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBinPred\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBinPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L82-L90","name":"BitVec.reduceShiftWithBitVecLit","line":82,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftWithBitVecLit","doc":"Helper function for reducing `x <<< i` and `x >>> i` where `i` is a bitvector literal,\ninto one that is a natural number literal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftWithBitVecLit\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftWithBitVecLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L72-L80","name":"BitVec.reduceShift","line":72,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShift","doc":"Helper function for reducing bitvector functions such as `shiftLeft` and `rotateRight`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShift\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L61-L70","name":"BitVec.reduceGetBit","line":61,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetBit","doc":"Helper function for reducing bitvector functions such as `getLsb` and `getMsb`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetBit\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGetBit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L53-L59","name":"BitVec.reduceExtend","line":53,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtend","doc":"Simplification procedure for `setWidth`, `zeroExtend` and `signExtend` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceExtend</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L40-L51","name":"BitVec.reduceBin","line":40,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBin","doc":"Helper function for reducing homogeneous binary bitvector operators.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBin\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L31-L38","name":"BitVec.reduceUnary","line":31,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUnary","doc":"Helper function for reducing homogeneous unary bitvector operators.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUnary\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUnary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L23-L29","name":"BitVec.fromExpr?","line":23,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.fromExpr?","doc":"Try to convert `OfNat.ofNat`/`BitVec.OfNat` application into a\nbitvector literal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.fromExpr?\"><span class=\"name\">BitVec</span>.<span class=\"name\">fromExpr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L21-L21","name":"BitVec.instReprLiteral","line":21,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instReprLiteral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instReprLiteral\"><span class=\"name\">BitVec</span>.<span class=\"name\">instReprLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L21-L21","name":"BitVec.instDecidableEqLiteral","line":21,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instDecidableEqLiteral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instDecidableEqLiteral\"><span class=\"name\">BitVec</span>.<span class=\"name\">instDecidableEqLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L20-L20","name":"BitVec.Literal.value","line":20,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.value","doc":"Actual value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.value\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.n\">n</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L18-L18","name":"BitVec.Literal.n","line":18,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.n","doc":"Size. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.n\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span>.<span class=\"name\">n</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L16-L16","name":"BitVec.Literal.mk","line":16,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.mk\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L15-L21","name":"BitVec.Literal","line":15,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal","doc":"A bit-vector literal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}