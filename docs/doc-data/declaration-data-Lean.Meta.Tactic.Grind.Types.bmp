{"name":"Lean.Meta.Tactic.Grind.Types","instances":[{"typeNames":["Lean.Meta.Grind.SplitSource"],"name":"Lean.Meta.Grind.instInhabitedSplitSource","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.CongrTheoremCacheKey"],"name":"Lean.Meta.Grind.instBEqCongrTheoremCacheKey","className":"BEq"},{"typeNames":["Lean.Meta.Grind.CongrTheoremCacheKey"],"name":"Lean.Meta.Grind.instHashableCongrTheoremCacheKey","className":"Hashable"},{"typeNames":["Lean.Meta.Grind.EMatchTheoremTrace"],"name":"Lean.Meta.Grind.instBEqEMatchTheoremTrace","className":"BEq"},{"typeNames":["Lean.Meta.Grind.EMatchTheoremTrace"],"name":"Lean.Meta.Grind.instHashableEMatchTheoremTrace","className":"Hashable"},{"typeNames":["Lean.Meta.Grind.Trace"],"name":"Lean.Meta.Grind.instInhabitedTrace","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Counters"],"name":"Lean.Meta.Grind.instInhabitedCounters","className":"Inhabited"},{"typeNames":["_private.Lean.Meta.Tactic.Grind.Types.0.Lean.Meta.Grind.MethodsRef"],"name":"Lean.Meta.Grind.instNonemptyMethodsRef","className":"Nonempty"},{"typeNames":["Lean.Meta.Grind.ENode"],"name":"Lean.Meta.Grind.instInhabitedENode","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.ENode"],"name":"Lean.Meta.Grind.instReprENode","className":"Repr"},{"typeNames":["Lean.Meta.Grind.CongrKey"],"name":"Lean.Meta.Grind.instHashableCongrKey","className":"Hashable"},{"typeNames":["Lean.Meta.Grind.CongrKey"],"name":"Lean.Meta.Grind.instBEqCongrKey","className":"BEq"},{"typeNames":["Lean.Meta.Grind.PreInstance"],"name":"Lean.Meta.Grind.instHashablePreInstance","className":"Hashable"},{"typeNames":["Lean.Meta.Grind.PreInstance"],"name":"Lean.Meta.Grind.instBEqPreInstance","className":"BEq"},{"typeNames":["Lean.Meta.Grind.NewRawFact"],"name":"Lean.Meta.Grind.instInhabitedNewRawFact","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Canon.State"],"name":"Lean.Meta.Grind.Canon.instInhabitedState","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.CaseTrace"],"name":"Lean.Meta.Grind.instInhabitedCaseTrace","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.EMatch.State"],"name":"Lean.Meta.Grind.EMatch.instInhabitedState","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.SplitInfo"],"name":"Lean.Meta.Grind.instInhabitedSplitInfo","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.SplitInfo"],"name":"Lean.Meta.Grind.instHashableSplitInfo","className":"Hashable"},{"typeNames":["Lean.Meta.Grind.SplitInfo"],"name":"Lean.Meta.Grind.instBEqSplitInfo","className":"BEq"},{"typeNames":["Lean.Meta.Grind.Split.State"],"name":"Lean.Meta.Grind.Split.instInhabitedState","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Clean.State"],"name":"Lean.Meta.Grind.Clean.instInhabitedState","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Goal"],"name":"Lean.Meta.Grind.instInhabitedGoal","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Methods"],"name":"Lean.Meta.Grind.instInhabitedMethods","className":"Inhabited"}],"imports":["Init.Grind.Tactics","Init.Data.Queue","Std.Data.TreeSet","Lean.HeadIndex","Lean.Meta.Basic","Lean.Meta.CongrTheorems","Lean.Meta.AbstractNestedProofs","Lean.Meta.Tactic.Simp.Types","Lean.Meta.Tactic.Util","Lean.Meta.Tactic.Ext","Lean.Meta.Tactic.Grind.ExprPtr","Lean.Meta.Tactic.Grind.AlphaShareCommon","Lean.Meta.Tactic.Grind.Attr","Lean.Meta.Tactic.Grind.ExtAttr","Lean.Meta.Tactic.Grind.Cases","Lean.Meta.Tactic.Grind.Arith.Types","Lean.Meta.Tactic.Grind.EMatchTheorem"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1556-L1566","name":"Lean.Meta.Grind.withoutModifyingState","line":1556,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withoutModifyingState","doc":"Helper function for executing `x` with a fresh `newFacts` and without modifying\nthe goal state.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withoutModifyingState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">withoutModifyingState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1550-L1554","name":"Lean.Meta.Grind.addLookaheadCandidate","line":1550,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addLookaheadCandidate","doc":"Add a new lookahead candidate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addLookaheadCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addLookaheadCandidate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sinfo</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1542-L1548","name":"Lean.Meta.Grind.synthesizeInstanceAndAssign","line":1542,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.synthesizeInstanceAndAssign","doc":"Helper function for instantiating a type class `type`, and\nthen using the result to perform `isDefEq x val`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.synthesizeInstanceAndAssign\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">synthesizeInstanceAndAssign</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1525-L1540","name":"Lean.Meta.Grind.getExtTheorems","line":1525,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getExtTheorems","doc":"Returns extensionality theorems for the given type if available.\nIf `Config.ext` is `false`, the result is `#[]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getExtTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getExtTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">Ext.ExtTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1515-L1523","name":"Lean.Meta.Grind.addSplitCandidate","line":1515,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addSplitCandidate","doc":"Inserts `e` into the list of case-split candidates if it was not inserted before. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addSplitCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addSplitCandidate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sinfo</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1497-L1505","name":"Lean.Meta.Grind.markCaseSplitAsResolved","line":1497,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markCaseSplitAsResolved","doc":"Marks `e` as a case-split that does not need to be performed anymore.\nRemark: we currently use this feature to disable `match`-case-splits.\nRemark: we also use this feature to record the case-splits that have already been performed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markCaseSplitAsResolved\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">markCaseSplitAsResolved</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1493-L1495","name":"Lean.Meta.Grind.isResolvedCaseSplit","line":1493,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isResolvedCaseSplit","doc":"Returns `true` if `e` is a case-split that does not need to be performed anymore. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isResolvedCaseSplit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isResolvedCaseSplit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1485-L1491","name":"Lean.Meta.Grind.isKnownCaseSplit","line":1485,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isKnownCaseSplit","doc":"Returns `true` if `s` has been already added to the case-split list at one point.\nRemark: this function returns `true` even if the split has already been resolved\nand is not in the list anymore.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isKnownCaseSplit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isKnownCaseSplit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1481-L1483","name":"Lean.Meta.Grind.getEqcs","line":1481,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getEqcs","doc":"Returns all equivalence classes in the current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getEqcs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getEqcs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1469-L1479","name":"Lean.Meta.Grind.Goal.getEqcs","line":1469,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getEqcs","doc":"Returns all equivalence classes in the current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getEqcs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getEqcs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sort</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1465-L1467","name":"Lean.Meta.Grind.getEqc","line":1465,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getEqc","doc":"Returns expressions in the given expression equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getEqc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getEqc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sort</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1457-L1463","name":"Lean.Meta.Grind.Goal.getEqc.go","line":1457,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getEqc.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getEqc.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getEqc</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">first </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1446-L1463","name":"Lean.Meta.Grind.Goal.getEqc","line":1446,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getEqc","doc":"Returns expressions in the given expression equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getEqc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getEqc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sort</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1440-L1444","name":"Lean.Meta.Grind.Goal.getGeneration","line":1440,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getGeneration","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getGeneration\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getGeneration</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1436-L1438","name":"Lean.Meta.Grind.applyFallback","line":1436,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.applyFallback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.applyFallback\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">applyFallback</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1433-L1434","name":"Lean.Meta.Grind.propagateDown","line":1433,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateDown","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateDown\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateDown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1430-L1431","name":"Lean.Meta.Grind.propagateUp","line":1430,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateUp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1427-L1428","name":"Lean.Meta.Grind.getMethods","line":1427,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMethods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getMethods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1421-L1422","name":"Lean.Meta.Grind.Methods.toMethodsRef","line":1421,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.toMethodsRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.toMethodsRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span>.<span class=\"name\">toMethodsRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#_private.Lean.Meta.Tactic.Grind.Types.0.Lean.Meta.Grind.MethodsRef\">Lean.Meta.Grind.MethodsRef✝</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1419-L1419","name":"Lean.Meta.Grind.instInhabitedMethods","line":1419,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedMethods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedMethods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1418-L1418","name":"Lean.Meta.Grind.Methods.fallback","line":1418,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.fallback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.fallback\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span>.<span class=\"name\">fallback</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Fallback\">Fallback</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1417-L1417","name":"Lean.Meta.Grind.Methods.propagateDown","line":1417,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.propagateDown","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.propagateDown\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span>.<span class=\"name\">propagateDown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Propagator\">Propagator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1416-L1416","name":"Lean.Meta.Grind.Methods.propagateUp","line":1416,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.propagateUp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.propagateUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span>.<span class=\"name\">propagateUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Propagator\">Propagator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1415-L1415","name":"Lean.Meta.Grind.Methods.mk","line":1415,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">propagateUp </span><span class=\"fn\">propagateDown</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Propagator\">Propagator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Fallback\">Fallback</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1415-L1419","name":"Lean.Meta.Grind.Methods","line":1415,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1413-L1413","name":"Lean.Meta.Grind.Fallback","line":1413,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Fallback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Fallback\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Fallback</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1412-L1412","name":"Lean.Meta.Grind.Propagator","line":1412,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Propagator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Propagator\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Propagator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1406-L1410","name":"Lean.Meta.Grind.forEachEqcRoot","line":1406,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachEqcRoot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachEqcRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">forEachEqcRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1399-L1404","name":"Lean.Meta.Grind.filterENodes","line":1399,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.filterENodes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.filterENodes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">filterENodes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1394-L1397","name":"Lean.Meta.Grind.forEachENode","line":1394,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachENode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">forEachENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1382-L1392","name":"Lean.Meta.Grind.foldEqc","line":1382,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.foldEqc","doc":"Folds using `f` and `init` over the equivalence class containing `e` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.foldEqc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">foldEqc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1373-L1380","name":"Lean.Meta.Grind.traverseEqc","line":1373,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.traverseEqc","doc":"Executes `f` to each term in the equivalence class containing `e` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.traverseEqc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">traverseEqc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1369-L1371","name":"Lean.Meta.Grind.getExprs","line":1369,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getExprs","doc":"Returns all enodes in the goal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getExprs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getExprs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1359-L1367","name":"Lean.Meta.Grind.closeGoal","line":1359,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.closeGoal","doc":"Closes the current goal using the given proof of `False` and\nmarks it as inconsistent if it is not already marked so.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.closeGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">closeGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">falseProof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1348-L1357","name":"Lean.MVarId.assignFalseProof","line":1348,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.MVarId.assignFalseProof","doc":"Assign the `mvarId` using the given proof of `False`.\nIf type of `mvarId` is not `False`, then use `False.elim`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.MVarId.assignFalseProof\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">assignFalseProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">falseProof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1342-L1346","name":"Lean.Meta.Grind.markAsInconsistent","line":1342,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsInconsistent","doc":"Marks current goal as inconsistent without assigning `mvarId`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsInconsistent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">markAsInconsistent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1335-L1340","name":"Lean.Meta.Grind.mkEqBoolFalseProof","line":1335,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqBoolFalseProof","doc":"Returns a proof that `a = Bool.false`.\nIt assumes `a` and `Bool.false` are in the same equivalence class.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqBoolFalseProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqBoolFalseProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1328-L1333","name":"Lean.Meta.Grind.mkEqBoolTrueProof","line":1328,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqBoolTrueProof","doc":"Returns a proof that `a = Bool.true`.\nIt assumes `a` and `Bool.true` are in the same equivalence class.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqBoolTrueProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqBoolTrueProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1321-L1326","name":"Lean.Meta.Grind.mkEqFalseProof","line":1321,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqFalseProof","doc":"Returns a proof that `a = False`.\nIt assumes `a` and `False` are in the same equivalence class.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqFalseProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqFalseProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1314-L1319","name":"Lean.Meta.Grind.mkEqTrueProof","line":1314,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqTrueProof","doc":"Returns a proof that `a = True`.\nIt assumes `a` and `True` are in the same equivalence class.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqTrueProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqTrueProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1304-L1312","name":"Lean.Meta.Grind.mkEqHEqProof","line":1304,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqHEqProof","doc":"Returns a proof that `a = b` if they have the same type. Otherwise, returns a proof of `a ≍ b`.\nIt assumes `a` and `b` are in the same equivalence class.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqHEqProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqHEqProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1301-L1302","name":"Lean.Meta.Grind.processNewFacts","line":1301,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.processNewFacts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.processNewFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">processNewFacts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1297-L1298","name":"Lean.Meta.Grind.internalize","line":1297,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.internalize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.internalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">internalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parent?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1288-L1294","name":"Lean.Meta.Grind.mkHEqProof","line":1288,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkHEqProof","doc":"Returns a proof that `a ≍ b`.\nIt assumes `a` and `b` are in the same equivalence class.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkHEqProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkHEqProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1280-L1286","name":"Lean.Meta.Grind.mkEqProof","line":1280,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqProof","doc":"Returns a proof that `a = b`.\nIt assumes `a` and `b` are in the same equivalence class, and have the same type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1276-L1278","name":"Lean.Meta.Grind.isInconsistent","line":1276,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isInconsistent","doc":"Return `true` if the goal is inconsistent. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isInconsistent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isInconsistent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1270-L1274","name":"Lean.Meta.Grind.getCongrRoot","line":1270,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getCongrRoot","doc":"Returns the root of the congruence class containing `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getCongrRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getCongrRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1266-L1268","name":"Lean.Meta.Grind.isCongrRoot","line":1266,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isCongrRoot","doc":"Returns `true` is `e` is the root of its congruence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isCongrRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isCongrRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1253-L1264","name":"Lean.Meta.Grind.markAsLinarithTerm","line":1253,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsLinarithTerm","doc":"Marks `e` as a term of interest to the linarith module.\nIf the root of `e`s equivalence class has already a term of interest,\na new equality is propagated to the linarith module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsLinarithTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">markAsLinarithTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1246-L1251","name":"Lean.Meta.Grind.propagateLinarithDiseqs","line":1246,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateLinarithDiseqs","doc":"Traverses disequalities in `parents`, and propagate the ones relevant to the\nlinarith module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateLinarithDiseqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateLinarithDiseqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parents</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\">ParentSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1243-L1244","name":"Lean.Meta.Grind.propagateLinarithDiseq.get?","line":1243,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateLinarithDiseq.get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateLinarithDiseq.get?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateLinarithDiseq</span>.<span class=\"name\">get?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1233-L1244","name":"Lean.Meta.Grind.propagateLinarithDiseq","line":1233,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateLinarithDiseq","doc":"Given `lhs` and `rhs` that are known to be disequal, checks whether\n`lhs` and `rhs` have linarith terms `e₁` and `e₂` attached to them,\nand invokes process `Arith.Linear.processNewDiseq e₁ e₂`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateLinarithDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateLinarithDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1226-L1231","name":"Lean.Meta.Grind.Arith.Linear.processNewDiseq","line":1226,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.Linear.processNewDiseq","doc":"Notifies the linarith module that `a ≠ b` where\n`a` and `b` are terms that have been internalized by this module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.Linear.processNewDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">processNewDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1219-L1224","name":"Lean.Meta.Grind.Arith.Linear.processNewEq","line":1219,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.Linear.processNewEq","doc":"Notifies the linarith module that `a = b` where\n`a` and `b` are terms that have been internalized by this module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.Linear.processNewEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">processNewEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1206-L1217","name":"Lean.Meta.Grind.markAsCommRingTerm","line":1206,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsCommRingTerm","doc":"Marks `e` as a term of interest to the ring module.\nIf the root of `e`s equivalence class has already a term of interest,\na new equality is propagated to the ring module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsCommRingTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">markAsCommRingTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1199-L1204","name":"Lean.Meta.Grind.propagateCommRingDiseqs","line":1199,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCommRingDiseqs","doc":"Traverses disequalities in `parents`, and propagate the ones relevant to the\ncomm ring module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCommRingDiseqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateCommRingDiseqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parents</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\">ParentSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1196-L1197","name":"Lean.Meta.Grind.propagateCommRingDiseq.get?","line":1196,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCommRingDiseq.get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCommRingDiseq.get?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateCommRingDiseq</span>.<span class=\"name\">get?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1186-L1197","name":"Lean.Meta.Grind.propagateCommRingDiseq","line":1186,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCommRingDiseq","doc":"Given `lhs` and `rhs` that are known to be disequal, checks whether\n`lhs` and `rhs` have ring terms `e₁` and `e₂` attached to them,\nand invokes process `Arith.CommRing.processNewDiseq e₁ e₂`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCommRingDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateCommRingDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1179-L1184","name":"Lean.Meta.Grind.Arith.CommRing.processNewDiseq","line":1179,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.CommRing.processNewDiseq","doc":"Notifies the comm ring module that `a ≠ b` where\n`a` and `b` are terms that have been internalized by this module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.CommRing.processNewDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">processNewDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1172-L1177","name":"Lean.Meta.Grind.Arith.CommRing.processNewEq","line":1172,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.CommRing.processNewEq","doc":"Notifies the comm ring module that `a = b` where\n`a` and `b` are terms that have been internalized by this module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.CommRing.processNewEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">processNewEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1159-L1170","name":"Lean.Meta.Grind.markAsCutsatTerm","line":1159,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsCutsatTerm","doc":"Marks `e` as a term of interest to the cutsat module.\nIf the root of `e`s equivalence class has already a term of interest,\na new equality is propagated to the cutsat module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsCutsatTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">markAsCutsatTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1152-L1157","name":"Lean.Meta.Grind.propagateCutsatDiseqs","line":1152,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCutsatDiseqs","doc":"Traverses disequalities in `parents`, and propagate the ones relevant to the\ncutsat module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCutsatDiseqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateCutsatDiseqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parents</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\">ParentSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1146-L1150","name":"Lean.Meta.Grind.propagateCutsatDiseq.get?","line":1146,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCutsatDiseq.get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCutsatDiseq.get?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateCutsatDiseq</span>.<span class=\"name\">get?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1134-L1150","name":"Lean.Meta.Grind.propagateCutsatDiseq","line":1134,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCutsatDiseq","doc":"Given `lhs` and `rhs` that are known to be disequal, checks whether\n`lhs` and `rhs` have cutsat terms `e₁` and `e₂` attached to them,\nand invokes process `Arith.Cutsat.processNewDiseq e₁ e₂`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateCutsatDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateCutsatDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1124-L1132","name":"Lean.Meta.Grind.forEachDiseq","line":1124,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachDiseq","doc":"For each equality `b = c` in `parents`, executes `k b c` IF\n- `b = c` is equal to `False`, and\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">forEachDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parents</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\">ParentSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1118-L1122","name":"Lean.Meta.Grind.hasType","line":1118,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.hasType","doc":"Returns `true` if type of `t` is definitionally equal to `α`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.hasType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">hasType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1114-L1116","name":"Lean.Meta.Grind.isNum","line":1114,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isNum","doc":"Returns `true` if `e` is a numeral supported by cutsat. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isNum\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isNum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1106-L1112","name":"Lean.Meta.Grind.isIntNum","line":1106,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isIntNum","doc":"Returns `true` if `e` is a numeral and has type `Int`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isIntNum\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isIntNum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1100-L1104","name":"Lean.Meta.Grind.isNonnegIntNum","line":1100,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isNonnegIntNum","doc":"Returns `true` if `e` is a nonegative numeral and has type `Int`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isNonnegIntNum\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isNonnegIntNum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1093-L1098","name":"Lean.Meta.Grind.Arith.Cutsat.processNewDiseq","line":1093,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.Cutsat.processNewDiseq","doc":"Notifies the cutsat module that `a ≠ b` where\n`a` and `b` are terms that have been internalized by this module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.Cutsat.processNewDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">processNewDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1086-L1091","name":"Lean.Meta.Grind.Arith.Cutsat.processNewEq","line":1086,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.Cutsat.processNewEq","doc":"Notifies the cutsat module that `a = b` where\n`a` and `b` are terms that have been internalized by this module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.Cutsat.processNewEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">processNewEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1074-L1084","name":"Lean.Meta.Grind.markAsOffsetTerm","line":1074,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsOffsetTerm","doc":"Marks `e` as a term of interest to the offset constraint module.\nIf the root of `e`s equivalence class has already a term of interest,\na new equality is propagated to the offset module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsOffsetTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">markAsOffsetTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1068-L1072","name":"Lean.Meta.Grind.isNatNum","line":1068,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isNatNum","doc":"Returns `true` if `e` is a numeral and has type `Nat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isNatNum\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isNatNum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1061-L1066","name":"Lean.Meta.Grind.Arith.Offset.processNewEq","line":1061,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.Offset.processNewEq","doc":"Notifies the offset constraint module that `a = b` where\n`a` and `b` are terms that have been internalized by this module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Arith.Offset.processNewEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">processNewEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1055-L1059","name":"Lean.Meta.Grind.setENode","line":1055,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.setENode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.setENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">setENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1045-L1053","name":"Lean.Meta.Grind.mkENode","line":1045,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkENode","doc":"Creates an `ENode` for `e` if one does not already exist.\nThis method assumes `e` has been hashconsed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1028-L1043","name":"Lean.Meta.Grind.mkENodeCore","line":1028,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkENodeCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkENodeCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkENodeCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">interpreted </span><span class=\"fn\">ctor</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1018-L1026","name":"Lean.Meta.Grind.copyParentsTo","line":1018,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.copyParentsTo","doc":"Copy `parents` to the parents of `root`.\n`root` must be the root of its equivalence class.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.copyParentsTo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">copyParentsTo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parents</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\">ParentSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1012-L1016","name":"Lean.Meta.Grind.resetParentsOf","line":1012,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.resetParentsOf","doc":"Removes the entry `e ↦ parents` from the parent map.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.resetParentsOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">resetParentsOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L1003-L1010","name":"Lean.Meta.Grind.getParents","line":1003,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getParents","doc":"Returns the set of expressions `e` is a child of, or an expression in\n`e`s equivalence class is a child of.\nThe information is only up to date if `e` is the root (aka canonical representative) of the equivalence class.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getParents\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getParents</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\">ParentSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L994-L1001","name":"Lean.Meta.Grind.registerParent","line":994,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.registerParent","doc":"Records that `parent` is a parent of `child`. This function actually stores the\ninformation in the root (aka canonical representative) of `child`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.registerParent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">registerParent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parent </span><span class=\"fn\">child</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L990-L992","name":"Lean.Meta.Grind.pushEqBoolFalse","line":990,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqBoolFalse","doc":"Pushes `a = Bool.false` with `proof` to `newEqs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqBoolFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqBoolFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L986-L988","name":"Lean.Meta.Grind.pushEqBoolTrue","line":986,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqBoolTrue","doc":"Pushes `a = Bool.true` with `proof` to `newEqs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqBoolTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqBoolTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L982-L984","name":"Lean.Meta.Grind.pushEqFalse","line":982,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqFalse","doc":"Pushes `a = False` with `proof` to `newEqs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L978-L980","name":"Lean.Meta.Grind.pushEqTrue","line":978,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqTrue","doc":"Pushes `a = True` with `proof` to `newEqs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L974-L976","name":"Lean.Meta.Grind.pushHEq","line":974,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushHEq","doc":"Pushes `lhs ≍ rhs` with `proof` to `newEqs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushHEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushHEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L970-L972","name":"Lean.Meta.Grind.pushEq","line":970,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEq","doc":"Pushes `lhs = rhs` with `proof` to `newEqs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L964-L968","name":"Lean.Meta.Grind.pushEqHEq","line":964,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqHEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqHEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqHEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L960-L962","name":"Lean.Meta.Grind.hasSameType","line":960,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.hasSameType","doc":"Return `true` if `a` and `b` have the same type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.hasSameType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">hasSameType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L941-L958","name":"Lean.Meta.Grind.pushEqCore","line":941,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqCore","doc":"If `isHEq` is `false`, it pushes `lhs = rhs` with `proof` to `newEqs`.\nOtherwise, it pushes `lhs ≍ rhs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isHEq</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L938-L939","name":"Lean.Meta.Grind.getTarget?","line":938,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getTarget?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getTarget?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getTarget?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L934-L936","name":"Lean.Meta.Grind.Goal.getTarget?","line":934,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getTarget?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getTarget?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getTarget?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L930-L932","name":"Lean.Meta.Grind.alreadyInternalized","line":930,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.alreadyInternalized","doc":"Returns `true` if `e` has already been internalized. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.alreadyInternalized\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">alreadyInternalized</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L926-L928","name":"Lean.Meta.Grind.getNext","line":926,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getNext","doc":"Returns the root element in the equivalence class of `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getNext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L922-L924","name":"Lean.Meta.Grind.Goal.getNext","line":922,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getNext","doc":"Returns the next element in the equivalence class of `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getNext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L914-L920","name":"Lean.Meta.Grind.Goal.getNext?","line":914,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getNext?","doc":"Returns the next element in the equivalence class of `e`\nif `e` has been internalized in the given goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getNext?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getNext?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L909-L912","name":"Lean.Meta.Grind.getRootENode?","line":909,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRootENode?","doc":"Returns the root enode in the equivalence class of `e` if it is in an equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRootENode?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getRootENode?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L905-L907","name":"Lean.Meta.Grind.getRootENode","line":905,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRootENode","doc":"Returns the root enode in the equivalence class of `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRootENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getRootENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L901-L903","name":"Lean.Meta.Grind.getRoot","line":901,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRoot","doc":"Returns the root element in the equivalence class of `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L897-L899","name":"Lean.Meta.Grind.Goal.getRoot","line":897,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getRoot","doc":"Returns the root element in the equivalence class of `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L893-L895","name":"Lean.Meta.Grind.getRoot?","line":893,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRoot?","doc":"Returns the root element in the equivalence class of `e` IF `e` has been internalized. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRoot?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getRoot?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L888-L891","name":"Lean.Meta.Grind.Goal.getRoot?","line":888,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getRoot?","doc":"Returns the root element in the equivalence class of `e` IF `e` has been internalized. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getRoot?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getRoot?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L883-L886","name":"Lean.Meta.Grind.isRoot","line":883,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isRoot","doc":"Returns `true` if the root of its equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L874-L881","name":"Lean.Meta.Grind.isEqv","line":874,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqv","doc":"Returns `true` if `a` and `b` are in the same equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L870-L872","name":"Lean.Meta.Grind.isEqBoolFalse","line":870,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqBoolFalse","doc":"Returns `true` if `e` is in the equivalence class of `Bool.false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqBoolFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isEqBoolFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L866-L868","name":"Lean.Meta.Grind.isEqBoolTrue","line":866,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqBoolTrue","doc":"Returns `true` if `e` is in the equivalence class of `Bool.true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqBoolTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isEqBoolTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L862-L864","name":"Lean.Meta.Grind.isEqFalse","line":862,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqFalse","doc":"Returns `true` if `e` is in the equivalence class of `False`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isEqFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L858-L860","name":"Lean.Meta.Grind.isEqTrue","line":858,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqTrue","doc":"Returns `true` if `e` is in the equivalence class of `True`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isEqTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L853-L856","name":"Lean.Meta.Grind.getGeneration","line":853,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getGeneration","doc":"Returns the generation of the given term. Is assumes it has been internalized "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getGeneration\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getGeneration</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L849-L851","name":"Lean.Meta.Grind.getENode","line":849,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getENode","doc":"Returns node associated with `e`. It assumes `e` has already been internalized. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L843-L847","name":"Lean.Meta.Grind.Goal.getENode","line":843,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getENode","doc":"Returns node associated with `e`. It assumes `e` has already been internalized. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L840-L841","name":"Lean.Meta.Grind.throwNonInternalizedExpr","line":840,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.throwNonInternalizedExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.throwNonInternalizedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">throwNonInternalizedExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L836-L838","name":"Lean.Meta.Grind.getENode?","line":836,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getENode?","doc":"Returns `some n` if `e` has already been \"internalized\" into the\nOtherwise, returns `none`s.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getENode?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getENode?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L829-L834","name":"Lean.Meta.Grind.Goal.getENode?","line":829,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getENode?","doc":"Returns `some n` if `e` has already been \"internalized\" into the\nOtherwise, returns `none`s.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getENode?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getENode?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L825-L827","name":"Lean.Meta.Grind.checkMaxEmatchExceeded","line":825,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxEmatchExceeded","doc":"Returns `true` if the maximum number of E-matching rounds has been reached. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxEmatchExceeded\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">checkMaxEmatchExceeded</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L821-L823","name":"Lean.Meta.Grind.checkMaxCaseSplit","line":821,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxCaseSplit","doc":"Returns `true` if the maximum number of case-splits has been reached. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxCaseSplit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">checkMaxCaseSplit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L817-L819","name":"Lean.Meta.Grind.checkMaxInstancesExceeded","line":817,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxInstancesExceeded","doc":"Returns `true` if the maximum number of instances has been reached. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxInstancesExceeded\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">checkMaxInstancesExceeded</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L811-L815","name":"Lean.Meta.Grind.addTheoremInstance","line":811,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addTheoremInstance","doc":"Adds a new theorem instance produced using E-matching. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addTheoremInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addTheoremInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thm</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof </span><span class=\"fn\">prop</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L802-L809","name":"Lean.Meta.Grind.addNewRawFact","line":802,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addNewRawFact","doc":"Adds a new fact `prop` with proof `proof` to the queue for preprocessing and the assertion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addNewRawFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addNewRawFact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof </span><span class=\"fn\">prop</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L791-L800","name":"Lean.Meta.Grind.markTheoremInstance","line":791,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markTheoremInstance","doc":"A helper function used to mark a theorem instance found by the E-matching module.\nIt returns `true` if it is a new instance and `false` otherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markTheoremInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">markTheoremInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L783-L789","name":"Lean.Meta.Grind.«doElemTrace_goal[_]__»","line":783,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.«doElemTrace_goal[_]__»","doc":"Macro similar to `trace[...]`, but it includes the trace message `trace[grind] \"working on <current goal>\"`\nif the tag has changed since the last trace message.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.«doElemTrace_goal[_]__»\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">«doElemTrace_goal[_]__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L772-L777","name":"Lean.Meta.Grind.updateLastTag","line":772,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.updateLastTag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.updateLastTag\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">updateLastTag</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L769-L770","name":"Lean.Meta.Grind.GoalM.run'","line":769,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.run'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.run'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GoalM</span>.<span class=\"name\">run'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L766-L767","name":"Lean.Meta.Grind.GoalM.run","line":766,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GoalM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L763-L764","name":"Lean.Meta.Grind.GoalM.runCore","line":763,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.runCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.runCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GoalM</span>.<span class=\"name\">runCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L761-L761","name":"Lean.Meta.Grind.GoalM","line":761,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GoalM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L758-L759","name":"Lean.Meta.Grind.Goal.admit","line":758,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.admit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.admit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">admit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L755-L756","name":"Lean.Meta.Grind.Goal.isCongruent","line":755,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.isCongruent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.isCongruent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">isCongruent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L752-L753","name":"Lean.Meta.Grind.Goal.hasSameRoot","line":752,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.hasSameRoot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.hasSameRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">hasSameRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L750-L750","name":"Lean.Meta.Grind.instInhabitedGoal","line":750,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedGoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedGoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L749-L749","name":"Lean.Meta.Grind.Goal.clean","line":749,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.clean","doc":"State of the clean name generator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.clean\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">clean</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">Clean.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L747-L747","name":"Lean.Meta.Grind.Goal.arith","line":747,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.arith","doc":"State of arithmetic procedures. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.arith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">arith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Types.html#Lean.Meta.Grind.Arith.State\">Arith.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L745-L745","name":"Lean.Meta.Grind.Goal.split","line":745,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.split","doc":"State of the case-splitting module. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.split\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">Split.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L743-L743","name":"Lean.Meta.Grind.Goal.ematch","line":743,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.ematch","doc":"State of the E-matching module. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.ematch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">ematch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">EMatch.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L741-L741","name":"Lean.Meta.Grind.Goal.extThms","line":741,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.extThms","doc":"Cached extensionality theorems for types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.extThms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">extThms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">Ext.ExtTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L739-L739","name":"Lean.Meta.Grind.Goal.facts","line":739,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.facts","doc":"Asserted facts "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.facts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">facts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L737-L737","name":"Lean.Meta.Grind.Goal.newRawFacts","line":737,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.newRawFacts","doc":"new facts to be preprocessed and then asserted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.newRawFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">newRawFacts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L735-L735","name":"Lean.Meta.Grind.Goal.nextIdx","line":735,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.nextIdx","doc":"Next unique index for creating ENodes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.nextIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">nextIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L733-L733","name":"Lean.Meta.Grind.Goal.inconsistent","line":733,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.inconsistent","doc":"`inconsistent := true` if `ENode`s for `True` and `False` are in the same equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.inconsistent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">inconsistent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L731-L731","name":"Lean.Meta.Grind.Goal.newFacts","line":731,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.newFacts","doc":"Equations and propositions to be processed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.newFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">newFacts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact\">NewFact</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L729-L729","name":"Lean.Meta.Grind.Goal.appMap","line":729,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.appMap","doc":"A mapping from each function application index (`HeadIndex`) to a list of applications with that index.\nRecall that the `HeadIndex` for a constant is its constant name, and for a free variable,\nit is its unique id.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.appMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">appMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/HeadIndex.html#Lean.HeadIndex\">HeadIndex</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L723-L723","name":"Lean.Meta.Grind.Goal.congrTable","line":723,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.congrTable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.congrTable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">congrTable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTable\">CongrTable</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Types.html#_private.Lean.Meta.Tactic.Grind.Types.0.Lean.Meta.Grind.Goal.enodeMap\">Lean.Meta.Grind.Goal.enodeMap✝</a> <span class=\"fn\">self</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L722-L722","name":"Lean.Meta.Grind.Goal.parents","line":722,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.parents","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.parents\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">parents</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentMap\">ParentMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L721-L721","name":"Lean.Meta.Grind.Goal.exprs","line":721,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.exprs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.exprs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">exprs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L719-L719","name":"Lean.Meta.Grind.Goal.canon","line":719,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.canon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.canon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">canon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">Canon.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L718-L718","name":"Lean.Meta.Grind.Goal.mvarId","line":718,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L717-L717","name":"Lean.Meta.Grind.Goal.mk","line":717,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canon</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">Canon.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">enodeMap</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exprs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parents</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentMap\">ParentMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">congrTable</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTable\">CongrTable</a> <span class=\"fn\">enodeMap</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">appMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/HeadIndex.html#Lean.HeadIndex\">HeadIndex</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newFacts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact\">NewFact</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inconsistent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newRawFacts</span> : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facts</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extThms</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">Ext.ExtTheorem</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ematch</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">EMatch.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">split</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">Split.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arith</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Types.html#Lean.Meta.Grind.Arith.State\">Arith.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clean</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">Clean.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L716-L750","name":"Lean.Meta.Grind.Goal","line":716,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal","doc":"The `grind` goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L714-L714","name":"Lean.Meta.Grind.Clean.instInhabitedState","line":714,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Clean</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L713-L713","name":"Lean.Meta.Grind.Clean.State.next","line":713,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.next\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Clean</span>.<span class=\"name\">State</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L712-L712","name":"Lean.Meta.Grind.Clean.State.used","line":712,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.used","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.used\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Clean</span>.<span class=\"name\">State</span>.<span class=\"name\">used</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L711-L711","name":"Lean.Meta.Grind.Clean.State.mk","line":711,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Clean</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">used</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L710-L714","name":"Lean.Meta.Grind.Clean.State","line":710,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State","doc":"Clean name generator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Clean</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L708-L708","name":"Lean.Meta.Grind.Split.instInhabitedState","line":708,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L707-L707","name":"Lean.Meta.Grind.Split.State.argsAt","line":707,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.argsAt","doc":"Mapping from pairs `(f, i)` to a list of arguments.\nEach argument occurs as the `i`-th of an `f`-application.\nWe use this information to add splits/lookaheads for\ntriggering extensionality theorems and model-based theory combination.\nSee `addSplitCandidatesForExt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.argsAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">argsAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L699-L699","name":"Lean.Meta.Grind.Split.State.argPosMap","line":699,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.argPosMap","doc":"A mapping `(a, b) ↦ is` s.t. for each `SplitInfo.arg a b i eq`\nin `candidates` or `lookaheads` we have `i ∈ is`.\nWe use this information to decide whether the split/lookahead is \"ready\"\nto be tried or not.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.argPosMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">argPosMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L692-L692","name":"Lean.Meta.Grind.Split.State.lookaheads","line":692,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.lookaheads","doc":"Lookahead \"case-splits\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.lookaheads\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">lookaheads</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L690-L690","name":"Lean.Meta.Grind.Split.State.trace","line":690,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.trace","doc":"Sequence of cases steps that generated this goal. We only use this information for diagnostics.\nRemark: `casesTrace.length ≥ numSplits` because we don't increase the counter for `cases`\napplications that generated only 1 subgoal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L684-L684","name":"Lean.Meta.Grind.Split.State.resolved","line":684,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.resolved","doc":"Case-splits that have already been performed, or that do not have to be performed anymore. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.resolved\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">resolved</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L682-L682","name":"Lean.Meta.Grind.Split.State.added","line":682,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.added","doc":"Case-splits that have been inserted at `candidates` at some point. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.added\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">added</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L680-L680","name":"Lean.Meta.Grind.Split.State.candidates","line":680,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.candidates","doc":"Case-split candidates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.candidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">candidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L678-L678","name":"Lean.Meta.Grind.Split.State.casesTypes","line":678,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.casesTypes","doc":"Inductive datatypes marked for case-splitting "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.casesTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">casesTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Cases.html#Lean.Meta.Grind.CasesTypes\">CasesTypes</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L676-L676","name":"Lean.Meta.Grind.Split.State.num","line":676,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.num","doc":"Number of splits performed to get to this goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L674-L674","name":"Lean.Meta.Grind.Split.State.mk","line":674,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">casesTypes</span> : <a href=\"./Lean/Meta/Tactic/Grind/Cases.html#Lean.Meta.Grind.CasesTypes\">CasesTypes</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">candidates</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">added</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resolved</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trace</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lookaheads</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argPosMap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsAt</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L673-L708","name":"Lean.Meta.Grind.Split.State","line":673,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State","doc":"Case splitting related fields for the `grind` goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L671-L671","name":"Lean.Meta.Grind.SplitArg.app","line":671,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.app\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitArg</span>.<span class=\"name\">app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L670-L670","name":"Lean.Meta.Grind.SplitArg.type","line":670,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitArg</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L669-L669","name":"Lean.Meta.Grind.SplitArg.arg","line":669,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.arg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.arg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitArg</span>.<span class=\"name\">arg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L668-L668","name":"Lean.Meta.Grind.SplitArg.mk","line":668,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitArg</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg </span><span class=\"fn\">type </span><span class=\"fn\">app</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L667-L671","name":"Lean.Meta.Grind.SplitArg","line":667,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg","doc":"Argument `arg : type` of an application `app` in `SplitInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L659-L665","name":"Lean.Meta.Grind.SplitInfo.lt","line":659,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L654-L657","name":"Lean.Meta.Grind.SplitInfo.source","line":654,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.source","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.source\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">source</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L649-L652","name":"Lean.Meta.Grind.SplitInfo.getExpr","line":649,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.getExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.getExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">getExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L646-L647","name":"Lean.Meta.Grind.instBEqSplitInfo","line":646,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqSplitInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqSplitInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqSplitInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L640-L644","name":"Lean.Meta.Grind.SplitInfo.beq","line":640,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L637-L638","name":"Lean.Meta.Grind.instHashableSplitInfo","line":637,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableSplitInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableSplitInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashableSplitInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L632-L635","name":"Lean.Meta.Grind.SplitInfo.hash","line":632,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.hash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L630-L630","name":"Lean.Meta.Grind.instInhabitedSplitInfo","line":630,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedSplitInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L624-L629","name":"Lean.Meta.Grind.SplitInfo.arg","line":624,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.arg","doc":"Given applications `a` and `b`, case-split on whether the corresponding\n`i`-th arguments are equal or not. The split is only performed if all other\narguments are already known to be equal or are also tagged as split candidates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.arg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">arg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L622-L623","name":"Lean.Meta.Grind.SplitInfo.imp","line":622,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.imp","doc":"`e` is an implication and we want to split on its antecedent. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.imp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">imp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Lean/Expr.html#Lean.Expr.isForall\">isForall</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L618-L621","name":"Lean.Meta.Grind.SplitInfo.default","line":618,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.default","doc":"Term `e` may be an inductive predicate, `match`-expression, `if`-expression, implication, etc.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L616-L630","name":"Lean.Meta.Grind.SplitInfo","line":616,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo","doc":"Case-split information. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L614-L614","name":"Lean.Meta.Grind.EMatch.instInhabitedState","line":614,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L613-L613","name":"Lean.Meta.Grind.EMatch.State.matchEqNames","line":613,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.matchEqNames","doc":"`match` auxiliary functions whose equations have already been created and activated. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.matchEqNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">matchEqNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L611-L611","name":"Lean.Meta.Grind.EMatch.State.nextThmIdx","line":611,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.nextThmIdx","doc":"Next local E-match theorem idx. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.nextThmIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">nextThmIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L609-L609","name":"Lean.Meta.Grind.EMatch.State.preInstances","line":609,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.preInstances","doc":"(pre-)instances found so far. It includes instances that failed to be instantiated. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.preInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">preInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstanceSet\">PreInstanceSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L607-L607","name":"Lean.Meta.Grind.EMatch.State.num","line":607,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.num","doc":"Number of E-matching rounds performed in this goal since the last case-split. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L605-L605","name":"Lean.Meta.Grind.EMatch.State.numInstances","line":605,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.numInstances","doc":"Number of theorem instances generated so far "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.numInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">numInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L603-L603","name":"Lean.Meta.Grind.EMatch.State.newThms","line":603,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.newThms","doc":"Active theorems that we have not performed any round of ematching yet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.newThms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">newThms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L601-L601","name":"Lean.Meta.Grind.EMatch.State.thms","line":601,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.thms","doc":"Active theorems that we have performed ematching at least once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.thms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">thms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L599-L599","name":"Lean.Meta.Grind.EMatch.State.gmt","line":599,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.gmt","doc":"Goal modification time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.gmt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">gmt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L597-L597","name":"Lean.Meta.Grind.EMatch.State.thmMap","line":597,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.thmMap","doc":"Inactive global theorems. As we internalize terms, we activate theorems as we find their symbols.\nLocal theorem provided by users are added directly into `newThms`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.thmMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">thmMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorems\">EMatchTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L592-L592","name":"Lean.Meta.Grind.EMatch.State.mk","line":592,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thmMap</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorems\">EMatchTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gmt</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thms </span><span class=\"fn\">newThms</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numInstances </span><span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preInstances</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstanceSet\">PreInstanceSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextThmIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchEqNames</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L591-L614","name":"Lean.Meta.Grind.EMatch.State","line":591,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State","doc":"E-matching related fields for the `grind` goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L589-L589","name":"Lean.Meta.Grind.instInhabitedCaseTrace","line":589,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCaseTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCaseTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedCaseTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L588-L588","name":"Lean.Meta.Grind.CaseTrace.source","line":588,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.source","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.source\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span>.<span class=\"name\">source</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L587-L587","name":"Lean.Meta.Grind.CaseTrace.num","line":587,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.num","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L586-L586","name":"Lean.Meta.Grind.CaseTrace.i","line":586,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.i","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.i\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span>.<span class=\"name\">i</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L585-L585","name":"Lean.Meta.Grind.CaseTrace.expr","line":585,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L584-L584","name":"Lean.Meta.Grind.CaseTrace.mk","line":584,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L583-L589","name":"Lean.Meta.Grind.CaseTrace","line":583,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace","doc":"Trace information for a case split. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L581-L581","name":"Lean.Meta.Grind.Canon.instInhabitedState","line":581,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L580-L580","name":"Lean.Meta.Grind.Canon.State.proofCanon","line":580,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.proofCanon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.proofCanon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">State</span>.<span class=\"name\">proofCanon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L579-L579","name":"Lean.Meta.Grind.Canon.State.canon","line":579,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.canon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.canon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">State</span>.<span class=\"name\">canon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L578-L578","name":"Lean.Meta.Grind.Canon.State.argMap","line":578,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.argMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.argMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">State</span>.<span class=\"name\">argMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L577-L577","name":"Lean.Meta.Grind.Canon.State.mk","line":577,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canon </span><span class=\"fn\">proofCanon</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L576-L581","name":"Lean.Meta.Grind.Canon.State","line":576,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State","doc":"Canonicalizer state. See `Canon.lean` for additional details. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L574-L574","name":"Lean.Meta.Grind.instInhabitedNewRawFact","line":574,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedNewRawFact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedNewRawFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedNewRawFact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L573-L573","name":"Lean.Meta.Grind.NewRawFact.splitSource","line":573,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.splitSource","doc":"`splitSource` to use when internalizing this fact. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.splitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span>.<span class=\"name\">splitSource</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L571-L571","name":"Lean.Meta.Grind.NewRawFact.generation","line":571,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.generation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.generation\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span>.<span class=\"name\">generation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L570-L570","name":"Lean.Meta.Grind.NewRawFact.prop","line":570,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.prop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.prop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span>.<span class=\"name\">prop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L569-L569","name":"Lean.Meta.Grind.NewRawFact.proof","line":569,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.proof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L568-L568","name":"Lean.Meta.Grind.NewRawFact.mk","line":568,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof </span><span class=\"fn\">prop</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L567-L574","name":"Lean.Meta.Grind.NewRawFact","line":567,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact","doc":"New raw fact to be preprocessed, and then asserted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L565-L565","name":"Lean.Meta.Grind.PreInstanceSet","line":565,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstanceSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstanceSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PreInstanceSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L557-L563","name":"Lean.Meta.Grind.instBEqPreInstance","line":557,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqPreInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqPreInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqPreInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\">PreInstance</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L550-L555","name":"Lean.Meta.Grind.instHashablePreInstance","line":550,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashablePreInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashablePreInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashablePreInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\">PreInstance</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L548-L548","name":"Lean.Meta.Grind.PreInstance.assignment","line":548,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.assignment","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.assignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PreInstance</span>.<span class=\"name\">assignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\">PreInstance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L547-L547","name":"Lean.Meta.Grind.PreInstance.proof","line":547,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.proof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PreInstance</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\">PreInstance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L546-L546","name":"Lean.Meta.Grind.PreInstance.mk","line":546,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PreInstance</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\">PreInstance</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L539-L548","name":"Lean.Meta.Grind.PreInstance","line":539,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance","doc":"The E-matching module instantiates theorems using the `EMatchTheorem proof` and a (partial) assignment.\nWe want to avoid instantiating the same theorem with the same assignment more than once.\nTherefore, we store the (pre-)instance information in set.\nRecall that the proofs of activated theorems have been hash-consed.\nThe assignment contains internalized expressions, which have also been hash-consed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PreInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L537-L537","name":"Lean.Meta.Grind.ParentMap","line":537,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ParentMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L536-L536","name":"Lean.Meta.Grind.ParentSet","line":536,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ParentSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L533-L533","name":"Lean.Meta.Grind.CongrTable","line":533,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrTable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">enodeMap</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L530-L531","name":"Lean.Meta.Grind.instBEqCongrKey","line":530,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCongrKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCongrKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqCongrKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">enodeMap</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey\">CongrKey</a> <span class=\"fn\">enodeMap</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L527-L528","name":"Lean.Meta.Grind.instHashableCongrKey","line":527,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCongrKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCongrKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashableCongrKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">enodeMap</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey\">CongrKey</a> <span class=\"fn\">enodeMap</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L459-L459","name":"Lean.Meta.Grind.CongrKey.e","line":459,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey.e","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey.e\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrKey</span>.<span class=\"name\">e</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">enodes</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey\">CongrKey</a> <span class=\"fn\">enodes</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L458-L458","name":"Lean.Meta.Grind.CongrKey.mk","line":458,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrKey</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">enodes</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey\">CongrKey</a> <span class=\"fn\">enodes</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L454-L459","name":"Lean.Meta.Grind.CongrKey","line":454,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey","doc":"Key for the congruence table.\nWe need access to the `enodes` to be able to retrieve the equivalence class roots.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrKey</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">enodes</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L452-L452","name":"Lean.Meta.Grind.ENodeMap","line":452,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENodeMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L450-L450","name":"Lean.Meta.Grind.NewFact.fact","line":450,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact.fact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact.fact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewFact</span>.<span class=\"name\">fact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prop </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact\">NewFact</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L449-L449","name":"Lean.Meta.Grind.NewFact.eq","line":449,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewFact</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isHEq</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact\">NewFact</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L447-L450","name":"Lean.Meta.Grind.NewFact","line":447,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact","doc":"New equalities and facts to be processed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewFact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L444-L445","name":"Lean.Meta.Grind.ENode.isCongrRoot","line":444,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.isCongrRoot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.isCongrRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">isCongrRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L441-L442","name":"Lean.Meta.Grind.ENode.isRoot","line":441,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.isRoot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.isRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">isRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L439-L439","name":"Lean.Meta.Grind.instReprENode","line":439,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instReprENode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instReprENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instReprENode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L439-L439","name":"Lean.Meta.Grind.instInhabitedENode","line":439,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedENode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedENode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L436-L436","name":"Lean.Meta.Grind.ENode.linarith?","line":436,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.linarith?","doc":"The `linarith?` field is used to propagate equalities from the `grind` congruence closure module\nto the linarith module. Its implementation is similar to the `offset?` field.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.linarith?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">linarith?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L431-L431","name":"Lean.Meta.Grind.ENode.ring?","line":431,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.ring?","doc":"The `ring?` field is used to propagate equalities from the `grind` congruence closure module\nto the comm ring module. Its implementation is similar to the `offset?` field.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.ring?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">ring?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L426-L426","name":"Lean.Meta.Grind.ENode.cutsat?","line":426,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.cutsat?","doc":"The `cutsat?` field is used to propagate equalities from the `grind` congruence closure module\nto the cutsat module. Its implementation is similar to the `offset?` field.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.cutsat?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">cutsat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L421-L421","name":"Lean.Meta.Grind.ENode.offset?","line":421,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.offset?","doc":"The `offset?` field is used to propagate equalities from the `grind` congruence closure module\nto the offset constraints module. When `grind` merges two equivalence classes, and both have\nan associated `offset?` set to `some e`, the equality is propagated. This field is\nassigned during the internalization of offset terms.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.offset?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">offset?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L414-L414","name":"Lean.Meta.Grind.ENode.mt","line":414,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.mt","doc":"Modification time "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.mt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">mt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L412-L412","name":"Lean.Meta.Grind.ENode.generation","line":412,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.generation","doc":"The generation in which this enode was created. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.generation\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">generation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L410-L410","name":"Lean.Meta.Grind.ENode.idx","line":410,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.idx","doc":"Unique index used for pretty printing and debugging purposes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L408-L408","name":"Lean.Meta.Grind.ENode.heqProofs","line":408,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.heqProofs","doc":"If `heqProofs := true`, then some proofs in the equivalence class are based\non heterogeneous equality.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.heqProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">heqProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L403-L403","name":"Lean.Meta.Grind.ENode.hasLambdas","line":403,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.hasLambdas","doc":"`hasLambdas := true` if the equivalence class contains lambda expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.hasLambdas\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">hasLambdas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L401-L401","name":"Lean.Meta.Grind.ENode.ctor","line":401,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.ctor","doc":"`ctor := true` if the head symbol is a constructor application. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L399-L399","name":"Lean.Meta.Grind.ENode.interpreted","line":399,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.interpreted","doc":"`interpreted := true` if node should be viewed as an abstract value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.interpreted\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">interpreted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L397-L397","name":"Lean.Meta.Grind.ENode.size","line":397,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.size","doc":"Number of elements in the equivalence class, this field is meaningless if node is not the root. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L395-L395","name":"Lean.Meta.Grind.ENode.flipped","line":395,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.flipped","doc":"Proof has been flipped. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.flipped\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">flipped</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L393-L393","name":"Lean.Meta.Grind.ENode.proof?","line":393,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.proof?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.proof?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">proof?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L392-L392","name":"Lean.Meta.Grind.ENode.target?","line":392,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.target?","doc":"When `e` was added to this equivalence class because of an equality `h : e = target`,\nthen we store `target` here, and `h` at `proof?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.target?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">target?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L387-L387","name":"Lean.Meta.Grind.ENode.congr","line":387,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.congr","doc":"`congr` is the term `self` is congruent to.\nWe say `self` is the congruence class root if `isSameExpr congr self`.\nThis field is initialized to `self` even if `e` is not an application.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.congr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L381-L381","name":"Lean.Meta.Grind.ENode.root","line":381,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.root","doc":"Root (aka canonical representative) of the equivalence class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.root\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">root</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L379-L379","name":"Lean.Meta.Grind.ENode.next","line":379,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.next","doc":"Next element in the equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.next\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L377-L377","name":"Lean.Meta.Grind.ENode.self","line":377,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.self","doc":"Node represented by this ENode. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.self\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L375-L375","name":"Lean.Meta.Grind.ENode.mk","line":375,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self </span><span class=\"fn\">next </span><span class=\"fn\">root </span><span class=\"fn\">congr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target? </span><span class=\"fn\">proof?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">flipped</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">interpreted </span><span class=\"fn\">ctor </span><span class=\"fn\">hasLambdas </span><span class=\"fn\">heqProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx </span><span class=\"fn\">generation </span><span class=\"fn\">mt</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offset? </span><span class=\"fn\">cutsat? </span><span class=\"fn\">ring? </span><span class=\"fn\">linarith?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L371-L439","name":"Lean.Meta.Grind.ENode","line":371,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode","doc":"Stores information for a node in the egraph.\nEach internalized expression `e` has an `ENode` associated with it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L368-L369","name":"Lean.Meta.Grind.doElemReportIssue!__","line":368,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.doElemReportIssue!__","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.doElemReportIssue!__\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">doElemReportIssue!__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L353-L360","name":"Lean.Meta.Grind.reportIssue","line":353,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.reportIssue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.reportIssue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">reportIssue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L338-L351","name":"Lean.Meta.Grind.mkHCongrWithArity","line":338,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkHCongrWithArity","doc":"Creates a congruence theorem for a `f`-applications with `numArgs` arguments.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkHCongrWithArity\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkHCongrWithArity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L334-L336","name":"Lean.Meta.Grind.isFalseExpr","line":334,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isFalseExpr","doc":"Returns `true` if `e` is the internalized `False` expression.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isFalseExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isFalseExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L330-L332","name":"Lean.Meta.Grind.isTrueExpr","line":330,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isTrueExpr","doc":"Returns `true` if `e` is the internalized `True` expression.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isTrueExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isTrueExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L320-L328","name":"Lean.Meta.Grind.shareCommon","line":320,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.shareCommon","doc":"Applies hash-consing to `e`. Recall that all expressions in a `grind` goal have\nbeen hash-consed. We perform this step before we internalize expressions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.shareCommon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">shareCommon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L314-L318","name":"Lean.Meta.Grind.abstractNestedProofs","line":314,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.abstractNestedProofs","doc":"Abstracts nested proofs in `e`. This is a preprocessing step performed before internalization.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.abstractNestedProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">abstractNestedProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L310-L312","name":"Lean.Meta.Grind.getMaxGeneration","line":310,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMaxGeneration","doc":"Returns maximum term generation that is considered during ematching. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMaxGeneration\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getMaxGeneration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L307-L308","name":"Lean.Meta.Grind.getMethodsRef","line":307,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMethodsRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMethodsRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getMethodsRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#_private.Lean.Meta.Tactic.Grind.Types.0.Lean.Meta.Grind.MethodsRef\">Lean.Meta.Grind.MethodsRef✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L302-L305","name":"Lean.Meta.Grind.saveSplitDiagInfo","line":302,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveSplitDiagInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveSplitDiagInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">saveSplitDiagInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gen </span><span class=\"fn\">numCases</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L297-L300","name":"Lean.Meta.Grind.saveAppOf","line":297,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveAppOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveAppOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">saveAppOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/HeadIndex.html#Lean.HeadIndex\">HeadIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L289-L295","name":"Lean.Meta.Grind.saveCases","line":289,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveCases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">saveCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eager</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L271-L275","name":"Lean.Meta.Grind.isMatchEqLikeDeclName","line":271,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isMatchEqLikeDeclName","doc":"Returns `true` if `declName` is the name of a `match` equation or a `match` congruence equation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isMatchEqLikeDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isMatchEqLikeDeclName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L267-L269","name":"Lean.Meta.Grind.getSymbolPriorities","line":267,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getSymbolPriorities","doc":"Returns symbol priorities for inferring E-matching patterns. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getSymbolPriorities\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getSymbolPriorities</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.SymbolPriorities\">SymbolPriorities</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L264-L265","name":"Lean.Meta.Grind.reportMVarInternalization","line":264,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.reportMVarInternalization","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.reportMVarInternalization\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">reportMVarInternalization</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L261-L262","name":"Lean.Meta.Grind.cheapCasesOnly","line":261,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.cheapCasesOnly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.cheapCasesOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">cheapCasesOnly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L257-L259","name":"Lean.Meta.Grind.getIntExpr","line":257,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getIntExpr","doc":"Returns the internalized `Int`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getIntExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getIntExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L253-L255","name":"Lean.Meta.Grind.getOrderingEqExpr","line":253,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getOrderingEqExpr","doc":"Returns the internalized `Ordering.eq`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getOrderingEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getOrderingEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L249-L251","name":"Lean.Meta.Grind.getNatZeroExpr","line":249,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getNatZeroExpr","doc":"Returns the internalized `0 : Nat` numeral.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getNatZeroExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getNatZeroExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L245-L247","name":"Lean.Meta.Grind.getBoolFalseExpr","line":245,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getBoolFalseExpr","doc":"Returns the internalized `Bool.false`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getBoolFalseExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getBoolFalseExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L241-L243","name":"Lean.Meta.Grind.getBoolTrueExpr","line":241,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getBoolTrueExpr","doc":"Returns the internalized `Bool.true`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getBoolTrueExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getBoolTrueExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L237-L239","name":"Lean.Meta.Grind.getFalseExpr","line":237,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getFalseExpr","doc":"Returns the internalized `False` constant.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getFalseExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getFalseExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L233-L235","name":"Lean.Meta.Grind.getTrueExpr","line":233,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getTrueExpr","doc":"Returns the internalized `True` constant.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getTrueExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getTrueExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L229-L231","name":"Lean.Meta.Grind.getConfig","line":229,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getConfig","doc":"Returns the user-defined configuration options "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Grind.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L222-L227","name":"Lean.Meta.Grind.withSplitSource","line":222,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withSplitSource","doc":"`withSplitSource s x` executes `x` and uses `s` as the split source for any case-split\nregistered.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withSplitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">withSplitSource</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L215-L220","name":"Lean.Meta.Grind.withoutReportingMVarIssues","line":215,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withoutReportingMVarIssues","doc":"`withoutReportingMVarIssues x` executes `x` without reporting metavariables found during internalization.\nSee comment at `Grind.Context.reportMVarIssue` for additional details.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withoutReportingMVarIssues\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">withoutReportingMVarIssues</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L212-L213","name":"Lean.Meta.Grind.mapGrindM","line":212,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mapGrindM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mapGrindM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mapGrindM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L210-L210","name":"Lean.Meta.Grind.GrindM","line":210,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GrindM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L208-L208","name":"Lean.Meta.Grind.instNonemptyMethodsRef","line":208,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instNonemptyMethodsRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instNonemptyMethodsRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instNonemptyMethodsRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#_private.Lean.Meta.Tactic.Grind.Types.0.Lean.Meta.Grind.MethodsRef\">Lean.Meta.Grind.MethodsRef✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L204-L204","name":"Lean.Meta.Grind.State.reflCmpMap","line":204,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.reflCmpMap","doc":"Mapping from binary functions `f` to a theorem `thm : ∀ a, f a a = .eq`\nif it implements the `ReflCmp` type class.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.reflCmpMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">reflCmpMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L199-L199","name":"Lean.Meta.Grind.State.lawfulEqCmpMap","line":199,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.lawfulEqCmpMap","doc":"Mapping from binary functions `f` to a theorem `thm : ∀ a b, f a b = .eq → a = b`\nif it implements the `LawfulEqCmp` type class.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.lawfulEqCmpMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">lawfulEqCmpMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L194-L194","name":"Lean.Meta.Grind.State.splitDiags","line":194,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.splitDiags","doc":"Split diagnostic information. This information is only collected when `set_option diagnostics true` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.splitDiags\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">splitDiags</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L192-L192","name":"Lean.Meta.Grind.State.counters","line":192,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.counters","doc":"Performance counters "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.counters\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">counters</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L190-L190","name":"Lean.Meta.Grind.State.trace","line":190,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.trace","doc":"`trace` for `grind?` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L188-L188","name":"Lean.Meta.Grind.State.issues","line":188,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.issues","doc":"Issues found during the proof search. These issues are reported to\nusers when `grind` fails.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.issues\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">issues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L183-L183","name":"Lean.Meta.Grind.State.lastTag","line":183,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.lastTag","doc":"Used to generate trace messages of the for `[grind] working on <tag>`,\nand implement the macro `trace_goal`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.lastTag\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">lastTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L178-L178","name":"Lean.Meta.Grind.State.simp","line":178,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.simp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.simp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">simp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State\">Simp.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L177-L177","name":"Lean.Meta.Grind.State.congrThms","line":177,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.congrThms","doc":"Congruence theorems generated so far. Recall that for constant symbols\nwe rely on the reserved name feature (i.e., `mkHCongrWithArityForConst?`).\nRemark: we currently do not reuse congruence theorems\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.congrThms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">congrThms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L171-L171","name":"Lean.Meta.Grind.State.scState","line":171,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.scState","doc":"`ShareCommon` (aka `Hashconsing`) state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.scState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">scState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AlphaShareCommon.html#Lean.Meta.Grind.AlphaShareCommon.State\">AlphaShareCommon.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L169-L169","name":"Lean.Meta.Grind.State.mk","line":169,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scState</span> : <a href=\"./Lean/Meta/Tactic/Grind/AlphaShareCommon.html#Lean.Meta.Grind.AlphaShareCommon.State\">AlphaShareCommon.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">congrThms</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simp</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State\">Simp.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lastTag</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">issues</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trace</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counters</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitDiags</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lawfulEqCmpMap </span><span class=\"fn\">reflCmpMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L168-L204","name":"Lean.Meta.Grind.State","line":168,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State","doc":"State for the `GrindM` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L166-L166","name":"Lean.Meta.Grind.SplitDiagInfo.splitSource","line":166,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.splitSource","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.splitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">splitSource</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L165-L165","name":"Lean.Meta.Grind.SplitDiagInfo.numCases","line":165,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.numCases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.numCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">numCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L164-L164","name":"Lean.Meta.Grind.SplitDiagInfo.gen","line":164,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.gen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.gen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L163-L163","name":"Lean.Meta.Grind.SplitDiagInfo.c","line":163,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.c","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.c\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">c</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L162-L162","name":"Lean.Meta.Grind.SplitDiagInfo.lctx","line":162,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.lctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L161-L161","name":"Lean.Meta.Grind.SplitDiagInfo.mk","line":161,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gen </span><span class=\"fn\">numCases</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L160-L166","name":"Lean.Meta.Grind.SplitDiagInfo","line":160,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo","doc":"Case-split diagnostic information "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L156-L156","name":"Lean.Meta.Grind.instInhabitedCounters","line":156,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCounters","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCounters\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedCounters</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L155-L155","name":"Lean.Meta.Grind.Counters.apps","line":155,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.apps","doc":"Number of applications per function symbol. This information is only collected if `set_option diagnostics true` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.apps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Counters</span>.<span class=\"name\">apps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L153-L153","name":"Lean.Meta.Grind.Counters.case","line":153,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.case","doc":"Number of times a `cases` has been performed on an inductive type/predicate "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.case\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Counters</span>.<span class=\"name\">case</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L151-L151","name":"Lean.Meta.Grind.Counters.thm","line":151,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.thm","doc":"Number of times E-match theorem has been instantiated. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.thm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Counters</span>.<span class=\"name\">thm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.Origin\">Origin</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L149-L149","name":"Lean.Meta.Grind.Counters.mk","line":149,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Counters</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thm</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.Origin\">Origin</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">case </span><span class=\"fn\">apps</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L149-L156","name":"Lean.Meta.Grind.Counters","line":149,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Counters</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L147-L147","name":"Lean.Meta.Grind.instInhabitedTrace","line":147,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L146-L146","name":"Lean.Meta.Grind.Trace.cases","line":146,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Trace</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L145-L145","name":"Lean.Meta.Grind.Trace.eagerCases","line":145,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.eagerCases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.eagerCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Trace</span>.<span class=\"name\">eagerCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L144-L144","name":"Lean.Meta.Grind.Trace.thms","line":144,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.thms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.thms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Trace</span>.<span class=\"name\">thms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L143-L143","name":"Lean.Meta.Grind.Trace.mk","line":143,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Trace</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thms</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eagerCases </span><span class=\"fn\">cases</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L137-L147","name":"Lean.Meta.Grind.Trace","line":137,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace","doc":"E-match theorems and case-splits performed by `grind`.\nNote that it may contain elements that are not needed by the final proof.\nFor example, `grind` instantiated the theorem, but theorem instance was not actually used\nin the proof.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Trace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L135-L135","name":"Lean.Meta.Grind.instHashableEMatchTheoremTrace","line":135,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableEMatchTheoremTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableEMatchTheoremTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashableEMatchTheoremTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L135-L135","name":"Lean.Meta.Grind.instBEqEMatchTheoremTrace","line":135,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqEMatchTheoremTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqEMatchTheoremTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqEMatchTheoremTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L134-L134","name":"Lean.Meta.Grind.EMatchTheoremTrace.kind","line":134,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatchTheoremTrace</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheoremKind\">EMatchTheoremKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L133-L133","name":"Lean.Meta.Grind.EMatchTheoremTrace.origin","line":133,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.origin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.origin\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatchTheoremTrace</span>.<span class=\"name\">origin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.Origin\">Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L132-L132","name":"Lean.Meta.Grind.EMatchTheoremTrace.mk","line":132,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatchTheoremTrace</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origin</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.Origin\">Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheoremKind\">EMatchTheoremKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L132-L135","name":"Lean.Meta.Grind.EMatchTheoremTrace","line":132,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatchTheoremTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L129-L130","name":"Lean.Meta.Grind.instHashableCongrTheoremCacheKey","line":129,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCongrTheoremCacheKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCongrTheoremCacheKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashableCongrTheoremCacheKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L125-L126","name":"Lean.Meta.Grind.instBEqCongrTheoremCacheKey","line":125,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCongrTheoremCacheKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCongrTheoremCacheKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqCongrTheoremCacheKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L122-L122","name":"Lean.Meta.Grind.CongrTheoremCacheKey.numArgs","line":122,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.numArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.numArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrTheoremCacheKey</span>.<span class=\"name\">numArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L121-L121","name":"Lean.Meta.Grind.CongrTheoremCacheKey.f","line":121,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.f\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrTheoremCacheKey</span>.<span class=\"name\">f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L120-L120","name":"Lean.Meta.Grind.CongrTheoremCacheKey.mk","line":120,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrTheoremCacheKey</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L119-L122","name":"Lean.Meta.Grind.CongrTheoremCacheKey","line":119,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey","doc":"Key for the congruence theorem cache. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrTheoremCacheKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L117-L117","name":"Lean.Meta.Grind.Context.intExpr","line":117,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.intExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.intExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">intExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L116-L116","name":"Lean.Meta.Grind.Context.ordEqExpr","line":116,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.ordEqExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.ordEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">ordEqExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L115-L115","name":"Lean.Meta.Grind.Context.bfalseExpr","line":115,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.bfalseExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.bfalseExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">bfalseExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L114-L114","name":"Lean.Meta.Grind.Context.btrueExpr","line":114,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.btrueExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.btrueExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">btrueExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L113-L113","name":"Lean.Meta.Grind.Context.natZExpr","line":113,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.natZExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.natZExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">natZExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L112-L112","name":"Lean.Meta.Grind.Context.falseExpr","line":112,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.falseExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.falseExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">falseExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L111-L111","name":"Lean.Meta.Grind.Context.trueExpr","line":111,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.trueExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.trueExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">trueExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L110-L110","name":"Lean.Meta.Grind.Context.symPrios","line":110,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.symPrios","doc":"Symbol priorities for inferring E-matching patterns "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.symPrios\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">symPrios</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.SymbolPriorities\">SymbolPriorities</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L108-L108","name":"Lean.Meta.Grind.Context.splitSource","line":108,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.splitSource","doc":"Current source of case-splits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.splitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">splitSource</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L106-L106","name":"Lean.Meta.Grind.Context.reportMVarIssue","line":106,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.reportMVarIssue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.reportMVarIssue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">reportMVarIssue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L99-L99","name":"Lean.Meta.Grind.Context.cheapCases","line":99,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.cheapCases","doc":"If `cheapCases` is `true`, `grind` only applies `cases` to types that contain\nat most one minor premise.\nRecall that `grind` applies `cases` when introducing types tagged with `[grind cases eager]`,\nand at `Split.lean`\nRemark: We add this option to implement the `lookahead` feature, we don't want to create several subgoals\nwhen performing lookahead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.cheapCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">cheapCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L90-L90","name":"Lean.Meta.Grind.Context.config","line":90,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.config","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Grind.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L89-L89","name":"Lean.Meta.Grind.Context.simpMethods","line":89,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.simpMethods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.simpMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">simpMethods</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Simp.Methods</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L88-L88","name":"Lean.Meta.Grind.Context.simp","line":88,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.simp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.simp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">simp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Simp.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L87-L87","name":"Lean.Meta.Grind.Context.mk","line":87,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simp</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpMethods</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Simp.Methods</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Grind.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cheapCases </span><span class=\"fn\">reportMVarIssue</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symPrios</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.SymbolPriorities\">SymbolPriorities</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trueExpr </span><span class=\"fn\">falseExpr </span><span class=\"fn\">natZExpr </span><span class=\"fn\">btrueExpr </span><span class=\"fn\">bfalseExpr </span><span class=\"fn\">ordEqExpr </span><span class=\"fn\">intExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L86-L117","name":"Lean.Meta.Grind.Context","line":86,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context","doc":"Context for `GrindM` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L77-L84","name":"Lean.Meta.Grind.SplitSource.toMessageData","line":77,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L75-L75","name":"Lean.Meta.Grind.instInhabitedSplitSource","line":75,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitSource","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedSplitSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L73-L74","name":"Lean.Meta.Grind.SplitSource.input","line":73,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.input","doc":"Input goal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.input\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">input</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L71-L72","name":"Lean.Meta.Grind.SplitSource.existsProp","line":71,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.existsProp","doc":"Exists-propagator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.existsProp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">existsProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L69-L70","name":"Lean.Meta.Grind.SplitSource.forallProp","line":69,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.forallProp","doc":"Forall-propagator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.forallProp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">forallProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L67-L68","name":"Lean.Meta.Grind.SplitSource.beta","line":67,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.beta","doc":"Beta-reduction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L65-L66","name":"Lean.Meta.Grind.SplitSource.mbtc","line":65,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.mbtc","doc":"Model-based theory combination equality coming from the i-th argument of applications `a` and `b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.mbtc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">mbtc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L63-L64","name":"Lean.Meta.Grind.SplitSource.ext","line":63,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.ext","doc":"Generated while instantiating an extensionality theorem with name `declName` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L61-L62","name":"Lean.Meta.Grind.SplitSource.ematch","line":61,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.ematch","doc":"Generated while instantiating a theorem using E-matching. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.ematch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">ematch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origin</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.Origin\">Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L56-L75","name":"Lean.Meta.Grind.SplitSource","line":56,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource","doc":"Case-split source. That is, where it came from.\nWe store the current source in the `grind` context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L50-L54","name":"Lean.Meta.Grind.grind.warning","line":50,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.warning","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.warning\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">grind</span>.<span class=\"name\">warning</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L44-L48","name":"Lean.Meta.Grind.grind.debug.proofs","line":44,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.debug.proofs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.debug.proofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">grind</span>.<span class=\"name\">debug</span>.<span class=\"name\">proofs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L38-L42","name":"Lean.Meta.Grind.grind.debug","line":38,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.debug","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.debug\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">grind</span>.<span class=\"name\">debug</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L30-L36","name":"Lean.Meta.Grind.isInterpreted","line":30,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isInterpreted","doc":"Returns `true` if `e` is `True`, `False`, or a literal value.\nSee `Lean.Meta.LitValues` for supported literals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isInterpreted\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isInterpreted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Types.lean#L27-L28","name":"Lean.Meta.Grind.congrPlaceholderProof","line":27,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.congrPlaceholderProof","doc":"We use this auxiliary constant to mark delayed congruence proofs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.congrPlaceholderProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">congrPlaceholderProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"}]}