{"name":"Init.Data.Format.Basic","instances":[{"typeNames":["Std.Format.FlattenBehavior"],"name":"Std.Format.instInhabitedFlattenBehavior","className":"Inhabited"},{"typeNames":["Std.Format.FlattenBehavior"],"name":"Std.Format.instBEqFlattenBehavior","className":"BEq"},{"typeNames":["Std.Format"],"name":"Std.instInhabitedFormat","className":"Inhabited"},{"typeNames":["Std.Format"],"name":"Std.Format.instAppend","className":"Append"},{"typeNames":["String","Std.Format"],"name":"Std.Format.instCoeString","className":"Coe"},{"typeNames":["_private.Init.Data.Format.Basic.0.Std.Format.SpaceResult"],"name":"Std.Format.instInhabitedSpaceResult","className":"Inhabited"},{"typeNames":["Std.Format.FlattenAllowability"],"name":"Std.Format.instBEqFlattenAllowability","className":"BEq"},{"typeNames":["Std.Format"],"name":"Std.instToFormatFormat","className":"Std.ToFormat"},{"typeNames":["String"],"name":"Std.instToFormatString","className":"Std.ToFormat"}],"imports":["Init.Control.State","Init.Data.Int.Basic","Init.Data.String.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L458-L466","name":"Std.Format.joinSuffix","line":458,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSuffix","doc":"Concatenates the given list after appending the given suffix to each element.\n\nThe list items are formatting using `ToFormat.format`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.joinSuffix\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">joinSuffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L449-L456","name":"Std.Format.prefixJoin","line":449,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.prefixJoin","doc":"Concatenates the given list after prepending `pre` to each element.\n\nThe list items are formatting using `ToFormat.format`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.prefixJoin\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">prefixJoin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L439-L447","name":"Std.Format.joinSep","line":439,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSep","doc":"Intercalates the given list with the given `sep` format.\n\nThe list items are formatting using `ToFormat.format`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.joinSep\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">joinSep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L436-L437","name":"Std.instToFormatString","line":436,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instToFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">instToFormatString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L433-L434","name":"Std.instToFormatFormat","line":433,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instToFormatFormat\"><span class=\"name\">Std</span>.<span class=\"name\">instToFormatFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L428-L428","name":"Std.ToFormat.format","line":428,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat.format\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span>.<span class=\"name\">format</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L427-L427","name":"Std.ToFormat.mk","line":427,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat.mk\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L421-L428","name":"Std.ToFormat","line":421,"kind":"class","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat","doc":"Specifies a “user-facing” way to convert from the type `α` to a `Format` object. There is no\nexpectation that the resulting string is valid code.\n\nThe `Repr` class is similar, but the expectation is that instances produce valid Lean code.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L406-L417","name":"Std.Format.pretty","line":406,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.pretty","doc":"Renders a `Format` to a string.\n* `width`: the total width\n* `indent`: the initial indentation to use for wrapped lines\n  (subsequent wrapping may increase the indentation)\n* `column`: begin the first line wrap `column` characters earlier than usual\n  (this is useful when the output String will be printed starting at `column`)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.pretty\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">pretty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">width</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <a href=\"./Init/Data/Format/Basic.html#Std.Format.defWidth\">defWidth</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent </span><span class=\"fn\">column</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L389-L391","name":"Std.Format.indentD","line":389,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.indentD","doc":"Insert a newline and then `f`, all nested by the default indent amount. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.indentD\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">indentD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L383-L387","name":"Std.Format.nestD","line":383,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.nestD","doc":"Increases the indentation level by the default amount.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nestD\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nestD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L380-L381","name":"Std.Format.defWidth","line":380,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defWidth","doc":"The default width of the targeted output, which is 120 columns. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defWidth\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defWidth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L379-L379","name":"Std.Format.defUnicode","line":379,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defUnicode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defUnicode\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defUnicode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L377-L378","name":"Std.Format.defIndent","line":377,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defIndent","doc":"The default indentation level, which is two spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defIndent\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defIndent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L369-L375","name":"Std.Format.bracketFill","line":369,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracketFill","doc":"Creates a format `l ++ f ++ r` with a flattening group, nesting the contents by the length of `l`.\n\nThe group's `FlattenBehavior` is `fill`; for `allOrNone` use `Std.Format.bracketFill`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.bracketFill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">bracketFill</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L361-L367","name":"Std.Format.sbracket","line":361,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.sbracket","doc":"Creates the format `\"[\" ++ f ++ \"]\"` with a flattening group, nesting by one space.\n\n`sbracket` is short for “square bracket”.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.sbracket\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">sbracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L355-L359","name":"Std.Format.paren","line":355,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.paren","doc":"Creates the format `\"(\" ++ f ++ \")\"` with a flattening group, nesting by one space.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.paren\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">paren</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L347-L353","name":"Std.Format.bracket","line":347,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracket","doc":"Creates a format `l ++ f ++ r` with a flattening group, nesting the contents by the length of `l`.\n\nThe group's `FlattenBehavior` is `allOrNone`; for `fill` use `Std.Format.bracketFill`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.bracket\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">bracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L335-L345","name":"Std.Format.prettyM","line":335,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.prettyM","doc":"Renders a `Format` using effects in the monad `m`, using the methods of `MonadPrettyFormat`.\n\nEach line is emitted as soon as it is rendered, rather than waiting for the entire document to be\nrendered.\n* `w`: the total width\n* `indent`: the initial indentation to use for wrapped lines (subsequent wrapping may increase the\n  indentation)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.prettyM\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">prettyM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L239-L239","name":"Std.Format.MonadPrettyFormat.endTags","line":239,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.endTags","doc":"Exits the scope of `count` opened tags.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.endTags\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">endTags</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">count</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L235-L235","name":"Std.Format.MonadPrettyFormat.startTag","line":235,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.startTag","doc":"Starts a region tagged with `tag`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.startTag\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">startTag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L231-L231","name":"Std.Format.MonadPrettyFormat.currColumn","line":231,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.currColumn","doc":"Gets the current column at which the next string will be emitted.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.currColumn\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">currColumn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L227-L227","name":"Std.Format.MonadPrettyFormat.pushNewline","line":227,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushNewline","doc":"Emits a newline followed by `indent` columns of indentation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushNewline\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">pushNewline</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L223-L223","name":"Std.Format.MonadPrettyFormat.pushOutput","line":223,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushOutput","doc":"Emits the string `s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushOutput\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">pushOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L219-L219","name":"Std.Format.MonadPrettyFormat.mk","line":219,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pushOutput</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pushNewline</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currColumn</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startTag </span><span class=\"fn\">endTags</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L216-L239","name":"Std.Format.MonadPrettyFormat","line":216,"kind":"class","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat","doc":"A monad that can be used to incrementally render `Format` objects.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L198-L201","name":"Std.Format.FlattenAllowability.shouldFlatten","line":198,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.shouldFlatten","doc":"Whether the given directive indicates that flattening should occur. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.shouldFlatten\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenAllowability</span>.<span class=\"name\">shouldFlatten</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\">FlattenAllowability</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L196-L196","name":"Std.Format.instBEqFlattenAllowability","line":196,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenAllowability","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenAllowability\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instBEqFlattenAllowability</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\">FlattenAllowability</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L195-L195","name":"Std.Format.FlattenAllowability.disallow","line":195,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.disallow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.disallow\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenAllowability</span>.<span class=\"name\">disallow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\">FlattenAllowability</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L194-L194","name":"Std.Format.FlattenAllowability.allow","line":194,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.allow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.allow\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenAllowability</span>.<span class=\"name\">allow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fits</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\">FlattenAllowability</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L184-L196","name":"Std.Format.FlattenAllowability","line":184,"kind":"inductive","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability","doc":"A directive indicating whether a given work group is able to be flattened.\n\n- `allow` indicates that the group is allowed to be flattened; its argument is `true` if\n  there is sufficient space for it to be flattened (and so it should be), or `false` if not.\n- `disallow` means that this group should not be flattened irrespective of space concerns.\n  This is used at levels of a `Format` outside of any flattening groups. It is necessary to track\n  this so that, after a hard line break, we know whether to try to flatten the next line.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenAllowability</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L152-L152","name":"Std.Format.instInhabitedSpaceResult","line":152,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedSpaceResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instInhabitedSpaceResult\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instInhabitedSpaceResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Format/Basic.html#_private.Init.Data.Format.Basic.0.Std.Format.SpaceResult\">Std.Format.SpaceResult✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L138-L146","name":"Std.Format.isNil","line":138,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.isNil","doc":"Checks whether a `Format` is the constructor `Format.nil`.\n\nThis does not check whether the resulting rendered strings are always empty. To do that, use\n`Format.isEmpty`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.isNil\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">isNil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L132-L136","name":"Std.Format.join","line":132,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.join","doc":"Concatenates a list of `Format`s with `++`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.join\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L130-L130","name":"Std.Format.instCoeString","line":130,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instCoeString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instCoeString\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instCoeString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L129-L129","name":"Std.Format.instAppend","line":129,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instAppend\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L121-L127","name":"Std.Format.fill","line":121,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.fill","doc":"Creates a group in which as few `Format.line`s as possible are rendered as newlines.\n\nThis is an alias for `Format.group`, with `FlattenBehavior` set to `fill`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.fill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">fill</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L110-L119","name":"Std.Format.isEmpty","line":110,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.isEmpty","doc":"Checks whether the given format contains no characters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L106-L106","name":"Std.instInhabitedFormat","line":106,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instInhabitedFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instInhabitedFormat\"><span class=\"name\">Std</span>.<span class=\"name\">instInhabitedFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L104-L105","name":"Std.Format.tag","line":104,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.tag","doc":"Used for associating auxiliary information (e.g. `Expr`s) with `Format` objects. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.tag\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">tag</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L102-L103","name":"Std.Format.group","line":102,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.group","doc":"Creates a new flattening group for the given inner `Format`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.group\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">group</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <span class=\"fn\">(<span class=\"fn\">behavior</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone\">FlattenBehavior.allOrNone</a></span>) → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L100-L101","name":"Std.Format.append","line":100,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.append","doc":"Concatenation of two `Format`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.append\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L85-L99","name":"Std.Format.nest","line":85,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.nest","doc":"`nest indent f` increases the current indentation level by `indent` while rendering `f`.\n\nExample:\n```lean example\nopen Std Format in\ndef fmtList (l : List Format) : Format :=\n  let f := joinSep l  (\", \" ++ Format.line)\n  group (nest 1 <| \"[\" ++ f ++ \"]\")\n```\n\nThis will be written all on one line, but if the text is too large, the formatter will put in\nlinebreaks after the commas and indent later lines by 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nest\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L79-L84","name":"Std.Format.text","line":79,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.text","doc":"A node containing a plain string.\n\nIf the string contains newlines, the formatter emits them and then indents to the current level.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.text\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">text</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L62-L78","name":"Std.Format.align","line":62,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.align","doc":"`align` tells the formatter to pad with spaces to the current indentation level, or else add a\nnewline if we are already at or past the indent.\n\nIf `force` is true, then it will pad to the indent even if it is in a flattened group.\n\nExample:\n```lean example\nopen Std Format in\n#eval IO.println (nest 2 <| \".\" ++ align ++ \"a\" ++ line ++ \"b\")\n```\n```lean output\n. a\n  b\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.align\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">align</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">force</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L57-L61","name":"Std.Format.line","line":57,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.line","doc":"A position where a newline may be inserted if the current group does not fit within the allotted\ncolumn width.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.line\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">line</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L55-L56","name":"Std.Format.nil","line":55,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.nil","doc":"The empty format. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nil\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L45-L106","name":"Std.Format","line":45,"kind":"inductive","docLink":"./Init/Data/Format/Basic.html#Std.Format","doc":"A representation of a set of strings, in which the placement of newlines and indentation differ.\n\nGiven a specific line width, specified in columns, the string that uses the fewest lines can be\nselected.\n\nThe pretty-printing algorithm is based on Wadler's paper\n[_A Prettier Printer_](https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L42-L42","name":"Std.Format.instBEqFlattenBehavior","line":42,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instBEqFlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L42-L42","name":"Std.Format.instInhabitedFlattenBehavior","line":42,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instInhabitedFlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L38-L41","name":"Std.Format.FlattenBehavior.fill","line":38,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.fill","doc":"As few `Format.line`s in the group as possible will be newlines.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.fill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span>.<span class=\"name\">fill</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L34-L37","name":"Std.Format.FlattenBehavior.allOrNone","line":34,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone","doc":"Either all `Format.line`s in the group will be newlines, or all of them will be spaces.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span>.<span class=\"name\">allOrNone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Format/Basic.lean#L17-L42","name":"Std.Format.FlattenBehavior","line":17,"kind":"inductive","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior","doc":"Determines how groups should have linebreaks inserted when the text would overfill its remaining\nspace.\n\n- `allOrNone` will make a linebreak on every `Format.line` in the group or none of them.\n  ```\n  [1,\n   2,\n   3]\n  ```\n- `fill` will only make linebreaks on as few `Format.line`s as possible:\n  ```\n  [1, 2,\n   3]\n  ```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}