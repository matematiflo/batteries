{"name":"Init.Data.Range.Polymorphic.NatLemmas","instances":[],"imports":["Init.Data.Range.Polymorphic.Nat","Init.Data.Range.Polymorphic.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/NatLemmas.lean#L19-L23","name":"Std.PRange.Nat.ClosedOpen.toList_succ_succ","line":19,"kind":"theorem","docLink":"./Init/Data/Range/Polymorphic/NatLemmas.html#Std.PRange.Nat.ClosedOpen.toList_succ_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/NatLemmas.html#Std.PRange.Nat.ClosedOpen.toList_succ_succ\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ClosedOpen</span>.<span class=\"name\">toList_succ_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">m</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">n</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/NatLemmas.lean#L16-L17","name":"Std.PRange.Nat.succ_eq","line":16,"kind":"theorem","docLink":"./Init/Data/Range/Polymorphic/NatLemmas.html#Std.PRange.Nat.succ_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/NatLemmas.html#Std.PRange.Nat.succ_eq\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Nat</span>.<span class=\"name\">succ_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">UpwardEnumerable.succ</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"}]}