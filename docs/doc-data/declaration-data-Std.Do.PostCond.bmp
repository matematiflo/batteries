{"name":"Std.Do.PostCond","instances":[{"typeNames":["Std.Do.FailConds"],"name":"Std.Do.instInhabitedFailConds","className":"Inhabited"},{"typeNames":["Std.Do.PostCond"],"name":"Std.Do.instInhabitedPostCond","className":"Inhabited"}],"imports":["Std.Do.SPred"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L233-L237","name":"Std.Do.PostCond.and_eq_left","line":233,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.and_eq_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and_eq_left\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">and_eq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">⊢ₚ</a> <span class=\"fn\">q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">p</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and\">∧ₚ</a> <span class=\"fn\">q</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L231-L231","name":"Std.Do.«term_∧ₚ_»","line":231,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.«term_∧ₚ_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_∧ₚ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_∧ₚ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L228-L229","name":"Std.Do.PostCond.and","line":228,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L224-L226","name":"Std.Do.PostCond.entails_partial","line":224,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails_partial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails_partial\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails_partial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">⊢ₚ</a> <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.partial\">«partial»</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L220-L222","name":"Std.Do.PostCond.entails_total","line":220,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails_total","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails_total\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails_total</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Std.Do.PostCond.total <span class=\"fn\">p</span></span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">⊢ₚ</a> <span class=\"fn\">q</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L217-L218","name":"Std.Do.PostCond.entails.trans","line":217,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails.trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">⊢ₚ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">⊢ₚ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">⊢ₚ</a> <span class=\"fn\">R</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L215-L215","name":"Std.Do.PostCond.entails.rfl","line":215,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails.rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails.rfl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">⊢ₚ</a> <span class=\"fn\">Q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L213-L214","name":"Std.Do.PostCond.entails.refl","line":213,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails.refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">⊢ₚ</a> <span class=\"fn\">Q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L211-L211","name":"Std.Do.«term_⊢ₚ_»","line":211,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.«term_⊢ₚ_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_⊢ₚ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_⊢ₚ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L207-L209","name":"Std.Do.PostCond.entails","line":207,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L204-L205","name":"Std.Do.instInhabitedPostCond","line":204,"kind":"instance","docLink":"./Std/Do/PostCond.html#Std.Do.instInhabitedPostCond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.instInhabitedPostCond\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedPostCond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L200-L202","name":"Std.Do.PostCond.partial","line":200,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.partial","doc":"A postcondition expressing partial correctness. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.partial\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">partial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L193-L195","name":"Std.Do.PostCond.total","line":193,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.total","doc":"A postcondition expressing total correctness. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.total\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">total</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L185-L186","name":"Std.Do.«termPost⟨_,,⟩»","line":185,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.«termPost⟨_,,⟩»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«termPost⟨_,,⟩»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«termPost⟨_,,⟩»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L173-L183","name":"Std.Do.PostCond","line":173,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond","doc":"A multi-barreled postcondition for the given predicate shape.\n```\nexample : PostCond α (.arg ρ .pure) = ((α → ρ → Prop) × Unit) := rfl\nexample : PostCond α (.except ε .pure) = ((α → Prop) × (ε → Prop) × Unit) := rfl\nexample : PostCond α (.arg σ (.except ε .pure)) = ((α → σ → Prop) × (ε → Prop) × Unit) := rfl\nexample : PostCond α (.except ε (.arg σ .pure)) = ((α → σ → Prop) × (ε → σ → Prop) × Unit) := rfl\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L162-L171","name":"Std.Do.FailConds.and_eq_left","line":162,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.and_eq_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.and_eq_left\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">and_eq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <span class=\"fn\">q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">p</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.and\">∧ₑ</a> <span class=\"fn\">q</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L154-L160","name":"Std.Do.FailConds.false_and","line":154,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.false_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.false_and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">false_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.false\">false</a> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.and\">∧ₑ</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L146-L152","name":"Std.Do.FailConds.and_false","line":146,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.and_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.and_false\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">and_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.and\">∧ₑ</a> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.false\">false</a> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L138-L144","name":"Std.Do.FailConds.true_and","line":138,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.true_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.true_and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">true_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.true\">true</a> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.and\">∧ₑ</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L130-L136","name":"Std.Do.FailConds.and_true","line":130,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.and_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.and_true\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">and_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.and\">∧ₑ</a> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.true\">true</a> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L128-L128","name":"Std.Do.«term_∧ₑ_»","line":128,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.«term_∧ₑ_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_∧ₑ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_∧ₑ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L121-L126","name":"Std.Do.FailConds.and","line":121,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L117-L119","name":"Std.Do.FailConds.entails_true","line":117,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.entails_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails_true\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">entails_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L113-L115","name":"Std.Do.FailConds.entails_false","line":113,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.entails_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails_false\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">entails_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.false\">false</a> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L107-L111","name":"Std.Do.FailConds.entails.trans","line":107,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.entails.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails.trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">entails</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <span class=\"fn\">y</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <span class=\"fn\">z</span>) → <span class=\"fn\">x</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L105-L105","name":"Std.Do.FailConds.entails.rfl","line":105,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.entails.rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails.rfl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">entails</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L101-L103","name":"Std.Do.FailConds.entails.refl","line":101,"kind":"theorem","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.entails.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails.refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">entails</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\">⊢ₑ</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L99-L99","name":"Std.Do.«term_⊢ₑ_»","line":99,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.«term_⊢ₑ_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_⊢ₑ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_⊢ₑ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L93-L97","name":"Std.Do.FailConds.entails","line":93,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.entails","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.entails\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">entails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L90-L91","name":"Std.Do.instInhabitedFailConds","line":90,"kind":"instance","docLink":"./Std/Do/PostCond.html#Std.Do.instInhabitedFailConds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.instInhabitedFailConds\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedFailConds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L87-L88","name":"Std.Do.FailConds.false","line":87,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.false\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L84-L85","name":"Std.Do.FailConds.true","line":84,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.true\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L78-L82","name":"Std.Do.FailConds.const","line":78,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds.const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds.const\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span>.<span class=\"name\">const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.FailConds\">FailConds</a> <span class=\"fn\">ps</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L64-L76","name":"Std.Do.FailConds","line":64,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.FailConds","doc":"Encodes one continuation barrel for each `PostShape.except` in the given predicate shape.\n```\nexample : FailConds (.pure) = Unit := rfl\nexample : FailConds (.except ε .pure) = ((ε → Prop) × Unit) := rfl\nexample : FailConds (.arg σ (.except ε .pure)) = ((ε → Prop) × Unit) := rfl\nexample : FailConds (.except ε (.arg σ .pure)) = ((ε → σ → Prop) × Unit) := rfl\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.FailConds\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">FailConds</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L51-L62","name":"Std.Do.Assertion","line":51,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.Assertion","doc":"An assertion on the `.arg`s in the given predicate shape.\n```\nexample : Assertion (.arg ρ .pure) = (ρ → Prop) := rfl\nexample : Assertion (.except ε .pure) = Prop := rfl\nexample : Assertion (.arg σ (.except ε .pure)) = (σ → Prop) := rfl\nexample : Assertion (.except ε (.arg σ .pure)) = (σ → Prop) := rfl\n```\nThis is an abbreviation for `SPred` under the hood, so all theorems about `SPred` apply.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.Assertion\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Assertion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L46-L49","name":"Std.Do.PostShape.args","line":46,"kind":"def","docLink":"./Std/Do/PostCond.html#Std.Do.PostShape.args","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostShape.args\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostShape</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Type</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L44-L44","name":"Std.Do.PostShape.except","line":44,"kind":"ctor","docLink":"./Std/Do/PostCond.html#Std.Do.PostShape.except","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostShape</span>.<span class=\"name\">except</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a> → <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L43-L43","name":"Std.Do.PostShape.arg","line":43,"kind":"ctor","docLink":"./Std/Do/PostCond.html#Std.Do.PostShape.arg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostShape</span>.<span class=\"name\">arg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a> → <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L42-L42","name":"Std.Do.PostShape.pure","line":42,"kind":"ctor","docLink":"./Std/Do/PostCond.html#Std.Do.PostShape.pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostShape</span>.<span class=\"name\">pure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/PostCond.lean#L41-L44","name":"Std.Do.PostShape","line":41,"kind":"inductive","docLink":"./Std/Do/PostCond.html#Std.Do.PostShape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostShape\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostShape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>"}]}