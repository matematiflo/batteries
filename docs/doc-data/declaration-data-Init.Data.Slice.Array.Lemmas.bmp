{"name":"Init.Data.Slice.Array.Lemmas","instances":[],"imports":["Init.Data.Array.Subarray","Init.Data.Slice.Array.Basic","Init.Data.Slice.Array.Iterator","Init.Data.Slice.Operations","Init.Data.Range.Polymorphic.Iterators","Init.Data.Range.Polymorphic.Lemmas","Init.Data.Slice.Lemmas","Init.Data.Iterators.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Slice/Array/Lemmas.lean#L35-L45","name":"Std.Slice.Array.toList_internalIter","line":35,"kind":"theorem","docLink":"./Init/Data/Slice/Array/Lemmas.html#Std.Slice.Array.toList_internalIter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Lemmas.html#Std.Slice.Array.toList_internalIter\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Array</span>.<span class=\"name\">toList_internalIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Slice/Operations.html#Std.Slice.Internal.iter\">Internal.iter</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Array/Subarray.html#Subarray.array\">array</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a>) =&gt; <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Array/Subarray.html#Subarray.array\">array</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Array/Subarray.html#Subarray.start\">start</a></span>, <span class=\"fn\">upper</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Array/Subarray.html#Subarray.stop\">stop</a></span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>.<a href=\"./Init/Data/List/Attach.html#List.attachWith\">attachWith</a></span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Array/Subarray.html#Subarray.array\">array</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Slice/Array/Lemmas.lean#L24-L33","name":"Std.Slice.Array.internalIter_eq","line":24,"kind":"theorem","docLink":"./Init/Data/Slice/Array/Lemmas.html#Std.Slice.Array.internalIter_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Lemmas.html#Std.Slice.Array.internalIter_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Array</span>.<span class=\"name\">internalIter_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Operations.html#Std.Slice.Internal.iter\">Internal.iter</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/FilterMap.html#Std.Iterators.Iter.map\">Iterators.Iter.map</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Array/Subarray.html#Subarray.array\">array</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#ULift.up\">}</a> =&gt; <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Array/Subarray.html#Subarray.array\">array</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.Internal.iter\">PRange.Internal.iter</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Array/Subarray.html#Subarray.start\">start</a></span>, <span class=\"fn\">upper</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Array/Subarray.html#Subarray.stop\">stop</a></span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>)</span>.<a href=\"./Init/Data/Iterators/Combinators/Attach.html#Std.Iterators.Iter.attachWith\">attachWith</a></span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Array/Subarray.html#Subarray.array\">array</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span>\n        <span class=\"fn\">⋯</span>)</span>.<a href=\"./Init/Data/Iterators/Combinators/ULift.html#Std.Iterators.Iter.uLift\">uLift</a></span></span></div></div>"}]}