{"name":"Init.TacticsExtra","instances":[],"imports":["Init.Tactics","Init.NotationExtra"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/TacticsExtra.lean#L92-L92","name":"Lean.Parser.Tactic.tacticApply_mod_cast_","line":92,"kind":"def","docLink":"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticApply_mod_cast_","doc":"Normalize casts in the goal and the given expression, then `apply` the expression to the goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticApply_mod_cast_\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticApply_mod_cast_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/TacticsExtra.lean#L87-L87","name":"Lean.Parser.Tactic.tacticExact_mod_cast_","line":87,"kind":"def","docLink":"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticExact_mod_cast_","doc":"Normalize casts in the goal and the given expression, then close the goal with `exact`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticExact_mod_cast_\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticExact_mod_cast_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/TacticsExtra.lean#L74-L77","name":"Lean.Parser.Tactic.tacticRw_mod_cast___","line":74,"kind":"def","docLink":"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticRw_mod_cast___","doc":"Rewrites with the given rules, normalizing casts prior to each step.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticRw_mod_cast___\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticRw_mod_cast___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/TacticsExtra.lean#L52-L65","name":"Lean.Parser.Tactic.tacticIterate____","line":52,"kind":"def","docLink":"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticIterate____","doc":"`iterate n tac` runs `tac` exactly `n` times.\n`iterate tac` runs `tac` repeatedly until failure.\n\n`iterate`'s argument is a tactic sequence,\nso multiple tactics can be run using `iterate n (tac₁; tac₂; ⋯)` or\n```lean\niterate n\n  tac₁\n  tac₂\n  ⋯\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticIterate____\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticIterate____</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"}]}