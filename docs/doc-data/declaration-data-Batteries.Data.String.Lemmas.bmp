{"name":"Batteries.Data.String.Lemmas","instances":[{"typeNames":["String"],"name":"String.instTransOrd_1","className":"Batteries.TransCmp"},{"typeNames":["String"],"name":"String.instLTOrd","className":"Batteries.LTCmp"},{"typeNames":["String"],"name":"String.instBEqOrd","className":"Batteries.BEqCmp"}],"imports":["Init","Batteries.Data.Char","Batteries.Data.List.Lemmas","Batteries.Data.String.Basic","Batteries.Tactic.Lint.Misc","Batteries.Tactic.SeqFocus","Std.Classes.Ord.String"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1088-L1089","name":"String.data_dropWhile","line":1088,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_dropWhile\"><span class=\"name\">String</span>.<span class=\"name\">data_dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.dropWhile\">dropWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1085-L1086","name":"String.dropWhile_eq","line":1085,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.dropWhile_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.dropWhile_eq\"><span class=\"name\">String</span>.<span class=\"name\">dropWhile_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.dropWhile\">dropWhile</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1082-L1083","name":"String.data_takeWhile","line":1082,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_takeWhile\"><span class=\"name\">String</span>.<span class=\"name\">data_takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.takeWhile\">takeWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1079-L1080","name":"String.takeWhile_eq","line":1079,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.takeWhile_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.takeWhile_eq\"><span class=\"name\">String</span>.<span class=\"name\">takeWhile_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.takeWhile\">takeWhile</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1077-L1077","name":"String.data_take","line":1077,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_take\"><span class=\"name\">String</span>.<span class=\"name\">data_take</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.take\">take</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1074-L1075","name":"String.take_eq","line":1074,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.take_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.take_eq\"><span class=\"name\">String</span>.<span class=\"name\">take_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.take\">take</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1072-L1072","name":"String.drop_empty","line":1072,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.drop_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.drop_empty\"><span class=\"name\">String</span>.<span class=\"name\">drop_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.<a href=\"./Init/Data/String/Basic.html#String.drop\">drop</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1070-L1070","name":"String.data_drop","line":1070,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_drop\"><span class=\"name\">String</span>.<span class=\"name\">data_drop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.drop\">drop</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1067-L1068","name":"String.drop_eq","line":1067,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.drop_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.drop_eq\"><span class=\"name\">String</span>.<span class=\"name\">drop_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.drop\">drop</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1056-L1058","name":"Substring.Valid.data_dropWhile","line":1056,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">dropWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1053-L1054","name":"Substring.Valid.dropWhile","line":1053,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">dropWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1049-L1051","name":"Substring.Valid.data_takeWhile","line":1049,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">takeWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1046-L1047","name":"Substring.Valid.takeWhile","line":1046,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">takeWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1043-L1044","name":"Substring.Valid.contains","line":1043,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.contains\">contains</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1040-L1041","name":"Substring.Valid.all","line":1040,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.all\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.all\">all</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.all\">all</a></span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1037-L1038","name":"Substring.Valid.any","line":1037,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.any\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.any\">any</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.any\">any</a></span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1034-L1035","name":"Substring.Valid.foldr","line":1034,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldr\">Substring.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1031-L1032","name":"Substring.Valid.foldl","line":1031,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldl\">Substring.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1022-L1029","name":"Substring.Valid.toString_extract","line":1022,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.toString_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.toString_extract\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">toString_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.mk\">{</a> <span class=\"fn\">str</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Substring.mk\">}</a>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.extract\">extract</a></span> <span class=\"fn\">b</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Data/String/Basic.html#String.extract\">extract</a></span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1014-L1020","name":"Substring.Valid.extract","line":1014,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.mk\">{</a> <span class=\"fn\">str</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Substring.mk\">}</a>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.extract\">extract</a></span> <span class=\"fn\">b</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1011-L1012","name":"Substring.Valid.atEnd","line":1011,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.atEnd\">atEnd</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1006-L1007","name":"Substring.Valid.data_take","line":1006,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_take\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.take\">take</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1003-L1004","name":"Substring.Valid.take","line":1003,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.take\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.take\">take</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L1000-L1001","name":"Substring.Valid.data_drop","line":1000,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_drop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.drop\">drop</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L997-L998","name":"Substring.Valid.drop","line":997,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.drop\">drop</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L994-L995","name":"Substring.Valid.front","line":994,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.front\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">front</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.front\">front</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L988-L992","name":"Substring.Valid.prevn","line":988,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂ </span><span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.prevn\">prevn</a></span> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m₁</span>)</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L982-L986","name":"Substring.Valid.nextn","line":982,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.nextn\">nextn</a></span> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m₂</span>)</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L979-L980","name":"Substring.Valid.nextn_stop","line":979,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">nextn_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.nextn\">nextn</a></span> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L973-L977","name":"Substring.Valid.prev","line":973,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.prev\">prev</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L970-L971","name":"Substring.Valid.next_stop","line":970,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.next_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.next_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.next\">next</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L964-L968","name":"Substring.Valid.next","line":964,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.next\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.next\">next</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L959-L962","name":"Substring.Valid.get","line":959,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.get\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.get\">get</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L956-L957","name":"Substring.Valid.isEmpty","line":956,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → (<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L953-L954","name":"Substring.Valid.bsize","line":953,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.bsize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.bsize\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">bsize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L950-L951","name":"String.valid_toSubstring","line":950,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.valid_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.valid_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">valid_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.toSubstring\">toSubstring</a></span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L947-L948","name":"Substring.Valid.valid","line":947,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.valid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L935-L945","name":"Substring.Valid.validFor","line":935,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.validFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.validFor\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">validFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">m</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L922-L927","name":"Substring.ValidFor.dropWhile","line":922,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span>) <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">dropWhile</a></span> <span class=\"fn\">p</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L915-L920","name":"Substring.ValidFor.takeWhile","line":915,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span>)</span> (<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">takeWhile</a></span> <span class=\"fn\">p</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L912-L913","name":"Substring.ValidFor.contains","line":912,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.contains\">contains</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L909-L910","name":"Substring.ValidFor.all","line":909,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.all\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.all\">all</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Data/List/Basic.html#List.all\">all</a></span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L906-L907","name":"Substring.ValidFor.any","line":906,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.any\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.any\">any</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Data/List/Basic.html#List.any\">any</a></span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L903-L904","name":"Substring.ValidFor.foldr","line":903,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldr\">Substring.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L900-L901","name":"Substring.ValidFor.foldl","line":900,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldl\">Substring.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L883-L896","name":"Substring.ValidFor.extract","line":883,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r </span><span class=\"fn\">ml </span><span class=\"fn\">mm </span><span class=\"fn\">mr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">ml</span> <span class=\"fn\">mm</span> <span class=\"fn\">mr</span> <a href=\"./Init/Prelude.html#Substring.mk\">{</a> <span class=\"fn\">str</span> := <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Substring.mk\">}</a></span> →\n    <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">r'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l'</span> <span class=\"fn\">mm</span> <span class=\"fn\">r'</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.extract\">extract</a></span> <span class=\"fn\">b</span> <span class=\"fn\">e</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L880-L881","name":"Substring.ValidFor.atEnd","line":880,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.atEnd\">atEnd</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L867-L876","name":"Substring.ValidFor.take","line":867,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.take\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span> (<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.take\">take</a></span> <span class=\"fn\">n</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L856-L865","name":"Substring.ValidFor.drop","line":856,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>) <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.drop\">drop</a></span> <span class=\"fn\">n</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L853-L854","name":"Substring.ValidFor.front","line":853,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.front\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">front</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.front\">front</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L842-L851","name":"Substring.ValidFor.prevn","line":842,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m₂ </span><span class=\"fn\">r </span><span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.prevn\">prevn</a></span> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m₁</span>)</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L830-L840","name":"Substring.ValidFor.nextn","line":830,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m₁ </span><span class=\"fn\">m₂ </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.nextn\">nextn</a></span> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m₂</span>)</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L826-L828","name":"Substring.ValidFor.nextn_stop","line":826,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.nextn\">nextn</a></span> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L816-L824","name":"Substring.ValidFor.prev","line":816,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂ </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.prev\">prev</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L813-L814","name":"Substring.ValidFor.next_stop","line":813,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.next\">next</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L801-L811","name":"Substring.ValidFor.next","line":801,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂ </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.next\">next</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L798-L799","name":"Substring.ValidFor.get","line":798,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.get\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂ </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.get\">get</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L793-L796","name":"Substring.ValidFor.toIterator","line":793,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toIterator\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>) <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toIterator\">toIterator</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L790-L791","name":"Substring.ValidFor.toString","line":790,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toString\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#String.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L787-L788","name":"Substring.ValidFor.isEmpty","line":787,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → (<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L784-L785","name":"Substring.ValidFor.bsize","line":784,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.bsize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.bsize\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">bsize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L781-L782","name":"Substring.ValidFor.stopPos","line":781,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.stopPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.stopPos\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">stopPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L778-L779","name":"Substring.ValidFor.startPos","line":778,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.startPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.startPos\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">startPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L775-L776","name":"Substring.ValidFor.str","line":775,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.str","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.str\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">str</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L772-L773","name":"String.validFor_toSubstring","line":772,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.validFor_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.validFor_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">validFor_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.toSubstring\">toSubstring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L765-L770","name":"Substring.ValidFor.of_eq","line":765,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.of_eq\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span>.<a href=\"./Init/Prelude.html#String.Pos.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span>.<a href=\"./Init/Prelude.html#String.Pos.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L762-L763","name":"Substring.ValidFor.valid","line":762,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.valid\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L757-L758","name":"Substring.ValidFor.mk","line":757,"kind":"ctor","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.mk","doc":"The constructor for `ValidFor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.mk\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span>\n  <a href=\"./Init/Prelude.html#Substring.mk\">{</a> <span class=\"fn\">str</span> := <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>, <span class=\"fn\">startPos</span> := <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a>,\n    <span class=\"fn\">stopPos</span> := <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#Substring.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L754-L758","name":"Substring.ValidFor","line":754,"kind":"inductive","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor","doc":"A substring is represented by three lists `l m r`, where `m` is the middle section\n(the actual substring) and `l ++ m ++ r` is the underlying string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L752-L752","name":"Substring.Valid_default","line":752,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid_default\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid_default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited.default\">default</a>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L750-L750","name":"Substring.Valid.le","line":750,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.le","doc":"The stop position of a substring is at least the start. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.le\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L748-L748","name":"Substring.Valid.stopValid","line":748,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.stopValid","doc":"The stop position of a valid substring is valid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.stopValid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">stopValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L746-L746","name":"Substring.Valid.startValid","line":746,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.startValid","doc":"The start position of a valid substring is valid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.startValid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">startValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L744-L744","name":"Substring.Valid.mk","line":744,"kind":"ctor","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.mk\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startValid</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stopValid</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L743-L750","name":"Substring.Valid","line":743,"kind":"structure","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid","doc":"Validity for a substring. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L724-L735","name":"String.takeWhileAux_of_valid","line":724,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.takeWhileAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.takeWhileAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">takeWhileAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.takeWhileAux\">Substring.takeWhileAux</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L717-L718","name":"String.map_eq","line":717,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.map_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.map_eq\"><span class=\"name\">String</span>.<span class=\"name\">map_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L707-L715","name":"String.mapAux_of_valid","line":707,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.mapAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.mapAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">mapAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.mapAux\">mapAux</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L704-L705","name":"String.contains_iff","line":704,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.contains_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.contains_iff\"><span class=\"name\">String</span>.<span class=\"name\">contains_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.contains\">contains</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L702-L702","name":"String.all_iff","line":702,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.all_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.all_iff\"><span class=\"name\">String</span>.<span class=\"name\">all_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.all\">all</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>), <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L699-L700","name":"String.all_eq","line":699,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.all_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.all_eq\"><span class=\"name\">String</span>.<span class=\"name\">all_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.all\">all</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.all\">all</a></span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L697-L697","name":"String.any_iff","line":697,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.any_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.any_iff\"><span class=\"name\">String</span>.<span class=\"name\">any_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.any\">any</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Char\">Char</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L694-L695","name":"String.any_eq","line":694,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.any_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.any_eq\"><span class=\"name\">String</span>.<span class=\"name\">any_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.any\">any</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.any\">any</a></span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L681-L692","name":"String.anyAux_of_valid","line":681,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.anyAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.anyAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">anyAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.anyAux\">anyAux</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Data/List/Basic.html#List.any\">any</a></span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L678-L679","name":"String.foldr_eq","line":678,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldr_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldr_eq\"><span class=\"name\">String</span>.<span class=\"name\">foldr_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldr\">foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L667-L676","name":"String.foldrAux_of_valid","line":667,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldrAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldrAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">foldrAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldrAux\">foldrAux</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L664-L665","name":"String.foldl_eq","line":664,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldl_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldl_eq\"><span class=\"name\">String</span>.<span class=\"name\">foldl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L653-L662","name":"String.foldlAux_of_valid","line":653,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldlAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldlAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">foldlAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldlAux\">foldlAux</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L650-L651","name":"String.offsetOfPos_of_valid","line":650,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.offsetOfPos_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.offsetOfPos_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPos_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.offsetOfPos\">offsetOfPos</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L638-L648","name":"String.offsetOfPosAux_of_valid","line":638,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.offsetOfPosAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.offsetOfPosAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPosAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.offsetOfPosAux\">offsetOfPosAux</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L631-L633","name":"String.Iterator.Valid.prevn","line":631,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.prevn\">prevn</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L627-L629","name":"String.Iterator.Valid.remainingToString","line":627,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingToString\">remainingToString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L625-L625","name":"String.Iterator.Valid.toEnd","line":625,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.toEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">toEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">toEnd</a></span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L620-L623","name":"String.Iterator.Valid.setCurr","line":620,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.setCurr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">setCurr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">setCurr</a></span> <span class=\"fn\">c</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L614-L618","name":"String.Iterator.Valid.prev","line":614,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">prev</a></span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L608-L612","name":"String.Iterator.Valid.next","line":608,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">next</a></span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L605-L606","name":"String.Iterator.Valid.remainingBytes_le","line":605,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingBytes_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingBytes_le\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">remainingBytes_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingBytes\">remainingBytes</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.s\">s</a></span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L603-L603","name":"String.valid_mkIterator","line":603,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.valid_mkIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.valid_mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">valid_mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.mkIterator\">mkIterator</a></span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L599-L601","name":"String.Iterator.Valid.validFor","line":599,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.validFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.validFor\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">validFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span> → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L587-L593","name":"String.Iterator.ValidFor.prevn","line":587,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span>)</span> (<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.prevn\">prevn</a></span> <span class=\"fn\">n</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L579-L585","name":"String.Iterator.ValidFor.nextn","line":579,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> (<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>) <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\">nextn</a></span> <span class=\"fn\">n</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L575-L577","name":"String.Iterator.ValidFor.remainingToString","line":575,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingToString\">remainingToString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L566-L573","name":"String.Iterator.ValidFor.extract","line":566,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.extract\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it₁ </span><span class=\"fn\">it₂</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>) <span class=\"fn\">it₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>) <span class=\"fn\">r</span> <span class=\"fn\">it₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it₁</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.extract\">extract</a></span> <span class=\"fn\">it₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L562-L564","name":"String.Iterator.ValidFor.toEnd'","line":562,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toEnd'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.s\">s</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">toEnd</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L558-L560","name":"String.Iterator.ValidFor.toEnd","line":558,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> (<span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>) <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">toEnd</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L555-L556","name":"String.Iterator.ValidFor.setCurr","line":555,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">setCurr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>) <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">setCurr</a></span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L546-L553","name":"String.Iterator.ValidFor.setCurr'","line":546,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">setCurr'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c</span>)</span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">setCurr</a></span> <span class=\"fn\">c</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L543-L544","name":"String.Iterator.ValidFor.hasPrev","line":543,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasPrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasPrev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">hasPrev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → (<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasPrev\">hasPrev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L540-L541","name":"String.Iterator.ValidFor.hasNext","line":540,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasNext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasNext\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">hasNext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → (<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L534-L538","name":"String.Iterator.ValidFor.atEnd","line":534,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → (<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.atEnd\">atEnd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L528-L532","name":"String.Iterator.ValidFor.prev_nil","line":528,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev_nil\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">prev</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L519-L526","name":"String.Iterator.ValidFor.prev","line":519,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>) <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>) <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">prev</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L513-L517","name":"String.Iterator.ValidFor.next","line":513,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>) <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>) <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">next</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L510-L511","name":"String.Iterator.ValidFor.curr","line":510,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.curr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.curr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">curr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.curr\">curr</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/List/Basic.html#List.headD\">headD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L506-L508","name":"String.Iterator.ValidFor.pos_eq_endPos","line":506,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos_eq_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.i\">i</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.s\">s</a></span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L503-L504","name":"String.Iterator.ValidFor.pos_eq_zero","line":503,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.i\">i</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L500-L501","name":"String.Iterator.ValidFor.pos","line":500,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.i\">i</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L497-L498","name":"String.Iterator.ValidFor.toString","line":497,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.s\">s</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverseAux\">reverseAux</a></span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#String.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L494-L495","name":"String.Iterator.ValidFor.remainingBytes","line":494,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingBytes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingBytes\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">remainingBytes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingBytes\">remainingBytes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L492-L492","name":"String.validFor_mkIterator","line":492,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.validFor_mkIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.validFor_mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">validFor_mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">Iterator.ValidFor</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.mkIterator\">mkIterator</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L489-L490","name":"String.Iterator.ValidFor.of_eq","line":489,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.of_eq\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.s\">s</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverseAux\">reverseAux</a></span> <span class=\"fn\">r</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.i\">i</a></span>.<a href=\"./Init/Prelude.html#String.Pos.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L486-L487","name":"String.Iterator.ValidFor.mk'","line":486,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">{</a> <span class=\"fn\">s</span> := <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>, <span class=\"fn\">i</span> := <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L483-L484","name":"String.Iterator.ValidFor.out'","line":483,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">out'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">it</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">{</a> <span class=\"fn\">s</span> := <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>, <span class=\"fn\">i</span> := <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L480-L481","name":"String.Iterator.ValidFor.out","line":480,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">it</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">{</a> <span class=\"fn\">s</span> := <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverseAux\">reverseAux</a></span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#String.mk\">}</a>, <span class=\"fn\">i</span> := <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L477-L478","name":"String.Iterator.ValidFor.valid","line":477,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.valid\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L470-L471","name":"String.Iterator.ValidFor.mk","line":470,"kind":"ctor","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk","doc":"The canonical constructor for `ValidFor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">{</a> <span class=\"fn\">s</span> := <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverseAux\">reverseAux</a></span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#String.mk\">}</a>, <span class=\"fn\">i</span> := <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L467-L471","name":"String.Iterator.ValidFor","line":467,"kind":"inductive","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor","doc":"`it.ValidFor l r` means that `it` is a string iterator whose underlying string is\n`l.reverse ++ r`, and where the cursor is pointing at the end of `l.reverse`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L464-L465","name":"String.Iterator.Valid","line":464,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid","doc":"Validity for a string iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L460-L462","name":"String.Iterator.hasNext_cons_addChar","line":460,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.hasNext_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.hasNext_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasNext_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">{</a> <span class=\"fn\">s</span> := <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>, <span class=\"fn\">i</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">{</a> <span class=\"fn\">s</span> := <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>, <span class=\"fn\">i</span> := <span class=\"fn\">i</span> <a href=\"./Init/Data/String/Basic.html#String.Iterator.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L457-L458","name":"String.Iterator.forward_eq_nextn","line":457,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.forward_eq_nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.forward_eq_nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">forward_eq_nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.forward\">forward</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\">nextn</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L452-L453","name":"String.data_join","line":452,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_join\"><span class=\"name\">String</span>.<span class=\"name\">data_join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.join\">join</a> <span class=\"fn\">ss</span>)</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">data</a> <span class=\"fn\">ss</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L448-L450","name":"String.join_eq.go","line":448,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.join_eq.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.join_eq.go\"><span class=\"name\">String</span>.<span class=\"name\">join_eq</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#String\">String</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x2</span>)</span> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#String.mk\">}</a> <span class=\"fn\">ss</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">data</a> <span class=\"fn\">ss</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L447-L450","name":"String.join_eq","line":447,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.join_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.join_eq\"><span class=\"name\">String</span>.<span class=\"name\">join_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.join\">join</a> <span class=\"fn\">ss</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">data</a> <span class=\"fn\">ss</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L442-L443","name":"String.toString_toSubstring","line":442,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.toString_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.toString_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">toString_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.toSubstring\">toSubstring</a></span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L437-L438","name":"String.split_of_valid","line":437,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.split_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.split_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">split_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.split\">split</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.mk\">mk</a> <span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.splitOnP\">List.splitOnP</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L417-L435","name":"String.splitAux_of_valid","line":417,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.splitAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.splitAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">splitAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.splitAux\">splitAux</a></span> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.mk\">mk</a> <span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.splitOnP.go\">List.splitOnP.go</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L409-L415","name":"String.extract_of_valid","line":409,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">extract_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.extract\">extract</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L401-L407","name":"String.extract_zero_endPos","line":401,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract_zero_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract_zero_endPos\"><span class=\"name\">String</span>.<span class=\"name\">extract_zero_endPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.extract\">extract</a></span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L396-L399","name":"String.extract_cons_addChar","line":396,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">extract_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.extract\">extract</a></span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) (<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.extract\">extract</a></span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L392-L394","name":"String.extract.go₁_zero_utf8Len","line":392,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_zero_utf8Len","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_zero_utf8Len\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_zero_utf8Len</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L384-L390","name":"String.extract.go₁_append_right","line":384,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_append_right\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_append_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>) <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">go₂</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L378-L382","name":"String.extract.go₁_cons_addChar","line":378,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>) <span class=\"fn\">0</span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) (<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> <span class=\"fn\">cs</span> <span class=\"fn\">0</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L365-L376","name":"String.extract.go₁_add_right_cancel","line":365,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">b </span><span class=\"fn\">e </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L357-L363","name":"String.extract.go₂_append_left","line":357,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₂_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₂_append_left\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂_append_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">go₂</a> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>) <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L346-L355","name":"String.extract.go₂_add_right_cancel","line":346,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₂_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₂_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">e </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">go₂</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">go₂</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L341-L344","name":"String.firstDiffPos_eq","line":341,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_eq\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/String/Basic.html#String.firstDiffPos\">firstDiffPos</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.takeWhile₂\">List.takeWhile₂</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x2</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L311-L339","name":"String.firstDiffPos_loop_eq","line":311,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_loop_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_loop_eq\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos_loop_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stop </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl₁</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl₂</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hstop</span> : <span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> (<span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">r₁</span></span>) (<span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">r₂</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.firstDiffPos.loop\">firstDiffPos.loop</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#String.mk\">}</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₂</span> <a href=\"./Init/Prelude.html#String.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.takeWhile₂\">List.takeWhile₂</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x2</span>)</span>)</span> <span class=\"fn\">r₁</span> <span class=\"fn\">r₂</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L307-L309","name":"String.revFind_of_valid","line":307,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revFind_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revFind_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">revFind_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.revFind\">revFind</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) =&gt; <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.tail?\">tail?</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L293-L305","name":"String.revFindAux_of_valid","line":293,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revFindAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revFindAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">revFindAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.revFindAux\">revFindAux</a></span> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) =&gt; <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.tail?\">tail?</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L290-L291","name":"String.find_of_valid","line":290,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.find_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.find_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">find_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.find\">find</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>)</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L270-L288","name":"String.findAux_of_valid","line":270,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.findAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.findAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">findAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.findAux\">findAux</a></span> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L268-L268","name":"String.revPosOf_eq","line":268,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revPosOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revPosOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">revPosOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.revPosOf\">revPosOf</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.revFind\">revFind</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L265-L265","name":"String.revPosOfAux_eq","line":265,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revPosOfAux_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revPosOfAux_eq\"><span class=\"name\">String</span>.<span class=\"name\">revPosOfAux_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.revPosOfAux\">revPosOfAux</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.revFindAux\">revFindAux</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L262-L262","name":"String.posOf_eq","line":262,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.posOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.posOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">posOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.posOf\">posOf</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.find\">find</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L259-L259","name":"String.posOfAux_eq","line":259,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.posOfAux_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.posOfAux_eq\"><span class=\"name\">String</span>.<span class=\"name\">posOfAux_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.posOfAux\">posOfAux</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.findAux\">findAux</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L253-L256","name":"String.atEnd_of_valid","line":253,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.atEnd_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.atEnd_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">atEnd_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.atEnd\">atEnd</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L248-L251","name":"String.back_eq","line":248,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.back_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.back_eq\"><span class=\"name\">String</span>.<span class=\"name\">back_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.back\">back</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.getLastD\">getLastD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L245-L246","name":"String.front_eq","line":245,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.front_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.front_eq\"><span class=\"name\">String</span>.<span class=\"name\">front_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.front\">front</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.headD\">headD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L239-L243","name":"String.prev_of_valid'","line":239,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.prev_of_valid'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.prev_of_valid'\"><span class=\"name\">String</span>.<span class=\"name\">prev_of_valid'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.prev\">prev</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">cs</span>.<a href=\"./Init/Data/List/Basic.html#List.dropLast\">dropLast</a></span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L233-L237","name":"String.prev_of_valid","line":233,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.prev_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.prev_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">prev_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.prev\">prev</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L218-L231","name":"String.utf8PrevAux_of_valid","line":218,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8PrevAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8PrevAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8PrevAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8PrevAux\">utf8PrevAux</a> (<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span>) <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L211-L216","name":"String.valid_next","line":211,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.valid_next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.valid_next\"><span class=\"name\">String</span>.<span class=\"name\">valid_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.next\">next</a></span> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L208-L209","name":"String.atEnd_iff","line":208,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.atEnd_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.atEnd_iff\"><span class=\"name\">String</span>.<span class=\"name\">atEnd_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.atEnd\">atEnd</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L205-L206","name":"String.next_of_valid","line":205,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.next_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.next_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">next_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.next\">next</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L201-L203","name":"String.next_of_valid'","line":201,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.next_of_valid'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.next_of_valid'\"><span class=\"name\">String</span>.<span class=\"name\">next_of_valid'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.next\">next</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs'</span>.<a href=\"./Init/Data/List/Basic.html#List.headD\">headD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a>)</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L197-L199","name":"String.modify_of_valid","line":197,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.modify_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.modify_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">modify_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.modify\">modify</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">f</span> <span class=\"fn\">cs'</span></span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L193-L195","name":"String.set_of_valid","line":193,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.set_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.set_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">set_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c'</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.set\">set</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <span class=\"fn\">c'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c'</span>)</span> <span class=\"fn\">cs'</span></span> <a href=\"./Init/Prelude.html#String.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L181-L191","name":"String.utf8SetAux_of_valid","line":181,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8SetAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8SetAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8SetAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c'</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8SetAux\">utf8SetAux</a> <span class=\"fn\">c'</span> (<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span>) <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c'</span>)</span> <span class=\"fn\">cs'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L178-L179","name":"String.get?_of_valid","line":178,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.get?_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.get?_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">get?_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.get?\">get?</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cs'</span>.<a href=\"./Init/Data/List/Basic.html#List.head?\">head?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L166-L176","name":"String.utf8GetAux?_of_valid","line":166,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux?_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux?_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux?_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux?\">utf8GetAux?</a> (<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span>) <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cs'</span>.<a href=\"./Init/Data/List/Basic.html#List.head?\">head?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L162-L164","name":"String.get_cons_addChar","line":162,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.get_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.get_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">get_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.get\">get</a></span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L159-L160","name":"String.get_of_valid","line":159,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.get_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.get_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">get_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.get\">get</a></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cs'</span>.<a href=\"./Init/Data/List/Basic.html#List.headD\">headD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L147-L157","name":"String.utf8GetAux_of_valid","line":147,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">utf8GetAux</a> (<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span>) <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cs'</span>.<a href=\"./Init/Data/List/Basic.html#List.headD\">headD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L144-L145","name":"String.utf8GetAux_addChar_right_cancel","line":144,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_addChar_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_addChar_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_addChar_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">utf8GetAux</a> <span class=\"fn\">s</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L133-L142","name":"String.utf8GetAux_add_right_cancel","line":133,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">p </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">utf8GetAux</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">utf8GetAux</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L116-L131","name":"String.utf8InductionOn","line":116,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8InductionOn","doc":"Induction along the valid positions in a list of characters.\n(This definition is intended only for specification purposes.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8InductionOn\"><span class=\"name\">String</span>.<span class=\"name\">utf8InductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">Pos</a> → <a href=\"./foundational_types.html\">Sort</a> u</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) → <span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>) <span class=\"fn\">p</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ind</span> : <span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) → <span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) → <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>) → <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">cs</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>) <span class=\"fn\">i</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L113-L114","name":"String.isEmpty_iff","line":113,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.isEmpty_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.isEmpty_iff\"><span class=\"name\">String</span>.<span class=\"name\">isEmpty_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L110-L111","name":"String.endPos_eq_zero","line":110,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.endPos_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.endPos_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">endPos_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L105-L106","name":"String.Pos.Valid.le_endPos","line":105,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.le_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.le_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span>.<span class=\"name\">le_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> → <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L103-L103","name":"String.Pos.Valid.mk","line":103,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Valid</a> <a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#String.mk\">}</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L101-L101","name":"String.Pos.valid_endPos","line":101,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.valid_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.valid_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">valid_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Valid</a> <span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L99-L99","name":"String.Pos.valid_zero","line":99,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.valid_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.valid_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">valid_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L95-L97","name":"String.Pos.Valid","line":95,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.Valid","doc":"A string position is valid if it is equal to the UTF-8 length of an initial substring of `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L90-L90","name":"String.Pos.lt_addChar","line":90,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.lt_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.lt_addChar\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">lt_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L83-L83","name":"String.endPos_eq","line":83,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.endPos_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.endPos_eq\"><span class=\"name\">String</span>.<span class=\"name\">endPos_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#String.Pos.mk\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L79-L80","name":"String.utf8Len_le_of_prefix","line":79,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_prefix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">cs₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">cs₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L76-L77","name":"String.utf8Len_le_of_suffix","line":76,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_suffix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">cs₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">cs₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L73-L74","name":"String.utf8Len_le_of_infix","line":73,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_infix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_infix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_infix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">cs₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">cs₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L68-L71","name":"String.utf8Len_le_of_sublist","line":68,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_sublist\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cs₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">cs₂</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L63-L64","name":"String.utf8Len_eq_zero","line":63,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L61-L61","name":"String.utf8Len_reverse","line":61,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverse\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_reverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">cs</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L57-L59","name":"String.utf8Len_reverseAux","line":57,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverseAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverseAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_reverseAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverseAux\">reverseAux</a></span> <span class=\"fn\">cs₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L54-L55","name":"String.utf8Len_append","line":54,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_append\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> (<span class=\"fn\">cs₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L52-L52","name":"String.utf8Len_cons","line":52,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_cons\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L50-L50","name":"String.utf8Len_nil","line":50,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_nil\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L48-L48","name":"String.utf8ByteSize_mk","line":48,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize_mk\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L46-L46","name":"String.utf8ByteSize.go_eq","line":46,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize.go_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize.go_eq\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize</span>.<span class=\"name\">go_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.utf8ByteSize.go\">go</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L43-L44","name":"String.utf8Len","line":43,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len","doc":"The UTF-8 byte length of a list of characters. (This is intended for specification purposes.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L30-L30","name":"String.mk_length","line":30,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.mk_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.mk_length\"><span class=\"name\">String</span>.<span class=\"name\">mk_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.mk\">{</a> <span class=\"fn\">data</span> := <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#String.mk\">}</a>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L28-L28","name":"String.instBEqOrd","line":28,"kind":"instance","docLink":"./Batteries/Data/String/Lemmas.html#String.instBEqOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.instBEqOrd\"><span class=\"name\">String</span>.<span class=\"name\">instBEqOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.BEqOrd\">Batteries.BEqOrd</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L25-L26","name":"String.instLTOrd","line":25,"kind":"instance","docLink":"./Batteries/Data/String/Lemmas.html#String.instLTOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.instLTOrd\"><span class=\"name\">String</span>.<span class=\"name\">instLTOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LTOrd\">Batteries.LTOrd</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L22-L23","name":"String.instTransOrd_1","line":22,"kind":"instance","docLink":"./Batteries/Data/String/Lemmas.html#String.instTransOrd_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.instTransOrd_1\"><span class=\"name\">String</span>.<span class=\"name\">instTransOrd_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.TransOrd\">Batteries.TransOrd</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/82fd0cf6aaa1e2580aa17b3b1e5b9140e6e6a5e5/Batteries/Data/String/Lemmas.lean#L18-L20","name":"String.lt_antisymm","line":18,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.lt_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.lt_antisymm\"><span class=\"name\">String</span>.<span class=\"name\">lt_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></div></div>"}]}