{"name":"Std.Data.TreeSet.Lemmas","instances":[{"typeNames":["Std.TreeSet.Equiv","Std.TreeSet.Equiv","Std.TreeSet.Equiv"],"name":"Std.TreeSet.Equiv.instTrans","className":"Trans"}],"imports":["Std.Data.TreeMap.Lemmas","Std.Data.TreeSet.Basic","Std.Data.TreeSet.AdditionalOperations"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1769-L1771","name":"Std.TreeSet.equiv_iff_toList_eq","line":1769,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.equiv_iff_toList_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.equiv_iff_toList_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">equiv_iff_toList_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1766-L1767","name":"Std.TreeSet.Equiv.of_toList_perm","line":1766,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.of_toList_perm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.of_toList_perm\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">of_toList_perm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1763-L1764","name":"Std.TreeSet.equiv_iff_toList_perm","line":1763,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.equiv_iff_toList_perm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.equiv_iff_toList_perm\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">equiv_iff_toList_perm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1760-L1761","name":"Std.TreeSet.empty_equiv_iff_isEmpty","line":1760,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.empty_equiv_iff_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.empty_equiv_iff_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">empty_equiv_iff_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.empty\">empty</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1757-L1758","name":"Std.TreeSet.equiv_empty_iff_isEmpty","line":1757,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.equiv_empty_iff_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.equiv_empty_iff_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">equiv_empty_iff_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.empty\">empty</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1744-L1746","name":"Std.TreeSet.Equiv.of_forall_mem_iff","line":1744,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.of_forall_mem_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.of_forall_mem_iff\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">of_forall_mem_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t₁</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1740-L1742","name":"Std.TreeSet.Equiv.of_forall_contains_eq","line":1740,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.of_forall_contains_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.of_forall_contains_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">of_forall_contains_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1737-L1738","name":"Std.TreeSet.Equiv.of_forall_get?_eq","line":1737,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.of_forall_get?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.of_forall_get?_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">of_forall_get?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1731-L1733","name":"Std.TreeSet.Equiv.merge","line":1731,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.merge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.merge\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂ </span><span class=\"fn\">t₃ </span><span class=\"fn\">t₄</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₃</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₄</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.merge\">merge</a></span> <span class=\"fn\">t₃</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.merge\">merge</a></span> <span class=\"fn\">t₄</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1727-L1729","name":"Std.TreeSet.Equiv.eraseMany_list","line":1727,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.eraseMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.eraseMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">eraseMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.eraseMany\">eraseMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.eraseMany\">eraseMany</a></span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1723-L1725","name":"Std.TreeSet.Equiv.insertMany_list","line":1723,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1720-L1721","name":"Std.TreeSet.Equiv.filter","line":1720,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.filter\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.filter\">TreeSet.filter</a> <span class=\"fn\">f</span> <span class=\"fn\">t₁</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.filter\">TreeSet.filter</a> <span class=\"fn\">f</span> <span class=\"fn\">t₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1717-L1718","name":"Std.TreeSet.Equiv.erase","line":1717,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1714-L1715","name":"Std.TreeSet.Equiv.insert","line":1714,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1710-L1712","name":"Std.TreeSet.Equiv.getLTD_eq","line":1710,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLTD_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLTD_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getLTD_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLTD\">getLTD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLTD\">getLTD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1706-L1708","name":"Std.TreeSet.Equiv.getLT!_eq","line":1706,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLT!_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLT!_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getLT!_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLT!\">getLT!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLT!\">getLT!</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1702-L1704","name":"Std.TreeSet.Equiv.getLT_eq","line":1702,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLT_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLT_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getLT_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/AdditionalOperations.html#Std.TreeSet.getLT\">getLT</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/AdditionalOperations.html#Std.TreeSet.getLT\">getLT</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1698-L1700","name":"Std.TreeSet.Equiv.getLT?_eq","line":1698,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLT?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLT?_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getLT?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLT?\">getLT?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLT?\">getLT?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1694-L1696","name":"Std.TreeSet.Equiv.getLED_eq","line":1694,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLED_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLED_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getLED_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLED\">getLED</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLED\">getLED</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1690-L1692","name":"Std.TreeSet.Equiv.getLE!_eq","line":1690,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLE!_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLE!_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getLE!_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLE!\">getLE!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLE!\">getLE!</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1686-L1688","name":"Std.TreeSet.Equiv.getLE_eq","line":1686,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLE_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLE_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getLE_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/AdditionalOperations.html#Std.TreeSet.getLE\">getLE</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/AdditionalOperations.html#Std.TreeSet.getLE\">getLE</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1682-L1684","name":"Std.TreeSet.Equiv.getLE?_eq","line":1682,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLE?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getLE?_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getLE?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLE?\">getLE?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getLE?\">getLE?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1678-L1680","name":"Std.TreeSet.Equiv.getGTD_eq","line":1678,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGTD_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGTD_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getGTD_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGTD\">getGTD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGTD\">getGTD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1674-L1676","name":"Std.TreeSet.Equiv.getGT!_eq","line":1674,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGT!_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGT!_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getGT!_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGT!\">getGT!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGT!\">getGT!</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1670-L1672","name":"Std.TreeSet.Equiv.getGT_eq","line":1670,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGT_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGT_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getGT_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/AdditionalOperations.html#Std.TreeSet.getGT\">getGT</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/AdditionalOperations.html#Std.TreeSet.getGT\">getGT</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1666-L1668","name":"Std.TreeSet.Equiv.getGT?_eq","line":1666,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGT?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGT?_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getGT?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGT?\">getGT?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGT?\">getGT?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1662-L1664","name":"Std.TreeSet.Equiv.getGED_eq","line":1662,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGED_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGED_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getGED_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGED\">getGED</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGED\">getGED</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1658-L1660","name":"Std.TreeSet.Equiv.getGE!_eq","line":1658,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGE!_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGE!_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getGE!_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGE!\">getGE!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGE!\">getGE!</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1654-L1656","name":"Std.TreeSet.Equiv.getGE_eq","line":1654,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGE_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGE_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getGE_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/AdditionalOperations.html#Std.TreeSet.getGE\">getGE</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/AdditionalOperations.html#Std.TreeSet.getGE\">getGE</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1650-L1652","name":"Std.TreeSet.Equiv.getGE?_eq","line":1650,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGE?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getGE?_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getGE?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGE?\">getGE?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getGE?\">getGE?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1646-L1648","name":"Std.TreeSet.Equiv.atIdxD_eq","line":1646,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.atIdxD_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.atIdxD_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">atIdxD_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.atIdxD\">atIdxD</a></span> <span class=\"fn\">i</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.atIdxD\">atIdxD</a></span> <span class=\"fn\">i</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1642-L1644","name":"Std.TreeSet.Equiv.atIdx!_eq","line":1642,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.atIdx!_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.atIdx!_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">atIdx!_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.atIdx!\">atIdx!</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.atIdx!\">atIdx!</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1638-L1640","name":"Std.TreeSet.Equiv.atIdx_eq","line":1638,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.atIdx_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.atIdx_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">atIdx_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.atIdx\">atIdx</a></span> <span class=\"fn\">i</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.atIdx\">atIdx</a></span> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1634-L1636","name":"Std.TreeSet.Equiv.atIdx?_eq","line":1634,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.atIdx?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.atIdx?_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">atIdx?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.atIdx?\">atIdx?</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.atIdx?\">atIdx?</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1630-L1632","name":"Std.TreeSet.Equiv.maxD_eq","line":1630,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.maxD_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.maxD_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">maxD_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1626-L1628","name":"Std.TreeSet.Equiv.max!_eq","line":1626,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.max!_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.max!_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">max!_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1622-L1624","name":"Std.TreeSet.Equiv.max_eq","line":1622,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.max_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.max_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">max_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1619-L1620","name":"Std.TreeSet.Equiv.max?_eq","line":1619,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.max?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.max?_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">max?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1615-L1617","name":"Std.TreeSet.Equiv.minD_eq","line":1615,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.minD_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.minD_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">minD_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1611-L1613","name":"Std.TreeSet.Equiv.min!_eq","line":1611,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.min!_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.min!_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">min!_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1607-L1609","name":"Std.TreeSet.Equiv.min_eq","line":1607,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.min_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.min_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">min_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1604-L1605","name":"Std.TreeSet.Equiv.min?_eq","line":1604,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.min?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.min?_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">min?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1601-L1602","name":"Std.TreeSet.Equiv.all_eq","line":1601,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.all_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.all_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">all_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.all\">all</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.all\">all</a></span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1598-L1599","name":"Std.TreeSet.Equiv.any_eq","line":1598,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.any_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.any_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">any_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.any\">any</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.any\">any</a></span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1594-L1596","name":"Std.TreeSet.Equiv.forM_eq","line":1594,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.forM_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.forM_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">forM_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM.forM\">ForM.forM</a> <span class=\"fn\">t₁</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM.forM\">ForM.forM</a> <span class=\"fn\">t₂</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1589-L1592","name":"Std.TreeSet.Equiv.forIn_eq","line":1589,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.forIn_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.forIn_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">forIn_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\">t₁</span> <span class=\"fn\">b</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\">t₂</span> <span class=\"fn\">b</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1585-L1587","name":"Std.TreeSet.Equiv.foldr_eq","line":1585,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.foldr_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.foldr_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">foldr_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldr\">foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldr\">foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1580-L1583","name":"Std.TreeSet.Equiv.foldrM_eq","line":1580,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.foldrM_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.foldrM_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">foldrM_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldrM\">foldrM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldrM\">foldrM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1576-L1578","name":"Std.TreeSet.Equiv.foldl_eq","line":1576,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.foldl_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.foldl_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">foldl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1572-L1574","name":"Std.TreeSet.Equiv.foldlM_eq","line":1572,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.foldlM_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.foldlM_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">foldlM_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldlM\">foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldlM\">foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1569-L1570","name":"Std.TreeSet.Equiv.toArray_eq","line":1569,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.toArray_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.toArray_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">toArray_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toArray\">toArray</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1566-L1567","name":"Std.TreeSet.Equiv.toList_eq","line":1566,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.toList_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.toList_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">toList_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1562-L1564","name":"Std.TreeSet.Equiv.getD_eq","line":1562,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getD_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.getD_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getD_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1558-L1560","name":"Std.TreeSet.Equiv.get!_eq","line":1558,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.get!_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.get!_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">get!_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1554-L1556","name":"Std.TreeSet.Equiv.get_eq","line":1554,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.get_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.get_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">get_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hk</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">hk</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1550-L1552","name":"Std.TreeSet.Equiv.get?_eq","line":1550,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.get?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.get?_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">get?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1547-L1548","name":"Std.TreeSet.Equiv.size_eq","line":1547,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.size_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1543-L1545","name":"Std.TreeSet.Equiv.mem_iff","line":1543,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.mem_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.mem_iff\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">mem_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t₁</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1539-L1541","name":"Std.TreeSet.Equiv.contains_eq","line":1539,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.contains_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.contains_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">contains_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1536-L1537","name":"Std.TreeSet.Equiv.isEmpty_eq","line":1536,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.isEmpty_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.isEmpty_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">isEmpty_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1531-L1532","name":"Std.TreeSet.Equiv.congr_right","line":1531,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.congr_right\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂ </span><span class=\"fn\">t₃</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₃</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₃</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1530-L1530","name":"Std.TreeSet.Equiv.congr_left","line":1530,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.congr_left\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂ </span><span class=\"fn\">t₃</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₃</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₃</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1529-L1529","name":"Std.TreeSet.Equiv.comm","line":1529,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.comm\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1527-L1527","name":"Std.TreeSet.Equiv.instTrans","line":1527,"kind":"instance","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.instTrans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.instTrans\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">instTrans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a> <a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a> <a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1524-L1525","name":"Std.TreeSet.Equiv.trans","line":1524,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.trans\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂ </span><span class=\"fn\">t₃</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₃</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1521-L1522","name":"Std.TreeSet.Equiv.symm","line":1521,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.symm\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1519-L1519","name":"Std.TreeSet.Equiv.rfl","line":1519,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.Equiv.rfl\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.Equiv\">Equiv</a></span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1509-L1511","name":"Std.TreeSet.maxD_eq_getLastD_toList","line":1509,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_eq_getLastD_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_eq_getLastD_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">maxD_eq_getLastD_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.getLastD\">getLastD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1504-L1507","name":"Std.TreeSet.maxD_erase_le_maxD","line":1504,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_erase_le_maxD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_erase_le_maxD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">maxD_erase_le_maxD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1499-L1502","name":"Std.TreeSet.maxD_erase_eq_of_not_compare_maxD_eq","line":1499,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_erase_eq_of_not_compare_maxD_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_erase_eq_of_not_compare_maxD_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">maxD_erase_eq_of_not_compare_maxD_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heq</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1495-L1497","name":"Std.TreeSet.getD_maxD","line":1495,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_maxD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_maxD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_maxD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback </span><span class=\"fn\">fallback'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">fallback'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1491-L1493","name":"Std.TreeSet.get!_maxD","line":1491,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_maxD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_maxD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_maxD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1487-L1489","name":"Std.TreeSet.get_maxD","line":1487,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_maxD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_maxD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_maxD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1483-L1485","name":"Std.TreeSet.get?_maxD","line":1483,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_maxD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_maxD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_maxD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1479-L1481","name":"Std.TreeSet.maxD_le","line":1479,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_le\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">maxD_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1475-L1477","name":"Std.TreeSet.le_maxD_of_mem","line":1475,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_maxD_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_maxD_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_maxD_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1471-L1473","name":"Std.TreeSet.le_maxD_of_contains","line":1471,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_maxD_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_maxD_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_maxD_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1467-L1469","name":"Std.TreeSet.maxD_mem","line":1467,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">maxD_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1463-L1465","name":"Std.TreeSet.contains_maxD","line":1463,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_maxD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_maxD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_maxD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1459-L1461","name":"Std.TreeSet.self_le_maxD_insert","line":1459,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.self_le_maxD_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.self_le_maxD_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">self_le_maxD_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1454-L1457","name":"Std.TreeSet.maxD_le_maxD_insert","line":1454,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_le_maxD_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_le_maxD_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">maxD_le_maxD_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1449-L1452","name":"Std.TreeSet.maxD_insert","line":1449,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">maxD_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.elim\">elim</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fun (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">k'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1444-L1447","name":"Std.TreeSet.maxD_eq_iff_mem_and_forall","line":1444,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_eq_iff_mem_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_eq_iff_mem_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">maxD_eq_iff_mem_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">km</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1439-L1442","name":"Std.TreeSet.maxD_eq_iff_get?_eq_self_and_forall","line":1439,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_eq_iff_get?_eq_self_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_eq_iff_get?_eq_self_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">maxD_eq_iff_get?_eq_self_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1435-L1437","name":"Std.TreeSet.max!_eq_maxD_default","line":1435,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_eq_maxD_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_eq_maxD_default\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max!_eq_maxD_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1431-L1433","name":"Std.TreeSet.maxD_eq_fallback","line":1431,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_eq_fallback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.maxD_eq_fallback\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">maxD_eq_fallback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1427-L1429","name":"Std.TreeSet.max?_eq_some_maxD","line":1427,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_some_maxD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_some_maxD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_eq_some_maxD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.maxD\">maxD</a></span> <span class=\"fn\">fallback</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1422-L1425","name":"Std.TreeSet.max!_eq_getLast!_toList","line":1422,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_eq_getLast!_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_eq_getLast!_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max!_eq_getLast!_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/BasicAux.html#List.getLast!\">getLast!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1417-L1420","name":"Std.TreeSet.max!_erase_le_max!","line":1417,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_erase_le_max!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_erase_le_max!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max!_erase_le_max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1412-L1415","name":"Std.TreeSet.max!_erase_eq_of_not_compare_max!_eq","line":1412,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_erase_eq_of_not_compare_max!_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_erase_eq_of_not_compare_max!_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max!_erase_eq_of_not_compare_max!_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heq</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1408-L1410","name":"Std.TreeSet.getD_max!","line":1408,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_max!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_max!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1404-L1406","name":"Std.TreeSet.get!_max!","line":1404,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_max!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_max!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1399-L1402","name":"Std.TreeSet.get_max!_eq_max","line":1399,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_max!_eq_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_max!_eq_max\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_max!_eq_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1395-L1397","name":"Std.TreeSet.get_max!","line":1395,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_max!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_max!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1391-L1393","name":"Std.TreeSet.get?_max!","line":1391,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_max!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_max!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1387-L1389","name":"Std.TreeSet.max!_le","line":1387,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_le\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max!_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1383-L1385","name":"Std.TreeSet.le_max!_of_mem","line":1383,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max!_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max!_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_max!_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1379-L1381","name":"Std.TreeSet.le_max!_of_contains","line":1379,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max!_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max!_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_max!_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1375-L1377","name":"Std.TreeSet.max!_mem","line":1375,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max!_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1371-L1373","name":"Std.TreeSet.contains_max!","line":1371,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_max!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_max!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1367-L1369","name":"Std.TreeSet.self_le_max!_insert","line":1367,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.self_le_max!_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.self_le_max!_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">self_le_max!_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1363-L1365","name":"Std.TreeSet.max!_le_max!_insert","line":1363,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_le_max!_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_le_max!_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max!_le_max!_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1358-L1361","name":"Std.TreeSet.max!_insert","line":1358,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max!_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.elim\">elim</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fun (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">k'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1353-L1356","name":"Std.TreeSet.max!_eq_iff_mem_and_forall","line":1353,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_eq_iff_mem_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_eq_iff_mem_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max!_eq_iff_mem_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">km</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1348-L1351","name":"Std.TreeSet.max!_eq_iff_get?_eq_self_and_forall","line":1348,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_eq_iff_get?_eq_self_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_eq_iff_get?_eq_self_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max!_eq_iff_get?_eq_self_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1344-L1346","name":"Std.TreeSet.max!_eq_default","line":1344,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_eq_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max!_eq_default\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max!_eq_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1340-L1342","name":"Std.TreeSet.max_eq_max!","line":1340,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_eq_max!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_eq_max!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_eq_max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1336-L1338","name":"Std.TreeSet.max?_eq_some_max!","line":1336,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_some_max!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_some_max!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_eq_some_max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max!\">max!</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1331-L1334","name":"Std.TreeSet.max_eq_getLast_toList","line":1331,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_eq_getLast_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_eq_getLast_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_eq_getLast_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1326-L1329","name":"Std.TreeSet.max_erase_le_max","line":1326,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_erase_le_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_erase_le_max\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_erase_le_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1320-L1324","name":"Std.TreeSet.max_erase_eq_of_not_compare_eq_max","line":1320,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_erase_eq_of_not_compare_eq_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_erase_eq_of_not_compare_eq_max\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_erase_eq_of_not_compare_eq_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1313-L1318","name":"Std.TreeSet.max_erase_eq_iff_not_compare_eq_max","line":1313,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_erase_eq_iff_not_compare_eq_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_erase_eq_iff_not_compare_eq_max\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_erase_eq_iff_not_compare_eq_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1308-L1311","name":"Std.TreeSet.getD_max","line":1308,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_max\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span>)</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1303-L1306","name":"Std.TreeSet.get!_max","line":1303,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_max\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1298-L1301","name":"Std.TreeSet.get_max","line":1298,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_max\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span>)</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1293-L1296","name":"Std.TreeSet.get?_max","line":1293,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_max\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1289-L1291","name":"Std.TreeSet.max_le","line":1289,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_le\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span>)</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1285-L1287","name":"Std.TreeSet.le_max_of_mem","line":1285,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_max_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1281-L1283","name":"Std.TreeSet.le_max_of_contains","line":1281,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_max_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1277-L1279","name":"Std.TreeSet.max_mem","line":1277,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1273-L1275","name":"Std.TreeSet.contains_max","line":1273,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_max\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1269-L1271","name":"Std.TreeSet.self_le_max_insert","line":1269,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.self_le_max_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.self_le_max_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">self_le_max_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1264-L1267","name":"Std.TreeSet.max_le_max_insert","line":1264,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_le_max_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_le_max_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_le_max_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1259-L1262","name":"Std.TreeSet.max_insert","line":1259,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.elim\">elim</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fun (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">k'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1255-L1257","name":"Std.TreeSet.max_eq_iff_mem_and_forall","line":1255,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_eq_iff_mem_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_eq_iff_mem_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_eq_iff_mem_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">km</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1251-L1253","name":"Std.TreeSet.max_eq_iff_getKey?_eq_self_and_forall","line":1251,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_eq_iff_getKey?_eq_self_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_eq_iff_getKey?_eq_self_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_eq_iff_getKey?_eq_self_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1247-L1249","name":"Std.TreeSet.max?_eq_some_max","line":1247,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_some_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_some_max\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_eq_some_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1243-L1245","name":"Std.TreeSet.max_eq_get_max?","line":1243,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_eq_get_max?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max_eq_get_max?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max_eq_get_max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max\">max</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1239-L1241","name":"Std.TreeSet.max?_eq_getLast?_toList","line":1239,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_getLast?_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_getLast?_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_eq_getLast?_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.getLast?\">getLast?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1232-L1237","name":"Std.TreeSet.max?_erase_le_max?","line":1232,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_erase_le_max?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_erase_le_max?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_erase_le_max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">km </span><span class=\"fn\">kme</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkme</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">kme</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">kme</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1227-L1230","name":"Std.TreeSet.isSome_max?_of_isSome_max?_erase","line":1227,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_of_isSome_max?_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_of_isSome_max?_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_max?_of_isSome_max?_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1222-L1225","name":"Std.TreeSet.max?_erase_eq_of_not_compare_eq_max?","line":1222,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_erase_eq_of_not_compare_eq_max?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_erase_eq_of_not_compare_eq_max?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_erase_eq_of_not_compare_eq_max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">∀ {<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1217-L1220","name":"Std.TreeSet.max?_erase_eq_iff_not_compare_eq_max?","line":1217,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_erase_eq_iff_not_compare_eq_max?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_erase_eq_iff_not_compare_eq_max?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_erase_eq_iff_not_compare_eq_max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ {<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1212-L1215","name":"Std.TreeSet.max?_bind_get?","line":1212,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_bind_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_bind_get?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_bind_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.bind\">bind</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1208-L1210","name":"Std.TreeSet.getD_max?","line":1208,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_max?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_max?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">km</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1204-L1206","name":"Std.TreeSet.get!_max?","line":1204,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_max?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_max?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1200-L1202","name":"Std.TreeSet.get_max?","line":1200,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_max?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_max?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">km</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1196-L1198","name":"Std.TreeSet.get?_max?","line":1196,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_max?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_max?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1192-L1194","name":"Std.TreeSet.max?_le","line":1192,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_le\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k'</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1187-L1190","name":"Std.TreeSet.le_max?_of_mem","line":1187,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max?_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max?_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_max?_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1182-L1185","name":"Std.TreeSet.le_max?_of_contains","line":1182,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max?_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_max?_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_max?_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1178-L1180","name":"Std.TreeSet.isSome_max?_of_mem","line":1178,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_max?_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1174-L1176","name":"Std.TreeSet.isSome_max?_of_contains","line":1174,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_max?_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1169-L1172","name":"Std.TreeSet.contains_max?","line":1169,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_max?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_max?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1164-L1167","name":"Std.TreeSet.self_le_max?_insert","line":1164,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.self_le_max?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.self_le_max?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">self_le_max?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">kmi</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkmi</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">kmi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">kmi</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1158-L1162","name":"Std.TreeSet.max?_le_max?_insert","line":1158,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_le_max?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_le_max?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_le_max?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">km </span><span class=\"fn\">kmi</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkmi</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">kmi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">kmi</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1154-L1156","name":"Std.TreeSet.isSome_max?_insert","line":1154,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_max?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1149-L1152","name":"Std.TreeSet.max?_insert","line":1149,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.elim\">elim</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fun (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">k'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1145-L1147","name":"Std.TreeSet.isSome_max?_iff_isEmpty_eq_false","line":1145,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_iff_isEmpty_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_iff_isEmpty_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_max?_iff_isEmpty_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1140-L1143","name":"Std.TreeSet.isSome_max?_eq_not_isEmpty","line":1140,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_eq_not_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_max?_eq_not_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_max?_eq_not_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1135-L1138","name":"Std.TreeSet.isNone_max?_eq_isEmpty","line":1135,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isNone_max?_eq_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isNone_max?_eq_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isNone_max?_eq_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1131-L1133","name":"Std.TreeSet.max?_eq_some_iff_mem_and_forall","line":1131,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_some_iff_mem_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_some_iff_mem_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_eq_some_iff_mem_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">km</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1127-L1129","name":"Std.TreeSet.max?_eq_some_iff_get?_eq_self_and_forall","line":1127,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_some_iff_get?_eq_self_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_some_iff_get?_eq_self_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_eq_some_iff_get?_eq_self_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1122-L1125","name":"Std.TreeSet.max?_eq_none_iff","line":1122,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_none_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_eq_none_iff\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_eq_none_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1118-L1120","name":"Std.TreeSet.max?_of_isEmpty","line":1118,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1113-L1116","name":"Std.TreeSet.max?_emptyc","line":1113,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.max?_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">max?_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1105-L1107","name":"Std.TreeSet.minD_eq_headD_toList","line":1105,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_eq_headD_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_eq_headD_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_eq_headD_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.headD\">headD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1100-L1103","name":"Std.TreeSet.minD_le_minD_erase","line":1100,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_le_minD_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_le_minD_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_le_minD_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1095-L1098","name":"Std.TreeSet.minD_erase_eq_of_not_compare_minD_eq","line":1095,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_erase_eq_of_not_compare_minD_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_erase_eq_of_not_compare_minD_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_erase_eq_of_not_compare_minD_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heq</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1091-L1093","name":"Std.TreeSet.getD_minD","line":1091,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_minD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_minD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_minD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback </span><span class=\"fn\">fallback'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">fallback'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1087-L1089","name":"Std.TreeSet.get!_minD","line":1087,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_minD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_minD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_minD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1083-L1085","name":"Std.TreeSet.get_minD","line":1083,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_minD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_minD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_minD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1079-L1081","name":"Std.TreeSet.get?_minD","line":1079,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_minD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_minD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_minD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1075-L1077","name":"Std.TreeSet.le_minD","line":1075,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_minD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_minD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_minD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1071-L1073","name":"Std.TreeSet.minD_le_of_mem","line":1071,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_le_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_le_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_le_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1067-L1069","name":"Std.TreeSet.minD_le_of_contains","line":1067,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_le_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_le_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_le_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1063-L1065","name":"Std.TreeSet.minD_mem","line":1063,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1059-L1061","name":"Std.TreeSet.contains_minD","line":1059,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_minD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_minD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_minD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1055-L1057","name":"Std.TreeSet.minD_insert_le_self","line":1055,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_insert_le_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_insert_le_self\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_insert_le_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1050-L1053","name":"Std.TreeSet.minD_insert_le_minD","line":1050,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_insert_le_minD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_insert_le_minD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_insert_le_minD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1045-L1048","name":"Std.TreeSet.minD_insert","line":1045,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.elim\">elim</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fun (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">k'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1040-L1043","name":"Std.TreeSet.minD_eq_iff_mem_and_forall","line":1040,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_eq_iff_mem_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_eq_iff_mem_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_eq_iff_mem_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">km</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1035-L1038","name":"Std.TreeSet.minD_eq_iff_get?_eq_self_and_forall","line":1035,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_eq_iff_get?_eq_self_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_eq_iff_get?_eq_self_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_eq_iff_get?_eq_self_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1031-L1033","name":"Std.TreeSet.min!_eq_minD_default","line":1031,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_eq_minD_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_eq_minD_default\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_eq_minD_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1027-L1029","name":"Std.TreeSet.minD_eq_fallback","line":1027,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_eq_fallback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.minD_eq_fallback\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">minD_eq_fallback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1023-L1025","name":"Std.TreeSet.min?_eq_some_minD","line":1023,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_some_minD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_some_minD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_eq_some_minD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.minD\">minD</a></span> <span class=\"fn\">fallback</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1019-L1021","name":"Std.TreeSet.min!_eq_head!_toList","line":1019,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_eq_head!_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_eq_head!_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_eq_head!_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1014-L1017","name":"Std.TreeSet.min!_le_min!_erase","line":1014,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_le_min!_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_le_min!_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_le_min!_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1009-L1012","name":"Std.TreeSet.min!_erase_eq_of_not_compare_min!_eq","line":1009,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_erase_eq_of_not_compare_min!_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_erase_eq_of_not_compare_min!_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_erase_eq_of_not_compare_min!_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heq</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1005-L1007","name":"Std.TreeSet.getD_min!","line":1005,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_min!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_min!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L1001-L1003","name":"Std.TreeSet.get!_min!","line":1001,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_min!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_min!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L996-L999","name":"Std.TreeSet.get_min!_eq_min","line":996,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_min!_eq_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_min!_eq_min\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_min!_eq_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L992-L994","name":"Std.TreeSet.get_min!","line":992,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_min!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_min!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L988-L990","name":"Std.TreeSet.get?_min!","line":988,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_min!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_min!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L984-L986","name":"Std.TreeSet.le_min!","line":984,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_min!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_min!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L980-L982","name":"Std.TreeSet.min!_le_of_mem","line":980,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_le_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_le_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_le_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L976-L978","name":"Std.TreeSet.min!_le_of_contains","line":976,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_le_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_le_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_le_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L972-L974","name":"Std.TreeSet.min!_mem","line":972,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L968-L970","name":"Std.TreeSet.contains_min!","line":968,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_min!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_min!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L964-L966","name":"Std.TreeSet.min!_insert_le_self","line":964,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_insert_le_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_insert_le_self\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_insert_le_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L960-L962","name":"Std.TreeSet.min!_insert_le_min!","line":960,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_insert_le_min!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_insert_le_min!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_insert_le_min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L955-L958","name":"Std.TreeSet.min!_insert","line":955,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.elim\">elim</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fun (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">k'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L950-L953","name":"Std.TreeSet.min!_eq_iff_mem_and_forall","line":950,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_eq_iff_mem_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_eq_iff_mem_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_eq_iff_mem_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">km</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L945-L948","name":"Std.TreeSet.min!_eq_iff_get?_eq_self_and_forall","line":945,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_eq_iff_get?_eq_self_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_eq_iff_get?_eq_self_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_eq_iff_get?_eq_self_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L941-L943","name":"Std.TreeSet.min!_eq_default","line":941,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_eq_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min!_eq_default\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min!_eq_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L937-L939","name":"Std.TreeSet.min_eq_min!","line":937,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_eq_min!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_eq_min!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_eq_min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L933-L935","name":"Std.TreeSet.min?_eq_some_min!","line":933,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_some_min!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_some_min!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_eq_some_min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min!\">min!</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L929-L931","name":"Std.TreeSet.min_eq_head_toList","line":929,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_eq_head_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_eq_head_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_eq_head_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.head\">head</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L924-L927","name":"Std.TreeSet.min_le_min_erase","line":924,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_le_min_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_le_min_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_le_min_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L918-L922","name":"Std.TreeSet.min_erase_eq_of_not_compare_eq_min","line":918,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_erase_eq_of_not_compare_eq_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_erase_eq_of_not_compare_eq_min\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_erase_eq_of_not_compare_eq_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L911-L916","name":"Std.TreeSet.min_erase_eq_iff_not_compare_eq_min","line":911,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_erase_eq_iff_not_compare_eq_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_erase_eq_iff_not_compare_eq_min\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_erase_eq_iff_not_compare_eq_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L906-L909","name":"Std.TreeSet.getD_min","line":906,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_min\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span>)</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L901-L904","name":"Std.TreeSet.get!_min","line":901,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_min\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L896-L899","name":"Std.TreeSet.get_min","line":896,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_min\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span>)</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L891-L894","name":"Std.TreeSet.get?_min","line":891,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_min\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L887-L889","name":"Std.TreeSet.le_min","line":887,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_min\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L883-L885","name":"Std.TreeSet.min_le_of_mem","line":883,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_le_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_le_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_le_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L879-L881","name":"Std.TreeSet.min_le_of_contains","line":879,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_le_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_le_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_le_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L875-L877","name":"Std.TreeSet.min_mem","line":875,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L871-L873","name":"Std.TreeSet.contains_min","line":871,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_min\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L867-L869","name":"Std.TreeSet.min_insert_le_self","line":867,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_insert_le_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_insert_le_self\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_insert_le_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L862-L865","name":"Std.TreeSet.min_insert_le_min","line":862,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_insert_le_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_insert_le_min\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_insert_le_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span>)</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L857-L860","name":"Std.TreeSet.min_insert","line":857,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.elim\">elim</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fun (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">k'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L853-L855","name":"Std.TreeSet.min_eq_iff_mem_and_forall","line":853,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_eq_iff_mem_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_eq_iff_mem_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_eq_iff_mem_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">km</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L849-L851","name":"Std.TreeSet.min_eq_iff_getKey?_eq_self_and_forall","line":849,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_eq_iff_getKey?_eq_self_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_eq_iff_getKey?_eq_self_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_eq_iff_getKey?_eq_self_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L845-L847","name":"Std.TreeSet.min?_eq_some_min","line":845,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_some_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_some_min\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_eq_some_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L841-L843","name":"Std.TreeSet.min_eq_get_min?","line":841,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_eq_get_min?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min_eq_get_min?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min_eq_get_min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min\">min</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L837-L839","name":"Std.TreeSet.min?_eq_head?_toList","line":837,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_head?_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_head?_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_eq_head?_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.head?\">head?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L830-L835","name":"Std.TreeSet.min?_le_min?_erase","line":830,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_le_min?_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_le_min?_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_le_min?_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">km </span><span class=\"fn\">kme</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkme</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">kme</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">kme</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L825-L828","name":"Std.TreeSet.isSome_min?_of_isSome_min?_erase","line":825,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_of_isSome_min?_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_of_isSome_min?_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_min?_of_isSome_min?_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L820-L823","name":"Std.TreeSet.min?_erase_eq_of_not_compare_eq_min?","line":820,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_erase_eq_of_not_compare_eq_min?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_erase_eq_of_not_compare_eq_min?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_erase_eq_of_not_compare_eq_min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">∀ {<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L815-L818","name":"Std.TreeSet.min?_erase_eq_iff_not_compare_eq_min?","line":815,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_erase_eq_iff_not_compare_eq_min?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_erase_eq_iff_not_compare_eq_min?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_erase_eq_iff_not_compare_eq_min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ {<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L810-L813","name":"Std.TreeSet.min?_bind_get?","line":810,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_bind_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_bind_get?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_bind_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.bind\">bind</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L806-L808","name":"Std.TreeSet.getD_min?","line":806,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_min?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_min?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">km</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L802-L804","name":"Std.TreeSet.get!_min?","line":802,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_min?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_min?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L798-L800","name":"Std.TreeSet.get_min?","line":798,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_min?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_min?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">km</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L794-L796","name":"Std.TreeSet.get?_min?","line":794,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_min?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_min?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L790-L792","name":"Std.TreeSet.le_min?","line":790,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_min?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.le_min?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">le_min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k'</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L785-L788","name":"Std.TreeSet.min?_le_of_mem","line":785,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_le_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_le_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_le_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L780-L783","name":"Std.TreeSet.min?_le_of_contains","line":780,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_le_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_le_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_le_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">km</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L776-L778","name":"Std.TreeSet.isSome_min?_of_mem","line":776,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_min?_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L772-L774","name":"Std.TreeSet.isSome_min?_of_contains","line":772,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_min?_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L767-L770","name":"Std.TreeSet.contains_min?","line":767,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_min?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_min?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L762-L765","name":"Std.TreeSet.min?_insert_le_self","line":762,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_insert_le_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_insert_le_self\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_insert_le_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">kmi</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkmi</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">kmi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">kmi</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L756-L760","name":"Std.TreeSet.min?_insert_le_min?","line":756,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_insert_le_min?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_insert_le_min?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_insert_le_min?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">km </span><span class=\"fn\">kmi</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkm</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkmi</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">kmi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">kmi</span> <span class=\"fn\">km</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L752-L754","name":"Std.TreeSet.isSome_min?_insert","line":752,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_min?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L747-L750","name":"Std.TreeSet.min?_insert","line":747,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.elim\">elim</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fun (<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">k'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L743-L745","name":"Std.TreeSet.isSome_min?_iff_isEmpty_eq_false","line":743,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_iff_isEmpty_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_iff_isEmpty_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_min?_iff_isEmpty_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L738-L741","name":"Std.TreeSet.isSome_min?_eq_not_isEmpty","line":738,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_eq_not_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_min?_eq_not_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_min?_eq_not_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L733-L736","name":"Std.TreeSet.isNone_min?_eq_isEmpty","line":733,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isNone_min?_eq_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isNone_min?_eq_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isNone_min?_eq_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L729-L731","name":"Std.TreeSet.min?_eq_some_iff_mem_and_forall","line":729,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_some_iff_mem_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_some_iff_mem_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_eq_some_iff_mem_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">km</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L725-L727","name":"Std.TreeSet.min?_eq_some_iff_get?_eq_self_and_forall","line":725,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_some_iff_get?_eq_self_and_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_some_iff_get?_eq_self_and_forall\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_eq_some_iff_get?_eq_self_and_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">km</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">km</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">km</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L720-L723","name":"Std.TreeSet.min?_eq_none_iff","line":720,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_none_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_eq_none_iff\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_eq_none_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L716-L718","name":"Std.TreeSet.min?_of_isEmpty","line":716,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L711-L714","name":"Std.TreeSet.min?_emptyc","line":711,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.min?_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">min?_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L704-L707","name":"Std.TreeSet.isEmpty_ofList","line":704,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L698-L700","name":"Std.TreeSet.size_ofList_le","line":698,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_ofList_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_ofList_le\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_ofList_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L693-L696","name":"Std.TreeSet.size_ofList","line":693,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L686-L691","name":"Std.TreeSet.getD_ofList_of_mem","line":686,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_eq</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L680-L684","name":"Std.TreeSet.getD_ofList_of_contains_eq_false","line":680,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L673-L678","name":"Std.TreeSet.get!_ofList_of_mem","line":673,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_eq</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L667-L671","name":"Std.TreeSet.get!_ofList_of_contains_eq_false","line":667,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L659-L665","name":"Std.TreeSet.get_ofList_of_mem","line":659,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_eq</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L653-L657","name":"Std.TreeSet.get?_ofList_of_mem","line":653,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_eq</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L647-L651","name":"Std.TreeSet.get?_ofList_of_contains_eq_false","line":647,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L642-L645","name":"Std.TreeSet.mem_ofList","line":642,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L637-L640","name":"Std.TreeSet.contains_ofList","line":637,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L631-L635","name":"Std.TreeSet.ofList_eq_insertMany_empty","line":631,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.ofList_eq_insertMany_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.ofList_eq_insertMany_empty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">ofList_eq_insertMany_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <span class=\"fn\">l</span> <span class=\"fn\">cmp</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L625-L629","name":"Std.TreeSet.ofList_cons","line":625,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.ofList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.ofList_cons\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">ofList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hd</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> (<span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span>) <span class=\"fn\">cmp</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">hd</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">tl</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L620-L623","name":"Std.TreeSet.ofList_singleton","line":620,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.ofList_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.ofList_singleton\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">ofList_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <span class=\"fn\">cmp</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L614-L618","name":"Std.TreeSet.ofList_nil","line":614,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.ofList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.ofList_nil\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">ofList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.ofList\">ofList</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">cmp</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L609-L612","name":"Std.TreeSet.isEmpty_insertMany_list","line":609,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L602-L605","name":"Std.TreeSet.size_insertMany_list_le","line":602,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_insertMany_list_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_insertMany_list_le\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_insertMany_list_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L595-L598","name":"Std.TreeSet.size_le_size_insertMany_list","line":595,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_le_size_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_le_size_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_le_size_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L588-L593","name":"Std.TreeSet.size_insertMany_list","line":588,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L583-L586","name":"Std.TreeSet.getD_insertMany_list_of_mem","line":583,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L577-L581","name":"Std.TreeSet.getD_insertMany_list_of_not_mem_of_mem","line":577,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_insertMany_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_insertMany_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_insertMany_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_eq</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L570-L575","name":"Std.TreeSet.getD_insertMany_list_of_not_mem_of_contains_eq_false","line":570,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_insertMany_list_of_not_mem_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_insertMany_list_of_not_mem_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_insertMany_list_of_not_mem_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L565-L568","name":"Std.TreeSet.get!_insertMany_list_of_mem","line":565,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L559-L563","name":"Std.TreeSet.get!_insertMany_list_of_not_mem_of_mem","line":559,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_insertMany_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_insertMany_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_insertMany_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_eq</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L552-L557","name":"Std.TreeSet.get!_insertMany_list_of_not_mem_of_contains_eq_false","line":552,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_insertMany_list_of_not_mem_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_insertMany_list_of_not_mem_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_insertMany_list_of_not_mem_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L545-L550","name":"Std.TreeSet.get_insertMany_list_of_not_mem_of_mem","line":545,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_insertMany_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_insertMany_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_insertMany_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_eq</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L540-L543","name":"Std.TreeSet.get_insertMany_list_of_mem","line":540,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">contains</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L535-L538","name":"Std.TreeSet.get?_insertMany_list_of_mem","line":535,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L529-L533","name":"Std.TreeSet.get?_insertMany_list_of_not_mem_of_mem","line":529,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_insertMany_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_insertMany_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_insertMany_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_eq</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L522-L527","name":"Std.TreeSet.get?_insertMany_list_of_not_mem_of_contains_eq_false","line":522,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_insertMany_list_of_not_mem_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_insertMany_list_of_not_mem_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_insertMany_list_of_not_mem_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L517-L520","name":"Std.TreeSet.mem_of_mem_insertMany_list","line":517,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_of_mem_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_of_mem_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_of_mem_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span> → <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L511-L515","name":"Std.TreeSet.mem_insertMany_list","line":511,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L505-L509","name":"Std.TreeSet.contains_insertMany_list","line":505,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L497-L503","name":"Std.TreeSet.insertMany_append","line":497,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.insertMany_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.insertMany_append\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">insertMany_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l₁</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L492-L495","name":"Std.TreeSet.insertMany_cons","line":492,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.insertMany_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.insertMany_cons\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">insertMany_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L487-L490","name":"Std.TreeSet.insertMany_list_singleton","line":487,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.insertMany_list_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.insertMany_list_singleton\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">insertMany_list_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L482-L485","name":"Std.TreeSet.insertMany_nil","line":482,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.insertMany_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.insertMany_nil\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">insertMany_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insertMany\">insertMany</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L476-L478","name":"Std.TreeSet.forIn_eq_forIn_toList","line":476,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.forIn_eq_forIn_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.forIn_eq_forIn_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">forIn_eq_forIn_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\">t</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L472-L474","name":"Std.TreeSet.forIn_eq_forIn","line":472,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.forIn_eq_forIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.forIn_eq_forIn\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">forIn_eq_forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.forIn\">forIn</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\">t</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L468-L470","name":"Std.TreeSet.forM_eq_forM_toList","line":468,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.forM_eq_forM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.forM_eq_forM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">forM_eq_forM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM.forM\">ForM.forM</a> <span class=\"fn\">t</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Control.html#List.forM\">forM</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L464-L466","name":"Std.TreeSet.forM_eq_forM","line":464,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.forM_eq_forM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.forM_eq_forM\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">forM_eq_forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.forM\">forM</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM.forM\">ForM.forM</a> <span class=\"fn\">t</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L460-L462","name":"Std.TreeSet.foldr_eq_foldr_toList","line":460,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.foldr_eq_foldr_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.foldr_eq_foldr_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">foldr_eq_foldr_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldr\">foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L456-L458","name":"Std.TreeSet.foldrM_eq_foldrM_toList","line":456,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.foldrM_eq_foldrM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.foldrM_eq_foldrM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">foldrM_eq_foldrM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldrM\">foldrM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldrM\">List.foldrM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L452-L454","name":"Std.TreeSet.foldl_eq_foldl_toList","line":452,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.foldl_eq_foldl_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.foldl_eq_foldl_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">foldl_eq_foldl_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L448-L450","name":"Std.TreeSet.foldlM_eq_foldlM_toList","line":448,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.foldlM_eq_foldlM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.foldlM_eq_foldlM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">foldlM_eq_foldlM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.foldlM\">foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L440-L442","name":"Std.TreeSet.ordered_toList","line":440,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.ordered_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.ordered_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">ordered_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L436-L438","name":"Std.TreeSet.distinct_toList","line":436,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.distinct_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.distinct_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">distinct_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L431-L434","name":"Std.TreeSet.mem_toList","line":431,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L426-L429","name":"Std.TreeSet.contains_toList","line":426,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulBEqCmp\">LawfulBEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L421-L424","name":"Std.TreeSet.isEmpty_toList","line":421,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L416-L419","name":"Std.TreeSet.length_toList","line":416,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.length_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.length_toList\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">length_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L411-L414","name":"Std.TreeSet.containsThenInsert_snd","line":411,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.containsThenInsert_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.containsThenInsert_snd\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">containsThenInsert_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.containsThenInsert\">containsThenInsert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L406-L409","name":"Std.TreeSet.containsThenInsert_fst","line":406,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.containsThenInsert_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.containsThenInsert_fst\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">containsThenInsert_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.containsThenInsert\">containsThenInsert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L402-L404","name":"Std.TreeSet.getD_eq_of_mem","line":402,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_eq_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_eq_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_eq_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L398-L400","name":"Std.TreeSet.getD_eq_of_contains","line":398,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_eq_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_eq_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_eq_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L394-L396","name":"Std.TreeSet.getD_congr","line":394,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_congr\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L390-L392","name":"Std.TreeSet.get!_eq_getD_default","line":390,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_getD_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_getD_default\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_eq_getD_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L386-L388","name":"Std.TreeSet.get_eq_getD","line":386,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_eq_getD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_eq_getD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_eq_getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L382-L384","name":"Std.TreeSet.getD_eq_getD_get?","line":382,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_eq_getD_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_eq_getD_get?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_eq_getD_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L378-L380","name":"Std.TreeSet.get?_eq_some_getD","line":378,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_getD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_getD\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_eq_some_getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L374-L376","name":"Std.TreeSet.get?_eq_some_getD_of_contains","line":374,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_getD_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_getD_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_eq_some_getD_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L369-L372","name":"Std.TreeSet.getD_erase_self","line":369,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L364-L367","name":"Std.TreeSet.getD_erase","line":364,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">fallback</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L360-L362","name":"Std.TreeSet.getD_eq_fallback","line":360,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_eq_fallback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_eq_fallback\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_eq_fallback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L356-L358","name":"Std.TreeSet.getD_eq_fallback_of_contains_eq_false","line":356,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_eq_fallback_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_eq_fallback_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_eq_fallback_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L351-L354","name":"Std.TreeSet.getD_insert","line":351,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L347-L349","name":"Std.TreeSet.getD_of_isEmpty","line":347,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L342-L345","name":"Std.TreeSet.getD_emptyc","line":342,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.getD_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">getD_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L338-L340","name":"Std.TreeSet.get!_eq_of_mem","line":338,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_eq_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L333-L336","name":"Std.TreeSet.get!_eq_of_contains","line":333,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_eq_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L329-L331","name":"Std.TreeSet.get!_congr","line":329,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_congr\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L325-L327","name":"Std.TreeSet.get_eq_get!","line":325,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_eq_get!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_eq_get!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_eq_get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L321-L323","name":"Std.TreeSet.get!_eq_get!_get?","line":321,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_get!_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_get!_get?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_eq_get!_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L317-L319","name":"Std.TreeSet.get?_eq_some_get!","line":317,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_get!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_get!\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_eq_some_get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L313-L315","name":"Std.TreeSet.get?_eq_some_get!_of_contains","line":313,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_get!_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_get!_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_eq_some_get!_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L308-L311","name":"Std.TreeSet.get!_erase_self","line":308,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L304-L306","name":"Std.TreeSet.get!_erase","line":304,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L300-L302","name":"Std.TreeSet.get!_eq_default","line":300,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_default\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_eq_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L296-L298","name":"Std.TreeSet.get!_eq_default_of_contains_eq_false","line":296,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_default_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_eq_default_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_eq_default_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L292-L294","name":"Std.TreeSet.get!_insert","line":292,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L288-L290","name":"Std.TreeSet.get!_of_isEmpty","line":288,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L283-L286","name":"Std.TreeSet.get!_emptyc","line":283,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get!_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get!_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L278-L281","name":"Std.TreeSet.get_eq","line":278,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_eq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L274-L276","name":"Std.TreeSet.get_congr","line":274,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_congr\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k₁</span> <span class=\"fn\">k₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">k₁</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">k₂</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L270-L272","name":"Std.TreeSet.get_beq","line":270,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_beq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L266-L268","name":"Std.TreeSet.get?_eq_some_get","line":266,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_get\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_eq_some_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L262-L264","name":"Std.TreeSet.get_erase","line":262,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L256-L260","name":"Std.TreeSet.get_insert","line":256,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h₂ : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> then <span class=\"fn\">k</span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L252-L254","name":"Std.TreeSet.get?_eq_some","line":252,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L248-L250","name":"Std.TreeSet.get?_eq_some_of_contains","line":248,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_some_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_eq_some_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L244-L246","name":"Std.TreeSet.get?_congr","line":244,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_congr\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L240-L242","name":"Std.TreeSet.get?_beq","line":240,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_beq\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.all\">Option.all</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L235-L238","name":"Std.TreeSet.get?_erase_self","line":235,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L231-L233","name":"Std.TreeSet.get?_erase","line":231,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L227-L229","name":"Std.TreeSet.get?_eq_none","line":227,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_none\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_eq_none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L223-L225","name":"Std.TreeSet.get?_eq_none_of_contains_eq_false","line":223,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_none_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_eq_none_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_eq_none_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L218-L221","name":"Std.TreeSet.isSome_get?_eq_contains","line":218,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_get?_eq_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isSome_get?_eq_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isSome_get?_eq_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L214-L216","name":"Std.TreeSet.contains_eq_isSome_get?","line":214,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_eq_isSome_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_eq_isSome_get?\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_eq_isSome_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L210-L212","name":"Std.TreeSet.get?_insert","line":210,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L206-L208","name":"Std.TreeSet.get?_of_isEmpty","line":206,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L202-L204","name":"Std.TreeSet.get?_emptyc","line":202,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.get?_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">get?_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L198-L200","name":"Std.TreeSet.size_le_size_erase","line":198,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_le_size_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_le_size_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_le_size_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L194-L196","name":"Std.TreeSet.size_erase_le","line":194,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_erase_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_erase_le\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_erase_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L189-L192","name":"Std.TreeSet.size_erase","line":189,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L185-L187","name":"Std.TreeSet.mem_of_mem_erase","line":185,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_of_mem_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_of_mem_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_of_mem_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L181-L183","name":"Std.TreeSet.contains_of_contains_erase","line":181,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_of_contains_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_of_contains_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_of_contains_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L176-L179","name":"Std.TreeSet.mem_erase","line":176,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L171-L174","name":"Std.TreeSet.contains_erase","line":171,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#bne\">!=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L166-L169","name":"Std.TreeSet.isEmpty_eq_false_of_isEmpty_erase_eq_false","line":166,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_false_of_isEmpty_erase_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_false_of_isEmpty_erase_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_eq_false_of_isEmpty_erase_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L162-L164","name":"Std.TreeSet.isEmpty_eq_isEmpty_erase_and_not_contains","line":162,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_isEmpty_erase_and_not_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_isEmpty_erase_and_not_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_eq_isEmpty_erase_and_not_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L157-L160","name":"Std.TreeSet.isEmpty_erase","line":157,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_erase\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L152-L155","name":"Std.TreeSet.erase_emptyc","line":152,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.erase_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.erase_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">erase_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.erase\">erase</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L148-L150","name":"Std.TreeSet.size_insert_le","line":148,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_insert_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_insert_le\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_insert_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L144-L146","name":"Std.TreeSet.size_le_size_insert","line":144,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_le_size_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_le_size_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_le_size_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L139-L142","name":"Std.TreeSet.size_insert","line":139,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L135-L137","name":"Std.TreeSet.isEmpty_eq_size_eq_zero","line":135,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_size_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_size_eq_zero\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_eq_size_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">0</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L131-L133","name":"Std.TreeSet.size_emptyc","line":131,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.size_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">size_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L125-L129","name":"Std.TreeSet.mem_of_mem_insert'","line":125,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_of_mem_insert'","doc":"This is a restatement of `mem_of_mem_insert` that is written to exactly match the\nproof obligation in the statement of `get_insert`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_of_mem_insert'\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_of_mem_insert'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a>(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>) → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L121-L123","name":"Std.TreeSet.mem_of_mem_insert","line":121,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_of_mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_of_mem_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_of_mem_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L117-L119","name":"Std.TreeSet.contains_of_contains_insert","line":117,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_of_contains_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_of_contains_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_of_contains_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L113-L115","name":"Std.TreeSet.mem_insert_self","line":113,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L109-L111","name":"Std.TreeSet.contains_insert_self","line":109,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L104-L107","name":"Std.TreeSet.mem_insert","line":104,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L99-L102","name":"Std.TreeSet.contains_insert","line":99,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L94-L97","name":"Std.TreeSet.singleton_eq_insert","line":94,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.singleton_eq_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.singleton_eq_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">singleton_eq_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">p</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L90-L92","name":"Std.TreeSet.insert_eq_insert","line":90,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.insert_eq_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.insert_eq_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">insert_eq_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">Insert.insert</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L86-L88","name":"Std.TreeSet.isEmpty_iff_forall_not_mem","line":86,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_iff_forall_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_iff_forall_not_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_iff_forall_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L82-L84","name":"Std.TreeSet.isEmpty_iff_forall_contains","line":82,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_iff_forall_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_iff_forall_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_iff_forall_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L78-L80","name":"Std.TreeSet.isEmpty_eq_false_of_contains","line":78,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_false_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_false_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_eq_false_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L74-L76","name":"Std.TreeSet.isEmpty_eq_false_iff_exists_mem","line":74,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_false_iff_exists_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_false_iff_exists_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_eq_false_iff_exists_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L70-L72","name":"Std.TreeSet.isEmpty_eq_false_iff_exists_contains_eq_true","line":70,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_false_iff_exists_contains_eq_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_eq_false_iff_exists_contains_eq_true\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_eq_false_iff_exists_contains_eq_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L66-L68","name":"Std.TreeSet.not_mem_of_isEmpty","line":66,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.not_mem_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.not_mem_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">not_mem_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L62-L64","name":"Std.TreeSet.contains_of_isEmpty","line":62,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L58-L60","name":"Std.TreeSet.not_mem_emptyc","line":58,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.not_mem_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.not_mem_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">not_mem_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L54-L56","name":"Std.TreeSet.contains_emptyc","line":54,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L51-L52","name":"Std.TreeSet.mem_congr","line":51,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_congr\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L47-L49","name":"Std.TreeSet.contains_congr","line":47,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_congr\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L43-L45","name":"Std.TreeSet.contains_iff_mem","line":43,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_iff_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.contains_iff_mem\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">contains_iff_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L39-L41","name":"Std.TreeSet.mem_iff_contains","line":39,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_iff_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.mem_iff_contains\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">mem_iff_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L34-L37","name":"Std.TreeSet.isEmpty_insert","line":34,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_insert\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">TreeSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord/Basic.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Data/TreeSet/Lemmas.lean#L30-L32","name":"Std.TreeSet.isEmpty_emptyc","line":30,"kind":"theorem","docLink":"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/TreeSet/Lemmas.html#Std.TreeSet.isEmpty_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">TreeSet</span>.<span class=\"name\">isEmpty_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"}]}