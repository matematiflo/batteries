{"name":"Lean.Compiler.LCNF.ToLCNF","instances":[{"typeNames":["Lean.Compiler.LCNF.ToLCNF.Element"],"name":"Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","className":"Inhabited"}],"imports":["Lean.ProjFns","Lean.Meta.CtorRecognizer","Lean.Compiler.BorrowedAnnotation","Lean.Compiler.CSimpAttr","Lean.Compiler.ImplementedByAttr","Lean.Compiler.LCNF.Types","Lean.Compiler.LCNF.Bind","Lean.Compiler.LCNF.InferType","Lean.Compiler.LCNF.Util","Lean.Compiler.NeverExtractAttr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L759-L772","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLet","line":759,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L754-L757","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProj","line":754,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L751-L752","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitMData","line":751,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitMData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitMData\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitMData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_mdata</span> : <a href=\"./Lean/Expr.html#Lean.MData\">MData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L715-L749","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLambda","line":715,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLambda","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L681-L713","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitApp","line":681,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L666-L679","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProjFn","line":666,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProjFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProjFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitProjFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">projInfo</span> : <a href=\"./Lean/ProjFns.html#Lean.ProjectionFunctionInfo\">ProjectionFunctionInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L656-L664","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.expandNoConfusionMajor","line":656,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.expandNoConfusionMajor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.expandNoConfusionMajor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">expandNoConfusionMajor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">major</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numFields</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L631-L654","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitNoConfusion","line":631,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitNoConfusion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitNoConfusion\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitNoConfusion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L621-L629","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAndIffRecCore","line":621,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAndIffRecCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAndIffRecCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitAndIffRecCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minorPos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L615-L619","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitFalseRec","line":615,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitFalseRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitFalseRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitFalseRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L607-L613","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitHEqRec","line":607,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitHEqRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitHEqRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitHEqRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L599-L605","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitEqRec","line":599,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitEqRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitEqRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitEqRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L584-L597","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitQuotLift","line":584,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitQuotLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitQuotLift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitQuotLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L580-L582","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCtor","line":580,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCtor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitCtor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L550-L578","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCases","line":550,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">casesInfo</span> : <a href=\"./Lean/Compiler/LCNF/Util.html#Lean.Compiler.LCNF.CasesInfo\">CasesInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L521-L548","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAlt","line":521,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAlt","doc":"Visit a `matcher`/`casesOn` alternative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L506-L516","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.mkOverApplication","line":506,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.mkOverApplication","doc":"If `args.size == arity`, then just return `app`.\nOtherwise return\n```\nlet k := app\nk args[arity...*]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.mkOverApplication\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">mkOverApplication</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L491-L496","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.etaIfUnderApplied","line":491,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.etaIfUnderApplied","doc":"Eta expand if under applied, otherwise apply k "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.etaIfUnderApplied\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">etaIfUnderApplied</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L482-L488","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppDefaultConst","line":482,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppDefaultConst","doc":"Giving `f` a constant `.const declName us`, convert `args` into `args'`, and return `.const declName us args'` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppDefaultConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitAppDefaultConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L464-L479","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppArg","line":464,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitAppArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L461-L462","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLit","line":461,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lit</span> : <a href=\"./Lean/Expr.html#Lean.Literal\">Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L445-L459","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visit","line":445,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L429-L443","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCore","line":429,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L419-L772","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF","line":419,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF","doc":"Put the given expression in `LCNF`.\n\n- Nested proofs are replaced with `lcProof`-applications.\n- Eta-expand applications of declarations that satisfy `shouldEtaExpand`.\n- Put computationally relevant expressions in A-normal form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L414-L417","name":"Lean.Compiler.LCNF.ToLCNF.litToValue","line":414,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.litToValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.litToValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">litToValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lit</span> : <a href=\"./Lean/Expr.html#Lean.Literal\">Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L394-L412","name":"Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit","line":394,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit","doc":"Eta reduce implicits. We use this function to eliminate introduced by the implicit lambda feature,\nwhere it generates terms such as `fun {α} => ReaderT.pure`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">etaReduceImplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L384-L392","name":"Lean.Compiler.LCNF.ToLCNF.etaExpandN","line":384,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaExpandN","doc":"Eta-expand with `n` lambdas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaExpandN\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">etaExpandN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L376-L382","name":"Lean.Compiler.LCNF.ToLCNF.mustEtaExpand","line":376,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mustEtaExpand","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mustEtaExpand\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mustEtaExpand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L366-L374","name":"Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda.go","line":366,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">visitBoundedLambda</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L363-L374","name":"Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda","line":363,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">visitBoundedLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L355-L361","name":"Lean.Compiler.LCNF.ToLCNF.visitLambda.go","line":355,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">visitLambda</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L352-L361","name":"Lean.Compiler.LCNF.ToLCNF.visitLambda","line":352,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">visitLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L340-L350","name":"Lean.Compiler.LCNF.ToLCNF.mkLetDecl","line":340,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLetDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">value </span><span class=\"fn\">type'</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L331-L338","name":"Lean.Compiler.LCNF.ToLCNF.mkParam","line":331,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkParam","doc":"Create a new local declaration using a Lean regular type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L324-L329","name":"Lean.Compiler.LCNF.ToLCNF.cleanupBinderName","line":324,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.cleanupBinderName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.cleanupBinderName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">cleanupBinderName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L315-L322","name":"Lean.Compiler.LCNF.ToLCNF.toLCNFType","line":315,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNFType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNFType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNFType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L309-L313","name":"Lean.Compiler.LCNF.ToLCNF.applyToAny","line":309,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.applyToAny","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.applyToAny\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">applyToAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L290-L302","name":"Lean.Compiler.LCNF.ToLCNF.withNewScope","line":290,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.withNewScope","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.withNewScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">withNewScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L257-L258","name":"Lean.Compiler.LCNF.ToLCNF.run","line":257,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L249-L255","name":"Lean.Compiler.LCNF.ToLCNF.toCode","line":249,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toCode","doc":"Create `Code` that executes the current `seq` and then returns `result` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L246-L247","name":"Lean.Compiler.LCNF.ToLCNF.letValueToArg","line":246,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.letValueToArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.letValueToArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">letValueToArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prefixName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`_x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L238-L244","name":"Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl","line":238,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkAuxLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prefixName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`_x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L233-L236","name":"Lean.Compiler.LCNF.ToLCNF.mkUnreachable","line":233,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkUnreachable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkUnreachable\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkUnreachable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L229-L231","name":"Lean.Compiler.LCNF.ToLCNF.pushElement","line":229,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.pushElement","doc":"Add LCNF element to the current sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.pushElement\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">pushElement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elem</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L226-L227","name":"Lean.Compiler.LCNF.ToLCNF.liftMetaM","line":226,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.liftMetaM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.liftMetaM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">liftMetaM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L224-L224","name":"Lean.Compiler.LCNF.ToLCNF.M","line":224,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L222-L222","name":"Lean.Compiler.LCNF.ToLCNF.State.toAny","line":222,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.toAny","doc":"Fields that are type formers must be replaced with `◾`\nin the resulting code. Otherwise, we have data occurring in\ntypes.\nWhen converting a `casesOn` into LCNF, we add constructor fields\nthat are types and type formers into this set. See `visitCases`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.toAny\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">toAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L214-L214","name":"Lean.Compiler.LCNF.ToLCNF.State.seq","line":214,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.seq","doc":"LCNF sequence, we chain it to create a LCNF `Code` object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.seq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">seq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L212-L212","name":"Lean.Compiler.LCNF.ToLCNF.State.isTypeFormerTypeCache","line":212,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.isTypeFormerTypeCache","doc":"isTypeFormerType cache "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.isTypeFormerTypeCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">isTypeFormerTypeCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L210-L210","name":"Lean.Compiler.LCNF.ToLCNF.State.typeCache","line":210,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.typeCache","doc":"`toLCNFType` cache "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.typeCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">typeCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L208-L208","name":"Lean.Compiler.LCNF.ToLCNF.State.shouldCache","line":208,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.shouldCache","doc":"Determines whether caching has been disabled due to finding a use of\na constant marked with `never_extract`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.shouldCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">shouldCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L203-L203","name":"Lean.Compiler.LCNF.ToLCNF.State.cache","line":203,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.cache","doc":"Cache from Lean regular expression to LCNF argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L201-L201","name":"Lean.Compiler.LCNF.ToLCNF.State.lctx","line":201,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.lctx","doc":"Local context containing the original Lean types (not LCNF ones). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L199-L199","name":"Lean.Compiler.LCNF.ToLCNF.State.mk","line":199,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shouldCache</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeCache</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isTypeFormerTypeCache</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">seq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toAny</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L199-L222","name":"Lean.Compiler.LCNF.ToLCNF.State","line":199,"kind":"structure","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L159-L197","name":"Lean.Compiler.LCNF.ToLCNF.seqToCode.go","line":159,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">seqToCode</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">seq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L156-L197","name":"Lean.Compiler.LCNF.ToLCNF.seqToCode","line":156,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">seqToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">seq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L83-L154","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.go","line":83,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">bindCases</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jpDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM\">BindCasesM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L75-L81","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.findFun?","line":75,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.findFun?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.findFun?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">bindCases</span>.<span class=\"name\">findFun?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L72-L73","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.visitAlts","line":72,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.visitAlts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.visitAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">bindCases</span>.<span class=\"name\">visitAlts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jpDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM\">BindCasesM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L54-L154","name":"Lean.Compiler.LCNF.ToLCNF.bindCases","line":54,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases","doc":"This method returns code that at each exit point of `cases`, it jumps to `jpDecl`.\nIt is similar to `Code.bind`, but we add special support for `inlineMatcher`.\nThe `inlineMatcher` function inlines the auxiliary `_match_<idx>` declarations.\nTo make sure there is no code duplication, `inlineMatcher` creates auxiliary declarations `_alt.<idx>`.\nWe can say the `_alt.<idx>` declarations are pre join points. For each auxiliary declaration used at\nan exit point of `cases`, this method creates an new auxiliary join point that invokes `_alt.<idx>`,\nand then jumps to `jpDecl`. The goal is to make sure the auxiliary join point is the only occurrence\nof `_alt.<idx>`, then `simp` will inline it.\nThat is, our goal is to try to promote the pre join points `_alt.<idx>` into a proper join point.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">bindCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jpDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L51-L52","name":"Lean.Compiler.LCNF.ToLCNF.BindCasesM","line":51,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM","doc":"Auxiliary monad for implementing `bindCases` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">BindCasesM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L45-L49","name":"Lean.Compiler.LCNF.ToLCNF.BindCasesM.State","line":45,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM.State","doc":"State for `BindCasesM` monad\nMapping from `_alt.<idx>` variables to new join points\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">BindCasesM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L43-L43","name":"Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","line":43,"kind":"instance","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.instInhabitedElement\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">instInhabitedElement</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L42-L42","name":"Lean.Compiler.LCNF.ToLCNF.Element.unreach","line":42,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.unreach","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.unreach\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">unreach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L41-L41","name":"Lean.Compiler.LCNF.ToLCNF.Element.cases","line":41,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L40-L40","name":"Lean.Compiler.LCNF.ToLCNF.Element.let","line":40,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.let","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.let\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">let</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L39-L39","name":"Lean.Compiler.LCNF.ToLCNF.Element.fun","line":39,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.fun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.fun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">fun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L38-L38","name":"Lean.Compiler.LCNF.ToLCNF.Element.jp","line":38,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.jp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.jp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">jp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L32-L43","name":"Lean.Compiler.LCNF.ToLCNF.Element","line":32,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element","doc":"Auxiliary inductive datatype for constructing LCNF `Code` objects.\nThe `toLCNF` function maintains a sequence of elements that is eventually\nconverted into `Code`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L28-L30","name":"Lean.Compiler.LCNF.ToLCNF.mkLcProof","line":28,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLcProof","doc":"Create the temporary `lcProof` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLcProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkLcProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Compiler/LCNF/ToLCNF.lean#L21-L26","name":"Lean.Compiler.LCNF.ToLCNF.isLCProof","line":21,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.isLCProof","doc":"Return `true` if `e` is a `lcProof` application.\nRecall that we use `lcProof` to erase all nested proofs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.isLCProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">isLCProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"}]}