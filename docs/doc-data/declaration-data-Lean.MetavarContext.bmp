{"name":"Lean.MetavarContext","instances":[{"typeNames":["Lean.LocalInstance"],"name":"Lean.instInhabitedLocalInstance","className":"Inhabited"},{"typeNames":["Lean.LocalInstance"],"name":"Lean.instBEqLocalInstance","className":"BEq"},{"typeNames":["Lean.LocalInstance"],"name":"Lean.instHashableLocalInstance","className":"Hashable"},{"typeNames":["Lean.MetavarKind"],"name":"Lean.instInhabitedMetavarKind","className":"Inhabited"},{"typeNames":["Lean.MetavarKind"],"name":"Lean.instReprMetavarKind","className":"Repr"},{"typeNames":["Lean.MetavarDecl"],"name":"Lean.instInhabitedMetavarDecl","className":"Inhabited"},{"typeNames":["Lean.MetavarContext"],"name":"Lean.instInhabitedMetavarContext","className":"Inhabited"},{"typeNames":["StateM"],"name":"Lean.instMonadMCtxStateMMetavarContext","className":"Lean.MonadMCtx"},{"typeNames":[],"name":"Lean.instMonadMCtxOfMonadLift","className":"Lean.MonadMCtx"},{"typeNames":["StateRefT'"],"name":"Lean.instMonadMCtxStateRefT'MetavarContextST","className":"Lean.MonadMCtx"},{"typeNames":["_private.Lean.MetavarContext.0.Lean.DependsOn.M"],"name":"Lean.DependsOn.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.MetavarContext.MkBinding.Exception"],"name":"Lean.MetavarContext.MkBinding.instToStringException","className":"ToString"},{"typeNames":["Lean.MetavarContext.MkBinding.M"],"name":"Lean.MetavarContext.MkBinding.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.ExprStructEq","Lean.Expr","Lean.MetavarContext.MkBinding.M"],"name":"Lean.MetavarContext.MkBinding.instMonadHashMapCacheAdapterExprStructEqExprM","className":"Lean.MonadHashMapCacheAdapter"},{"typeNames":["Lean.MetavarContext.LevelMVarToParam.M"],"name":"Lean.MetavarContext.LevelMVarToParam.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.ExprStructEq","Lean.Expr","Lean.MetavarContext.LevelMVarToParam.M"],"name":"Lean.MetavarContext.LevelMVarToParam.instMonadCacheExprStructEqExprM","className":"Lean.MonadCache"}],"imports":["Init.ShareCommon","Lean.Util.MonadCache","Lean.LocalContext"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1501-L1507","name":"Lean.MVarId.setFVarBinderInfo","line":1501,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.setFVarBinderInfo","doc":"Set the `BinderInfo` of an fvar. If the given metavariable is not declared or\nthe given fvar doesn't exist in its context, nothing happens.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MVarId.setFVarBinderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">setFVarBinderInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bi</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1493-L1499","name":"Lean.MVarId.setFVarKind","line":1493,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.setFVarKind","doc":"Set the kind of an fvar. If the given metavariable is not declared or the\ngiven fvar doesn't exist in its context, nothing happens.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MVarId.setFVarKind\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">setFVarKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1482-L1491","name":"Lean.MVarId.modifyLCtx","line":1482,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.modifyLCtx","doc":"Modify the local context of a metavariable. If the metavariable is not declared,\nnothing happens.\n\nYou must ensure that the modification is legal. In particular, expressions may\nonly be replaced with defeq expressions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MVarId.modifyLCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">modifyLCtx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1471-L1480","name":"Lean.MVarId.modifyDecl","line":1471,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.modifyDecl","doc":"Modify the declaration of a metavariable. If the metavariable is not declared,\nnothing happens.\n\nYou must ensure that the modification is legal. In particular, expressions may\nonly be replaced with defeq expressions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MVarId.modifyDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">modifyDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a> → <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1464-L1465","name":"Lean.MetavarContext.getExprAssignmentDomain","line":1464,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getExprAssignmentDomain","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.getExprAssignmentDomain\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">getExprAssignmentDomain</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1456-L1462","name":"Lean.MetavarContext.levelMVarToParam","line":1456,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.levelMVarToParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.levelMVarToParam\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">levelMVarToParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alreadyUsedPred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">except</span> : <span class=\"fn\"><a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramNamePrefix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`u</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextParamIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult\">UnivMVarParamResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1454-L1454","name":"Lean.MetavarContext.UnivMVarParamResult.expr","line":1454,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">UnivMVarParamResult</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult\">UnivMVarParamResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1453-L1453","name":"Lean.MetavarContext.UnivMVarParamResult.nextParamIdx","line":1453,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.nextParamIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.nextParamIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">UnivMVarParamResult</span>.<span class=\"name\">nextParamIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult\">UnivMVarParamResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1452-L1452","name":"Lean.MetavarContext.UnivMVarParamResult.newParamNames","line":1452,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.newParamNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.newParamNames\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">UnivMVarParamResult</span>.<span class=\"name\">newParamNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult\">UnivMVarParamResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1451-L1451","name":"Lean.MetavarContext.UnivMVarParamResult.mctx","line":1451,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">UnivMVarParamResult</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult\">UnivMVarParamResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1450-L1450","name":"Lean.MetavarContext.UnivMVarParamResult.mk","line":1450,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">UnivMVarParamResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newParamNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextParamIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult\">UnivMVarParamResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1450-L1454","name":"Lean.MetavarContext.UnivMVarParamResult","line":1450,"kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">UnivMVarParamResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1440-L1446","name":"Lean.MetavarContext.LevelMVarToParam.main.visitApp","line":1440,"kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.main.visitApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.main.visitApp\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">main</span>.<span class=\"name\">visitApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1423-L1446","name":"Lean.MetavarContext.LevelMVarToParam.main","line":1423,"kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.main","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.main\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1404-L1421","name":"Lean.MetavarContext.LevelMVarToParam.visitLevel","line":1404,"kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.visitLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.visitLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">visitLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.M\">M</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1393-L1402","name":"Lean.MetavarContext.LevelMVarToParam.mkParamName","line":1393,"kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.mkParamName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.mkParamName\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">mkParamName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1389-L1391","name":"Lean.MetavarContext.LevelMVarToParam.instMonadCacheExprStructEqExprM","line":1389,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.instMonadCacheExprStructEqExprM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.instMonadCacheExprStructEqExprM\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">instMonadCacheExprStructEqExprM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadCache.html#Lean.MonadCache\">MonadCache</a> <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">ExprStructEq</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1385-L1387","name":"Lean.MetavarContext.LevelMVarToParam.instMonadMCtxM","line":1385,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.instMonadMCtxM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.instMonadMCtxM\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">instMonadMCtxM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1383-L1383","name":"Lean.MetavarContext.LevelMVarToParam.M","line":1383,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.M\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1381-L1381","name":"Lean.MetavarContext.LevelMVarToParam.State.cache","line":1381,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.cache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">ExprStructEq</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1380-L1380","name":"Lean.MetavarContext.LevelMVarToParam.State.nextParamIdx","line":1380,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.nextParamIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.nextParamIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">State</span>.<span class=\"name\">nextParamIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1379-L1379","name":"Lean.MetavarContext.LevelMVarToParam.State.paramNames","line":1379,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.paramNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.paramNames\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">State</span>.<span class=\"name\">paramNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1378-L1378","name":"Lean.MetavarContext.LevelMVarToParam.State.mctx","line":1378,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">State</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1377-L1377","name":"Lean.MetavarContext.LevelMVarToParam.State.mk","line":1377,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextParamIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">ExprStructEq</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1377-L1381","name":"Lean.MetavarContext.LevelMVarToParam.State","line":1377,"kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1375-L1375","name":"Lean.MetavarContext.LevelMVarToParam.Context.except","line":1375,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.except","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.except\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">Context</span>.<span class=\"name\">except</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1374-L1374","name":"Lean.MetavarContext.LevelMVarToParam.Context.alreadyUsedPred","line":1374,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.alreadyUsedPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.alreadyUsedPred\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">Context</span>.<span class=\"name\">alreadyUsedPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1373-L1373","name":"Lean.MetavarContext.LevelMVarToParam.Context.paramNamePrefix","line":1373,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.paramNamePrefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.paramNamePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">Context</span>.<span class=\"name\">paramNamePrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1372-L1372","name":"Lean.MetavarContext.LevelMVarToParam.Context.mk","line":1372,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramNamePrefix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alreadyUsedPred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">except</span> : <span class=\"fn\"><a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1372-L1375","name":"Lean.MetavarContext.LevelMVarToParam.Context","line":1372,"kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">LevelMVarToParam</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1346-L1368","name":"Lean.MetavarContext.isWellFormed","line":1346,"kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.isWellFormed","doc":"`isWellFormed lctx e` returns true iff\n- All locals in `e` are declared in `lctx`\n- All metavariables `?m` in `e` have a local context which is a subprefix of `lctx` or are assigned, and the assignment is well-formed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.isWellFormed\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">isWellFormed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1343-L1344","name":"Lean.MetavarContext.collectForwardDeps","line":1343,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.collectForwardDeps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.collectForwardDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">collectForwardDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toRevert</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserveOrder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM\">MkBindingM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1340-L1341","name":"Lean.MetavarContext.abstractRange","line":1340,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.abstractRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.abstractRange\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">abstractRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM\">MkBindingM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1337-L1338","name":"Lean.MetavarContext.mkForall","line":1337,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkForall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.mkForall\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">mkForall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedLetOnly </span><span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderInfoForMVars</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a> := <a href=\"./Lean/Expr.html#Lean.BinderInfo.implicit\">BinderInfo.implicit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM\">MkBindingM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1334-L1335","name":"Lean.MetavarContext.mkLambda","line":1334,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkLambda","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.mkLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">mkLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedLetOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">etaReduce</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderInfoForMVars</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a> := <a href=\"./Lean/Expr.html#Lean.BinderInfo.implicit\">BinderInfo.implicit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM\">MkBindingM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1330-L1332","name":"Lean.MetavarContext.mkBinding","line":1330,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkBinding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.mkBinding\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">mkBinding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isLambda</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedLetOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">etaReduce</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderInfoForMVars</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a> := <a href=\"./Lean/Expr.html#Lean.BinderInfo.implicit\">BinderInfo.implicit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM\">MkBindingM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1327-L1328","name":"Lean.MetavarContext.revert","line":1327,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.revert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.revert\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">revert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserveOrder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM\">MkBindingM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1324-L1325","name":"Lean.MetavarContext.elimMVarDeps","line":1324,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.elimMVarDeps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.elimMVarDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">elimMVarDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserveOrder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM\">MkBindingM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1322-L1322","name":"Lean.MetavarContext.MkBindingM","line":1322,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBindingM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1320-L1320","name":"Lean.MetavarContext.MkBindingM.Context.lctx","line":1320,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context.lctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBindingM</span>.<span class=\"name\">Context</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1319-L1319","name":"Lean.MetavarContext.MkBindingM.Context.mainModule","line":1319,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context.mainModule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context.mainModule\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBindingM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mainModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1318-L1318","name":"Lean.MetavarContext.MkBindingM.Context.mk","line":1318,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBindingM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainModule</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1318-L1320","name":"Lean.MetavarContext.MkBindingM.Context","line":1318,"kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBindingM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1265-L1314","name":"Lean.MetavarContext.MkBinding.mkBinding","line":1265,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.mkBinding","doc":"Similar to `LocalContext.mkBinding`, but handles metavariables correctly.\nThis function trusts that `xs` has all forward dependencies that appear in `e` and that the variables are in order.\n\n- If `usedOnly := true` then `forall` and `lambda` expressions are created only for used variables.\n- If `usedLetOnly := true` then `let` expressions are created only for used (let-) variables.\n- If `generalizeNondepLet := true` then nondependent let variables become `forall` or `lambda` expressions\n  according to the value of `usedOnly`.\n  Generally, `generalizeNondepLet` should be `true` *unless* `mkBinding` is being used when leaving a telescope combinator (like `Meta.lambdaLetTelescope`).\n  This needs to be `true` when making terms that should remain type correct with respect to the same `lctx`;\n  for example, if `e' ← mkBinding true lctx xs e (generalizeNondepLet := true)` and `xs' ← xs.filterM (FVarId.isLetVar · false)`,\n  then one has that `mkAppN e' xs'` is definitionally equal to `e` with respect to `lctx`.\n  **Note:** `generalizeNondepLet := true` is the common case, so `mkBinding` API uses it as the default.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.mkBinding\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">mkBinding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isLambda</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedOnly </span><span class=\"fn\">usedLetOnly </span><span class=\"fn\">etaReduce </span><span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1244-L1251","name":"Lean.MetavarContext.MkBinding.abstractRange","line":1244,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.abstractRange","doc":"Similar to `Expr.abstractRange`, but handles metavariables correctly.\nIt uses `elimMVarDeps` to ensure `e` and the type of the free variables `xs` do not\ncontain a metavariable `?m` s.t. local context of `?m` contains a free variable in `xs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.abstractRange\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">abstractRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1231-L1242","name":"Lean.MetavarContext.MkBinding.revert","line":1231,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.revert","doc":"Revert the variables `xs` from the local context of `mvarId`, returning\nan expression representing the (new) reverted metavariable and the list of\nvariables that were actually reverted (this list will include any forward dependencies).\n\nSee details in the comment at the top of the file.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.revert\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">revert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M\">M</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1224-L1229","name":"Lean.MetavarContext.MkBinding.elimMVarDeps","line":1224,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.elimMVarDeps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.elimMVarDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">elimMVarDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L1035-L1039","name":"Lean.MetavarContext.MkBinding.reduceLocalContext","line":1035,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.reduceLocalContext","doc":"Create a new `LocalContext` by removing the free variables in `toRevert` from `lctx`.\nWe use this function when we create auxiliary metavariables at `elimMVarDepsAux`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.reduceLocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">reduceLocalContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toRevert</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L970-L1033","name":"Lean.MetavarContext.MkBinding.collectForwardDeps","line":970,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.collectForwardDeps","doc":"Given `toRevert` an array of free variables s.t. `lctx` contains their declarations,\nreturn a new array of free variables that contains `toRevert` and all variables\nin `lctx` that may depend on `toRevert`.\n\nWhen `generalizeNondepLet := true` (the default), then the values of nondependent lets are not considered\nwhen computing forward dependencies.\n\nRemark: the result is sorted by `LocalDecl` indices.\n\nRemark: We used to throw an `Exception.revertFailure` exception when an auxiliary declaration\nhad to be reversed. Recall that auxiliary declarations are created when compiling (mutually)\nrecursive definitions. The `revertFailure` due to auxiliary declaration dependency was originally\nintroduced in Lean3 to address issue <https://github.com/leanprover/lean/issues/1258>.\n\nIn Lean4, this solution is not satisfactory because all definitions/theorems are potentially\nrecursive. So, even a simple (incomplete) definition such as\n```\nvariables {α : Type} in\ndef f (a : α) : List α :=\n_\n```\nwould trigger the `Exception.revertFailure` exception. In the definition above,\nthe elaborator creates the auxiliary definition `f : {α : Type} → List α`.\nThe `_` is elaborated as a new fresh variable `?m` that contains `α : Type`, `a : α`, and `f : α → List α` in its context,\nWhen we try to create the lambda `fun {α : Type} (a : α) => ?m`, we first need to create\nan auxiliary `?n` which does not contain `α` and `a` in its context. That is,\nwe create the metavariable `?n : {α : Type} → (a : α) → (f : α → List α) → List α`,\nadd the delayed assignment `?n #[l, a, f] := ?m`, and create the lambda\n`fun {α : Type} (a : α) => ?n α a f`.\n\nSee `elimMVarDeps` for more information.\n\nIf we kept using the Lean3 approach, we would get the `Exception.revertFailure` exception because we are\nreverting the auxiliary definition `f`.\n\nNote that <https://github.com/leanprover/lean/issues/1258> is not an issue in Lean4 because\nwe have changed how we compile recursive definitions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.collectForwardDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">collectForwardDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toRevert</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L956-L958","name":"Lean.MetavarContext.MkBinding.instMonadHashMapCacheAdapterExprStructEqExprM","line":956,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instMonadHashMapCacheAdapterExprStructEqExprM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instMonadHashMapCacheAdapterExprStructEqExprM\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">instMonadHashMapCacheAdapterExprStructEqExprM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadCache.html#Lean.MonadHashMapCacheAdapter\">MonadHashMapCacheAdapter</a> <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">ExprStructEq</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L953-L954","name":"Lean.MetavarContext.MkBinding.preserveOrder","line":953,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.preserveOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.preserveOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">preserveOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L945-L947","name":"Lean.MetavarContext.MkBinding.instMonadMCtxM","line":945,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instMonadMCtxM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instMonadMCtxM\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">instMonadMCtxM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L943-L943","name":"Lean.MetavarContext.MkBinding.M","line":943,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L942-L942","name":"Lean.MetavarContext.MkBinding.MCore","line":942,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.MCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.MCore\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">MCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L940-L940","name":"Lean.MetavarContext.MkBinding.Context.mvarIdsToAbstract","line":940,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.mvarIdsToAbstract","doc":"Set of unassigned metavariables being abstracted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.mvarIdsToAbstract\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">Context</span>.<span class=\"name\">mvarIdsToAbstract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarIdSet\">MVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L938-L938","name":"Lean.MetavarContext.MkBinding.Context.binderInfoForMVars","line":938,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.binderInfoForMVars","doc":"When creating binders for abstracted metavariables, we use the following `BinderInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.binderInfoForMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">Context</span>.<span class=\"name\">binderInfoForMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L936-L936","name":"Lean.MetavarContext.MkBinding.Context.preserveOrder","line":936,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.preserveOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.preserveOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">Context</span>.<span class=\"name\">preserveOrder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L935-L935","name":"Lean.MetavarContext.MkBinding.Context.mainModule","line":935,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.mainModule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.mainModule\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">Context</span>.<span class=\"name\">mainModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L934-L934","name":"Lean.MetavarContext.MkBinding.Context.mk","line":934,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainModule</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserveOrder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderInfoForMVars</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarIdsToAbstract</span> : <a href=\"./Lean/Expr.html#Lean.MVarIdSet\">MVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L934-L940","name":"Lean.MetavarContext.MkBinding.Context","line":934,"kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L932-L932","name":"Lean.MetavarContext.MkBinding.State.cache","line":932,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.cache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">ExprStructEq</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L931-L931","name":"Lean.MetavarContext.MkBinding.State.ngen","line":931,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.ngen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.ngen\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">State</span>.<span class=\"name\">ngen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L930-L930","name":"Lean.MetavarContext.MkBinding.State.nextMacroScope","line":930,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.nextMacroScope","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.nextMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">State</span>.<span class=\"name\">nextMacroScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.MacroScope\">MacroScope</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L929-L929","name":"Lean.MetavarContext.MkBinding.State.mctx","line":929,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">State</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L928-L928","name":"Lean.MetavarContext.MkBinding.State.mk","line":928,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextMacroScope</span> : <a href=\"./Init/Prelude.html#Lean.MacroScope\">MacroScope</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.ExprStructEq\">ExprStructEq</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L923-L932","name":"Lean.MetavarContext.MkBinding.State","line":923,"kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State","doc":"`MkBinding` and `elimMVarDepsAux` are mutually recursive, but `cache` is only used at `elimMVarDepsAux`.\nWe use a single state object for convenience.\n\nWe have a `NameGenerator` because we need to generate fresh auxiliary metavariables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L915-L921","name":"Lean.MetavarContext.MkBinding.instToStringException","line":915,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instToStringException","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instToStringException\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">instToStringException</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Exception\">Exception</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L913-L913","name":"Lean.MetavarContext.MkBinding.Exception.revertFailure","line":913,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Exception.revertFailure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Exception.revertFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">Exception</span>.<span class=\"name\">revertFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toRevert</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L912-L913","name":"Lean.MetavarContext.MkBinding.Exception","line":912,"kind":"inductive","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Exception","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Exception\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">MkBinding</span>.<span class=\"name\">Exception</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L904-L908","name":"Lean.MetavarContext.incDepth","line":904,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.incDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.incDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">incDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowLevelAssignments</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L899-L902","name":"Lean.MetavarContext.isAnonymousMVar","line":899,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.isAnonymousMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.isAnonymousMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">isAnonymousMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L894-L897","name":"Lean.MetavarContext.getLevelDepth","line":894,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getLevelDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.getLevelDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">getLevelDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L891-L892","name":"Lean.MetavarContext.findLevelDepth?","line":891,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.findLevelDepth?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.findLevelDepth?\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">findLevelDepth?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L882-L889","name":"Lean.MetavarContext.setFVarBinderInfo","line":882,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setFVarBinderInfo","doc":"Set the `BinderInfo` of an fvar. If the given metavariable is not declared or\nthe given fvar doesn't exist in its context, the `MetavarContext` is returned\nunchanged.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.setFVarBinderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">setFVarBinderInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bi</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L873-L880","name":"Lean.MetavarContext.setFVarKind","line":873,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setFVarKind","doc":"Set the kind of an fvar. If the given metavariable is not declared or the\ngiven fvar doesn't exist in its context, the `MetavarContext` is returned\nunchanged.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.setFVarKind\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">setFVarKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L862-L871","name":"Lean.MetavarContext.modifyExprMVarLCtx","line":862,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.modifyExprMVarLCtx","doc":"Modify the local context of a metavariable. If the metavariable is not declared,\nthe `MetavarContext` is returned unchanged.\n\nYou must ensure that the modification is legal. In particular, expressions may\nonly be replaced with defeq expressions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.modifyExprMVarLCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">modifyExprMVarLCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L856-L860","name":"Lean.MetavarContext.setMVarType","line":856,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarType","doc":"Update the type of the given metavariable. This function assumes the new type is\ndefinitionally equal to the current one "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarType\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">setMVarType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L846-L854","name":"Lean.MetavarContext.setMVarUserNameTemporarily","line":846,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarUserNameTemporarily","doc":"Low-level version of `setMVarUserName`.\nIt does not update the table `userNames`. Thus, `findUserName?` cannot see the modification.\nIt is meant for `mkForallFVars'` where we temporarily set the user facing name of metavariables to get more\nmeaningful binder names.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarUserNameTemporarily\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">setMVarUserNameTemporarily</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L835-L844","name":"Lean.MetavarContext.setMVarUserName","line":835,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarUserName","doc":"Set the metavariable user facing name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">setMVarUserName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L831-L833","name":"Lean.MetavarContext.setMVarKind","line":831,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarKind\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">setMVarKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L817-L829","name":"Lean.MetavarContext.modifyExprMVarDecl","line":817,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.modifyExprMVarDecl","doc":"Modify the declaration of a metavariable. If the metavariable is not declared,\nthe `MetavarContext` is returned unchanged.\n\nYou must ensure that the modification is legal. In particular, expressions may\nonly be replaced with defeq expressions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.modifyExprMVarDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">modifyExprMVarDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a> → <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L814-L815","name":"Lean.MetavarContext.findUserName?","line":814,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.findUserName?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.findUserName?\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">findUserName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L811-L812","name":"Lean.MetavarContext.findDecl?","line":811,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.findDecl?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.findDecl?\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">findDecl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L805-L809","name":"Lean.MetavarContext.addLevelMVarDecl","line":805,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.addLevelMVarDecl","doc":"Low level API for adding/declaring universe level metavariable declarations.\nIt is used to implement actions in the monads `MetaM`, `ElabM` and `TacticM`.\nIt should not be used directly since the argument `(mvarId : MVarId)` is assumed to be \"unique\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.addLevelMVarDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">addLevelMVarDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L801-L803","name":"Lean.MetavarContext.addExprMVarDeclExp","line":801,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.addExprMVarDeclExp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.addExprMVarDeclExp\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">addExprMVarDeclExp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L777-L799","name":"Lean.MetavarContext.addExprMVarDecl","line":777,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.addExprMVarDecl","doc":"Low level API for adding/declaring metavariable declarations.\nIt is used to implement actions in the monads `MetaM`, `ElabM` and `TacticM`.\nIt should not be used directly since the argument `(mvarId : MVarId)` is assumed to be \"unique\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.addExprMVarDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">addExprMVarDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a> := <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind.natural\">MetavarKind.natural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numScopeArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L774-L775","name":"Lean.MetavarContext.mkMetavarContext","line":774,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkMetavarContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.mkMetavarContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">mkMetavarContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L767-L769","name":"Lean.localDeclDependsOnPred","line":767,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.localDeclDependsOnPred","doc":"Return true iff the local declaration `localDecl` depends on a free variable `x` s.t. `pf x`, an unassigned metavariable `?m` s.t. `pm ?m` is true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.localDeclDependsOnPred\"><span class=\"name\">Lean</span>.<span class=\"name\">localDeclDependsOnPred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localDecl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pf</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pm</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L763-L765","name":"Lean.dependsOnPred","line":763,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.dependsOnPred","doc":"Return true iff `e` depends on a free variable `x` s.t. `pf x`, or an unassigned metavariable `?m` s.t. `pm ?m` is true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.dependsOnPred\"><span class=\"name\">Lean</span>.<span class=\"name\">dependsOnPred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pf</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pm</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L754-L761","name":"Lean.localDeclDependsOn'","line":754,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.localDeclDependsOn'","doc":"Similar to `localDeclDependsOn`, but `x` can be a free variable or an unassigned metavariable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.localDeclDependsOn'\"><span class=\"name\">Lean</span>.<span class=\"name\">localDeclDependsOn'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localDecl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L745-L752","name":"Lean.exprDependsOn'","line":745,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.exprDependsOn'","doc":"Similar to `exprDependsOn`, but `x` can be a free variable or an unassigned metavariable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.exprDependsOn'\"><span class=\"name\">Lean</span>.<span class=\"name\">exprDependsOn'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L737-L743","name":"Lean.localDeclDependsOn","line":737,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.localDeclDependsOn","doc":"Returns true iff `localDecl` depends on the free variable `fvarId`\n- When `generalizeNondepLet := true` (the default), then values of nondependent lets are ignored,\n  for computing dependencies from \"within\" a telescope.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.localDeclDependsOn\"><span class=\"name\">Lean</span>.<span class=\"name\">localDeclDependsOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localDecl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L733-L735","name":"Lean.dependsOn","line":733,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.dependsOn","doc":"Return true iff `e` depends on the free variable `fvarId` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.dependsOn\"><span class=\"name\">Lean</span>.<span class=\"name\">dependsOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L730-L731","name":"Lean.exprDependsOn","line":730,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.exprDependsOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.exprDependsOn\"><span class=\"name\">Lean</span>.<span class=\"name\">exprDependsOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L713-L728","name":"Lean.findLocalDeclDependsOn","line":713,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.findLocalDeclDependsOn","doc":"Similar to `findExprDependsOn`, but checks the expressions in the given local declaration\ndepends on a free variable `x` s.t. `pf x` is `true` or an unassigned metavariable `?m` s.t. `pm ?m` is true.\n- When `generalizeNondepLet := true` (the default), then values of nondependent lets are ignored,\n  for computing dependencies from \"within\" a telescope.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.findLocalDeclDependsOn\"><span class=\"name\">Lean</span>.<span class=\"name\">findLocalDeclDependsOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localDecl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pf</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pm</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L702-L711","name":"Lean.findExprDependsOn","line":702,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.findExprDependsOn","doc":"Return `true` iff `e` depends on a free variable `x` s.t. `pf x` is `true`, or an unassigned metavariable `?m` s.t. `pm ?m` is true.\nFor each metavariable `?m` (that does not satisfy `pm` occurring in `x`\n1- If `?m := t`, then we visit `t` looking for `x`\n2- If `?m` is unassigned, then we consider the worst case and check whether `x` is in the local context of `?m`.\n   This case is a \"may dependency\". That is, we may assign a term `t` to `?m` s.t. `t` contains `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.findExprDependsOn\"><span class=\"name\">Lean</span>.<span class=\"name\">findExprDependsOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pf</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pm</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L697-L698","name":"Lean.DependsOn.main","line":697,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.main","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.DependsOn.main\"><span class=\"name\">Lean</span>.<span class=\"name\">DependsOn</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pf</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pm</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#_private.Lean.MetavarContext.0.Lean.DependsOn.M\">Lean.DependsOn.M✝</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L643-L645","name":"Lean.DependsOn.instMonadMCtxM","line":643,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.instMonadMCtxM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.DependsOn.instMonadMCtxM\"><span class=\"name\">Lean</span>.<span class=\"name\">DependsOn</span>.<span class=\"name\">instMonadMCtxM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <a href=\"./Lean/MetavarContext.html#_private.Lean.MetavarContext.0.Lean.DependsOn.M\">Lean.DependsOn.M✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L639-L639","name":"Lean.DependsOn.State.mctx","line":639,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.State.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.DependsOn.State.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">DependsOn</span>.<span class=\"name\">State</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.DependsOn.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L638-L638","name":"Lean.DependsOn.State.visited","line":638,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.State.visited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.DependsOn.State.visited\"><span class=\"name\">Lean</span>.<span class=\"name\">DependsOn</span>.<span class=\"name\">State</span>.<span class=\"name\">visited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.DependsOn.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.ExprSet\">ExprSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L637-L637","name":"Lean.DependsOn.State.mk","line":637,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.DependsOn.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">DependsOn</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">visited</span> : <a href=\"./Lean/Expr.html#Lean.ExprSet\">ExprSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.DependsOn.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L637-L639","name":"Lean.DependsOn.State","line":637,"kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.DependsOn.State\"><span class=\"name\">Lean</span>.<span class=\"name\">DependsOn</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L628-L633","name":"Lean.instantiateLocalDeclMVars","line":628,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateLocalDeclMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instantiateLocalDeclMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">instantiateLocalDeclMVars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localDecl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L621-L626","name":"Lean.instantiateMVarDeclMVars","line":621,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateMVarDeclMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instantiateMVarDeclMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">instantiateMVarDeclMVars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L603-L619","name":"Lean.instantiateLCtxMVars","line":603,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateLCtxMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instantiateLCtxMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">instantiateLCtxMVars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L595-L601","name":"Lean.instantiateMVars","line":595,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instantiateMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">instantiateMVars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L574-L577","name":"Lean.instantiateMVarsCore","line":574,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateMVarsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instantiateMVarsCore\"><span class=\"name\">Lean</span>.<span class=\"name\">instantiateMVarsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L570-L572","name":"Lean.instMonadMCtxStateRefT'MetavarContextST","line":570,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instMonadMCtxStateRefT'MetavarContextST","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instMonadMCtxStateRefT'MetavarContextST\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadMCtxStateRefT'MetavarContextST</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L564-L568","name":"Lean.instantiateExprMVars","line":564,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateExprMVars","doc":"instantiateExprMVars main function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instantiateExprMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">instantiateExprMVars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L561-L562","name":"Lean.instantiateExprMVarsImp","line":561,"kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.instantiateExprMVarsImp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instantiateExprMVarsImp\"><span class=\"name\">Lean</span>.<span class=\"name\">instantiateExprMVarsImp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L556-L559","name":"Lean.instantiateLevelMVars","line":556,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateLevelMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instantiateLevelMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">instantiateLevelMVars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L553-L554","name":"Lean.instantiateLevelMVarsImp","line":553,"kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.instantiateLevelMVarsImp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instantiateLevelMVarsImp\"><span class=\"name\">Lean</span>.<span class=\"name\">instantiateLevelMVarsImp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L524-L529","name":"Lean.assignDelayedMVar","line":524,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.assignDelayedMVar","doc":"Add a delayed assignment for the given metavariable. You must make sure that\nthe metavariable is not already assigned or delayed-assigned.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.assignDelayedMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">assignDelayedMVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarIdPending</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L520-L522","name":"Lean.assignExp","line":520,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.assignExp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.assignExp\"><span class=\"name\">Lean</span>.<span class=\"name\">assignExp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L511-L518","name":"Lean.MVarId.assign","line":511,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.assign","doc":"Add `mvarId := x` to the metavariable assignment.\nThis method does not check whether `mvarId` is already assigned, nor it checks whether\na cycle is being introduced, or whether the expression has the right type.\nThis is a low-level API, and it is safer to use `isDefEq (mkMVar mvarId) x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MVarId.assign\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">assign</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L507-L509","name":"Lean.assignLevelMVarExp","line":507,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.assignLevelMVarExp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.assignLevelMVarExp\"><span class=\"name\">Lean</span>.<span class=\"name\">assignLevelMVarExp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L498-L505","name":"Lean.assignLevelMVar","line":498,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.assignLevelMVar","doc":"Add `mvarId := u` to the universe metavariable assignment.\nThis method does not check whether `mvarId` is already assigned, nor it checks whether\na cycle is being introduced.\nThis is a low-level API, and it is safer to use `isLevelDefEq (mkLevelMVar mvarId) u`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.assignLevelMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">assignLevelMVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L483-L496","name":"Lean.hasAssignableMVar","line":483,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.hasAssignableMVar","doc":"Return `true` iff expression contains a metavariable that can be assigned. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.hasAssignableMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">hasAssignableMVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L474-L481","name":"Lean.hasAssignableLevelMVar","line":474,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.hasAssignableLevelMVar","doc":"Return true iff the given level contains a metavariable that can be assigned. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.hasAssignableLevelMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">hasAssignableLevelMVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Level.html#Lean.Level\">Level</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L459-L472","name":"Lean.hasAssignedMVar","line":459,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.hasAssignedMVar","doc":"Return `true` iff expression contains assigned (level/expr) metavariables or delayed assigned mvars "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.hasAssignedMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">hasAssignedMVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L450-L457","name":"Lean.hasAssignedLevelMVar","line":450,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.hasAssignedLevelMVar","doc":"Return true iff the given level contains an assigned metavariable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.hasAssignedLevelMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">hasAssignedLevelMVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Level.html#Lean.Level\">Level</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L445-L448","name":"Lean.MVarId.isAssignable","line":445,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.isAssignable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MVarId.isAssignable\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">isAssignable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L440-L443","name":"Lean.MetavarContext.getDecl","line":440,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.getDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">getDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L434-L438","name":"Lean.isLevelMVarAssignable","line":434,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.isLevelMVarAssignable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.isLevelMVarAssignable\"><span class=\"name\">Lean</span>.<span class=\"name\">isLevelMVarAssignable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L422-L432","name":"Lean.MVarId.isAssignedOrDelayedAssigned","line":422,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.isAssignedOrDelayedAssigned","doc":"Check whether a metavariable is assigned or delayed-assigned. A\ndelayed-assigned metavariable is already 'solved' but the solution cannot be\nsubstituted yet because we have to wait for some other metavariables to be\nassigned first. So in many situations you want to treat a delayed-assigned\nmetavariable as assigned.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MVarId.isAssignedOrDelayedAssigned\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">isAssignedOrDelayedAssigned</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L419-L420","name":"Lean.MVarId.isDelayedAssigned","line":419,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.isDelayedAssigned","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MVarId.isDelayedAssigned\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">isDelayedAssigned</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L415-L417","name":"Lean.MVarId.isAssigned","line":415,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.isAssigned","doc":"Return `true` if the give metavariable is already assigned. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MVarId.isAssigned\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">isAssigned</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L412-L413","name":"Lean.isLevelMVarAssigned","line":412,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.isLevelMVarAssigned","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.isLevelMVarAssigned\"><span class=\"name\">Lean</span>.<span class=\"name\">isLevelMVarAssigned</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L399-L410","name":"Lean.getDelayedMVarRoot","line":399,"kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.getDelayedMVarRoot","doc":"Given a sequence of delayed assignments\n```\nmvarId₁ := mvarId₂ ...;\n...\nmvarIdₙ := mvarId_root ...  -- where `mvarId_root` is not delayed assigned\n```\nin `mctx`, `getDelayedRoot mctx mvarId₁` return `mvarId_root`.\nIf `mvarId₁` is not delayed assigned then return `mvarId₁` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.getDelayedMVarRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">getDelayedMVarRoot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L396-L397","name":"Lean.getDelayedMVarAssignment?","line":396,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.getDelayedMVarAssignment?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.getDelayedMVarAssignment?\"><span class=\"name\">Lean</span>.<span class=\"name\">getDelayedMVarAssignment?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">DelayedMetavarAssignment</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L392-L394","name":"Lean.MetavarContext.getDelayedMVarAssignmentExp","line":392,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getDelayedMVarAssignmentExp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.getDelayedMVarAssignmentExp\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">getDelayedMVarAssignmentExp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">DelayedMetavarAssignment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L389-L390","name":"Lean.MetavarContext.getDelayedMVarAssignmentCore?","line":389,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getDelayedMVarAssignmentCore?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.getDelayedMVarAssignmentCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">getDelayedMVarAssignmentCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">DelayedMetavarAssignment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L386-L387","name":"Lean.getExprMVarAssignment?","line":386,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.getExprMVarAssignment?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.getExprMVarAssignment?\"><span class=\"name\">Lean</span>.<span class=\"name\">getExprMVarAssignment?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L382-L384","name":"Lean.MetavarContext.getExprAssignmentExp","line":382,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getExprAssignmentExp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.getExprAssignmentExp\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">getExprAssignmentExp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L379-L380","name":"Lean.MetavarContext.getExprAssignmentCore?","line":379,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getExprAssignmentCore?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.getExprAssignmentCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">getExprAssignmentCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L375-L377","name":"Lean.getLevelMVarAssignmentExp","line":375,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.getLevelMVarAssignmentExp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.getLevelMVarAssignmentExp\"><span class=\"name\">Lean</span>.<span class=\"name\">getLevelMVarAssignmentExp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L372-L373","name":"Lean.getLevelMVarAssignment?","line":372,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.getLevelMVarAssignment?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.getLevelMVarAssignment?\"><span class=\"name\">Lean</span>.<span class=\"name\">getLevelMVarAssignment?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L369-L370","name":"Lean.setMCtx","line":369,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.setMCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.setMCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">setMCtx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L364-L367","name":"Lean.instMonadMCtxOfMonadLift","line":364,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instMonadMCtxOfMonadLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instMonadMCtxOfMonadLift\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadMCtxOfMonadLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L358-L360","name":"Lean.instMonadMCtxStateMMetavarContext","line":358,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instMonadMCtxStateMMetavarContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instMonadMCtxStateMMetavarContext\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadMCtxStateMMetavarContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateM\">StateM</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L356-L356","name":"Lean.MonadMCtx.modifyMCtx","line":356,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MonadMCtx.modifyMCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MonadMCtx.modifyMCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadMCtx</span>.<span class=\"name\">modifyMCtx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a> → <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L355-L355","name":"Lean.MonadMCtx.getMCtx","line":355,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MonadMCtx.getMCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MonadMCtx.getMCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadMCtx</span>.<span class=\"name\">getMCtx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L354-L354","name":"Lean.MonadMCtx.mk","line":354,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MonadMCtx.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MonadMCtx.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadMCtx</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getMCtx</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifyMCtx</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a> → <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L353-L356","name":"Lean.MonadMCtx","line":353,"kind":"class","docLink":"./Lean/MetavarContext.html#Lean.MonadMCtx","doc":"A monad with a stateful metavariable context, defining `getMCtx` and `modifyMCtx`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadMCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L351-L351","name":"Lean.instInhabitedMetavarContext","line":351,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instInhabitedMetavarContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instInhabitedMetavarContext\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMetavarContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L349-L349","name":"Lean.MetavarContext.dAssignment","line":349,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.dAssignment","doc":"Assignment table for delayed abstraction metavariables.\nFor more information about delayed abstraction, see the docstring for `DelayedMetavarAssignment`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.dAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">dAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">DelayedMetavarAssignment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L346-L346","name":"Lean.MetavarContext.eAssignment","line":346,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.eAssignment","doc":"Assignment table for expression metavariables."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.eAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">eAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L344-L344","name":"Lean.MetavarContext.lAssignment","line":344,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.lAssignment","doc":"Assignment table for universe level metavariables."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.lAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">lAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L342-L342","name":"Lean.MetavarContext.userNames","line":342,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.userNames","doc":"Index mapping user-friendly names to ids. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.userNames\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">userNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L340-L340","name":"Lean.MetavarContext.decls","line":340,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.decls","doc":"Metavariable declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L338-L338","name":"Lean.MetavarContext.lDepth","line":338,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.lDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.lDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">lDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L337-L337","name":"Lean.MetavarContext.mvarCounter","line":337,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mvarCounter","doc":"Counter for setting the field `index` at `MetavarDecl` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.mvarCounter\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">mvarCounter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L335-L335","name":"Lean.MetavarContext.levelAssignDepth","line":335,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.levelAssignDepth","doc":"At what depth level mvars can be assigned. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.levelAssignDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">levelAssignDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L333-L333","name":"Lean.MetavarContext.depth","line":333,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.depth","doc":"Depth is used to control whether an mvar can be assigned in unification. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.depth\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">depth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L331-L331","name":"Lean.MetavarContext.mk","line":331,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth </span><span class=\"fn\">levelAssignDepth </span><span class=\"fn\">mvarCounter</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lDepth</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userNames</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lAssignment</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eAssignment</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dAssignment</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">DelayedMetavarAssignment</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L327-L349","name":"Lean.MetavarContext","line":327,"kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext","doc":"The metavariable context is a set of metavariable declarations and their assignments.\n\nFor more information on specifics see the comment in the file that `MetavarContext` is defined in.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L325-L325","name":"Lean.DelayedMetavarAssignment.mvarIdPending","line":325,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment.mvarIdPending","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment.mvarIdPending\"><span class=\"name\">Lean</span>.<span class=\"name\">DelayedMetavarAssignment</span>.<span class=\"name\">mvarIdPending</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">DelayedMetavarAssignment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L324-L324","name":"Lean.DelayedMetavarAssignment.fvars","line":324,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment.fvars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment.fvars\"><span class=\"name\">Lean</span>.<span class=\"name\">DelayedMetavarAssignment</span>.<span class=\"name\">fvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">DelayedMetavarAssignment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L323-L323","name":"Lean.DelayedMetavarAssignment.mk","line":323,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">DelayedMetavarAssignment</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarIdPending</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">DelayedMetavarAssignment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L309-L325","name":"Lean.DelayedMetavarAssignment","line":309,"kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment","doc":"A delayed assignment for a metavariable `?m`. It represents an assignment of the form `?m := (fun fvars => (mkMVar mvarIdPending))`.\n`mvarIdPending` is a `syntheticOpaque` metavariable that has not been synthesized yet. The delayed assignment becomes a real one\nas soon as `mvarIdPending` has been fully synthesized.\n`fvars` are variables in the `mvarIdPending` local context.\n\nSee the comment below `assignDelayedMVar ` for the rationale of delayed assignments.\n\nRecall that we use a locally nameless approach when dealing with binders. Suppose we are\ntrying to synthesize `?n` in the expression `e`, in the context of `(fun x => e)`.\nThe metavariable `?n` might depend on the bound variable `x`. However, since we are locally nameless,\nthe bound variable `x` is in fact represented by some free variable `fvar_x`. Thus, when we exit\nthe scope, we must rebind the value of `fvar_x` in `?n` to the de-bruijn index of the bound variable `x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">DelayedMetavarAssignment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L307-L307","name":"Lean.instInhabitedMetavarDecl","line":307,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instInhabitedMetavarDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instInhabitedMetavarDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMetavarDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L306-L306","name":"Lean.MetavarDecl.index","line":306,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.index","doc":"We use this field to track how old a metavariable is. It is set using a counter at `MetavarContext` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarDecl.index\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarDecl</span>.<span class=\"name\">index</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L304-L304","name":"Lean.MetavarDecl.numScopeArgs","line":304,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.numScopeArgs","doc":"See comment at `CheckAssignment` `Meta/ExprDefEq.lean` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarDecl.numScopeArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarDecl</span>.<span class=\"name\">numScopeArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L302-L302","name":"Lean.MetavarDecl.kind","line":302,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarDecl.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarDecl</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L301-L301","name":"Lean.MetavarDecl.localInstances","line":301,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.localInstances","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarDecl.localInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarDecl</span>.<span class=\"name\">localInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L300-L300","name":"Lean.MetavarDecl.depth","line":300,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.depth","doc":"The nesting depth of this metavariable. We do not want\nunification subproblems to influence the results of parent\nproblems. The depth keeps track of this information and ensures\nthat unification subproblems cannot leak information out, by unifying\nbased on depth.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarDecl.depth\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarDecl</span>.<span class=\"name\">depth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L292-L292","name":"Lean.MetavarDecl.type","line":292,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.type","doc":"The type of the metavariable, in the given `lctx`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarDecl.type\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarDecl</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L290-L290","name":"Lean.MetavarDecl.lctx","line":290,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.lctx","doc":"The local context containing the free variables that the mvar is permitted to depend upon. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarDecl.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarDecl</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L288-L288","name":"Lean.MetavarDecl.userName","line":288,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.userName","doc":"A user-friendly name for the metavariable. If anonymous then there is no such name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarDecl.userName\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarDecl</span>.<span class=\"name\">userName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L286-L286","name":"Lean.MetavarDecl.mk","line":286,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarDecl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarDecl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numScopeArgs </span><span class=\"fn\">index</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L285-L307","name":"Lean.MetavarDecl","line":285,"kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl","doc":"Information about a metavariable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L281-L283","name":"Lean.MetavarKind.isNatural","line":281,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.isNatural","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarKind.isNatural\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarKind</span>.<span class=\"name\">isNatural</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L277-L279","name":"Lean.MetavarKind.isSyntheticOpaque","line":277,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.isSyntheticOpaque","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarKind.isSyntheticOpaque\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarKind</span>.<span class=\"name\">isSyntheticOpaque</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L275-L275","name":"Lean.instReprMetavarKind","line":275,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instReprMetavarKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instReprMetavarKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprMetavarKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L275-L275","name":"Lean.instInhabitedMetavarKind","line":275,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instInhabitedMetavarKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instInhabitedMetavarKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMetavarKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L273-L274","name":"Lean.MetavarKind.syntheticOpaque","line":273,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.syntheticOpaque","doc":"Never assigned by isDefEq "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarKind.syntheticOpaque\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarKind</span>.<span class=\"name\">syntheticOpaque</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L271-L272","name":"Lean.MetavarKind.synthetic","line":271,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.synthetic","doc":"`isDefEq` avoids assignment "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarKind.synthetic\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarKind</span>.<span class=\"name\">synthetic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L269-L270","name":"Lean.MetavarKind.natural","line":269,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.natural","doc":"Normal unification behaviour "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarKind.natural\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarKind</span>.<span class=\"name\">natural</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">MetavarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L266-L275","name":"Lean.MetavarKind","line":266,"kind":"inductive","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind","doc":"A kind for the metavariable that determines its unification behaviour.\nFor more information see the large comment at the beginning of this file. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.MetavarKind\"><span class=\"name\">Lean</span>.<span class=\"name\">MetavarKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L262-L264","name":"Lean.LocalInstances.erase","line":262,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.LocalInstances.erase","doc":"Remove local instance with the given `fvarId`. Do nothing if `localInsts` does not contain any free variable with id `fvarId`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.LocalInstances.erase\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalInstances</span>.<span class=\"name\">erase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInsts</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L259-L260","name":"Lean.instHashableLocalInstance","line":259,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instHashableLocalInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instHashableLocalInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">instHashableLocalInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstance\">LocalInstance</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L256-L257","name":"Lean.instBEqLocalInstance","line":256,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instBEqLocalInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instBEqLocalInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqLocalInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstance\">LocalInstance</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L254-L254","name":"Lean.LocalInstances","line":254,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.LocalInstances","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.LocalInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalInstances</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L252-L252","name":"Lean.instInhabitedLocalInstance","line":252,"kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instInhabitedLocalInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.instInhabitedLocalInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedLocalInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstance\">LocalInstance</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L251-L251","name":"Lean.LocalInstance.fvar","line":251,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.LocalInstance.fvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.LocalInstance.fvar\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalInstance</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstance\">LocalInstance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L250-L250","name":"Lean.LocalInstance.className","line":250,"kind":"def","docLink":"./Lean/MetavarContext.html#Lean.LocalInstance.className","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.LocalInstance.className\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalInstance</span>.<span class=\"name\">className</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstance\">LocalInstance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L249-L249","name":"Lean.LocalInstance.mk","line":249,"kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.LocalInstance.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.LocalInstance.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalInstance</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">className</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstance\">LocalInstance</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/MetavarContext.lean#L243-L252","name":"Lean.LocalInstance","line":243,"kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.LocalInstance","doc":"`LocalInstance` represents a local typeclass instance registered by and for\nthe elaborator. It stores the name of the typeclass in `className`, and the\nconcrete typeclass instance in `fvar`. Note that the kernel does not care about\nthis information, since typeclasses are entirely eliminated during elaboration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/MetavarContext.html#Lean.LocalInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}