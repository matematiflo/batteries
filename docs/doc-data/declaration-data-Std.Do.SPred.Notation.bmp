{"name":"Std.Do.SPred.Notation","instances":[],"imports":["Std.Do.SPred.SPred"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/Notation.lean#L63-L64","name":"Std.Do.«term_⊣⊢ₛ_»","line":63,"kind":"def","docLink":"./Std/Do/SPred/Notation.html#Std.Do.«term_⊣⊢ₛ_»","doc":"Bi-entailment in `SPred`; sugar for `SPred.bientails`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Notation.html#Std.Do.«term_⊣⊢ₛ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_⊣⊢ₛ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/Notation.lean#L61-L62","name":"Std.Do.«term⊢ₛ_»","line":61,"kind":"def","docLink":"./Std/Do/SPred/Notation.html#Std.Do.«term⊢ₛ_»","doc":"Tautology in `SPred`; sugar for `SPred.entails ⌜True⌝`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Notation.html#Std.Do.«term⊢ₛ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term⊢ₛ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/Notation.lean#L59-L60","name":"Std.Do.«term_⊢ₛ_»","line":59,"kind":"def","docLink":"./Std/Do/SPred/Notation.html#Std.Do.«term_⊢ₛ_»","doc":"Entailment in `SPred`; sugar for `SPred.entails`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Notation.html#Std.Do.«term_⊢ₛ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_⊢ₛ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/Notation.lean#L52-L55","name":"Std.Do.«term#_»","line":52,"kind":"def","docLink":"./Std/Do/SPred/Notation.html#Std.Do.«term#_»","doc":"Use getter `t : SVal σs σ` in `SVal` idiom notation; sugar for `SVal.uncurry t (by assumption)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Notation.html#Std.Do.«term#_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term#_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/Notation.lean#L50-L51","name":"Std.Do.«term‹_›ₛ»","line":50,"kind":"def","docLink":"./Std/Do/SPred/Notation.html#Std.Do.«term‹_›ₛ»","doc":"‹t› in `SVal` idiom notation. Accesses the state of type `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Notation.html#Std.Do.«term‹_›ₛ»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term‹_›ₛ»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/Notation.lean#L48-L49","name":"Std.Do.«term⌜_⌝»","line":48,"kind":"def","docLink":"./Std/Do/SPred/Notation.html#Std.Do.«term⌜_⌝»","doc":"Embedding of pure Lean values into `SVal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Notation.html#Std.Do.«term⌜_⌝»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term⌜_⌝»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/Notation.lean#L31-L44","name":"Std.Do.SPred.Notation.unpack","line":31,"kind":"opaque","docLink":"./Std/Do/SPred/Notation.html#Std.Do.SPred.Notation.unpack","doc":"Remove an `spred` layer from a `term` syntax object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Notation.html#Std.Do.SPred.Notation.unpack\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Notation</span>.<span class=\"name\">unpack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/Notation.lean#L17-L17","name":"Std.Do.«termTerm(_)»","line":17,"kind":"def","docLink":"./Std/Do/SPred/Notation.html#Std.Do.«termTerm(_)»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Notation.html#Std.Do.«termTerm(_)»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«termTerm(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/SPred/Notation.lean#L16-L16","name":"Std.Do.«termSpred(_)»","line":16,"kind":"def","docLink":"./Std/Do/SPred/Notation.html#Std.Do.«termSpred(_)»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Notation.html#Std.Do.«termSpred(_)»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«termSpred(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}