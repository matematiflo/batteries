{"name":"Lean.Meta.Tactic.Grind.Arith.Linear.IneqCnstr","instances":[],"imports":["Init.Grind.Ring.Poly","Lean.Meta.Tactic.Grind.Arith.CommRing.Reify","Lean.Meta.Tactic.Grind.Arith.CommRing.DenoteExpr","Lean.Meta.Tactic.Grind.Arith.Linear.Var","Lean.Meta.Tactic.Grind.Arith.Linear.StructId","Lean.Meta.Tactic.Grind.Arith.Linear.Reify","Lean.Meta.Tactic.Grind.Arith.Linear.DenoteExpr","Lean.Meta.Tactic.Grind.Arith.Linear.Proof"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.lean#L88-L109","name":"Lean.Meta.Grind.Arith.Linear.propagateIneq","line":88,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.propagateIneq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.propagateIneq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">propagateIneq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eqTrue</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.lean#L72-L86","name":"Lean.Meta.Grind.Arith.Linear.propagateIntModuleIneq","line":72,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.propagateIntModuleIneq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.propagateIntModuleIneq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">propagateIntModuleIneq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">strict </span><span class=\"fn\">eqTrue</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.lean#L49-L70","name":"Lean.Meta.Grind.Arith.Linear.propagateCommRingIneq","line":49,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.propagateCommRingIneq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.propagateCommRingIneq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">propagateCommRingIneq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">strict </span><span class=\"fn\">eqTrue</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.lean#L30-L47","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstr.assert","line":30,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.assert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.assert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstr</span>.<span class=\"name\">assert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.lean#L24-L28","name":"Lean.Meta.Grind.Arith.Linear.isLtInst","line":24,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.isLtInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.isLtInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isLtInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.lean#L18-L22","name":"Lean.Meta.Grind.Arith.Linear.isLeInst","line":18,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.isLeInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.isLeInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isLeInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"}]}