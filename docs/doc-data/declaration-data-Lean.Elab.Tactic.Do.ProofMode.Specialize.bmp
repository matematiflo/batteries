{"name":"Lean.Elab.Tactic.Do.ProofMode.Specialize","instances":[],"imports":["Std.Tactic.Do.Syntax","Lean.Elab.Tactic.Do.ProofMode.MGoal","Lean.Elab.Tactic.Do.ProofMode.Focus","Lean.Elab.Tactic.Do.ProofMode.Basic","Lean.Elab.Tactic.Do.ProofMode.Pure"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Specialize.lean#L126-L176","name":"Lean.Elab.Tactic.Do.ProofMode.elabMspecializePure","line":126,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Specialize.html#Lean.Elab.Tactic.Do.ProofMode.elabMspecializePure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Specialize.html#Lean.Elab.Tactic.Do.ProofMode.elabMspecializePure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">elabMspecializePure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Specialize.lean#L83-L124","name":"Lean.Elab.Tactic.Do.ProofMode.elabMSpecialize","line":83,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Specialize.html#Lean.Elab.Tactic.Do.ProofMode.elabMSpecialize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Specialize.html#Lean.Elab.Tactic.Do.ProofMode.elabMSpecialize\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">elabMSpecialize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Specialize.lean#L69-L81","name":"Lean.Elab.Tactic.Do.ProofMode.mSpecializeForall","line":69,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Specialize.html#Lean.Elab.Tactic.Do.ProofMode.mSpecializeForall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Specialize.html#Lean.Elab.Tactic.Do.ProofMode.mSpecializeForall\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">mSpecializeForall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_σs </span><span class=\"fn\">P </span><span class=\"fn\">Ψ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`term</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Specialize.lean#L41-L67","name":"Lean.Elab.Tactic.Do.ProofMode.mSpecializeImpPure","line":41,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Specialize.html#Lean.Elab.Tactic.Do.ProofMode.mSpecializeImpPure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Specialize.html#Lean.Elab.Tactic.Do.ProofMode.mSpecializeImpPure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">mSpecializeImpPure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_σs </span><span class=\"fn\">P </span><span class=\"fn\">QR</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`term</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/ProofMode/Specialize.lean#L19-L39","name":"Lean.Elab.Tactic.Do.ProofMode.mSpecializeImpStateful","line":19,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/ProofMode/Specialize.html#Lean.Elab.Tactic.Do.ProofMode.mSpecializeImpStateful","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/ProofMode/Specialize.html#Lean.Elab.Tactic.Do.ProofMode.mSpecializeImpStateful\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">mSpecializeImpStateful</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs </span><span class=\"fn\">P </span><span class=\"fn\">QR</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`term</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"}]}