{"name":"Lean.Elab.Tactic.Simp","instances":[{"typeNames":["Lean.Elab.Tactic.SimpKind"],"name":"Lean.Elab.Tactic.instInhabitedSimpKind","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.SimpKind"],"name":"Lean.Elab.Tactic.instBEqSimpKind","className":"BEq"},{"typeNames":["Lean.Elab.Tactic.UnusedSimpArgsInfo"],"name":"Lean.Elab.Tactic.instTypeNameUnusedSimpArgsInfo","className":"TypeName"}],"imports":["Lean.Meta.Tactic.Simp","Lean.Meta.Tactic.Simp.LoopProtection","Lean.Meta.Tactic.Replace","Lean.Meta.Hint","Lean.Elab.BuiltinNotation","Lean.Elab.Tactic.Basic","Lean.Elab.Tactic.ElabTerm","Lean.Elab.Tactic.Location","Lean.Elab.Tactic.Config"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L721-L724","name":"Lean.Parser.Tactic.getDSimpArgs?","line":721,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Parser.Tactic.getDSimpArgs?","doc":"Extract the arguments from a `dsimpArgs` syntax as an array of syntaxes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Parser.Tactic.getDSimpArgs?\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getDSimpArgs?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L716-L719","name":"Lean.Parser.Tactic.getSimpArgs?","line":716,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Parser.Tactic.getSimpArgs?","doc":"Extract the arguments from a `simpArgs` syntax as an array of syntaxes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Parser.Tactic.getSimpArgs?\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getSimpArgs?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L703-L705","name":"Lean.Elab.Tactic.evalDSimp","line":703,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalDSimp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalDSimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalDSimp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L693-L701","name":"Lean.Elab.Tactic.dsimpLocation.go","line":693,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpLocation</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarIdsToSimp</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simplifyTarget</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L683-L701","name":"Lean.Elab.Tactic.dsimpLocation","line":683,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpLocation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loc</span> : <a href=\"./Lean/Elab/Tactic/Location.html#Lean.Elab.Tactic.Location\">Location</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L668-L681","name":"Lean.Elab.Tactic.evalSimpAll","line":668,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimpAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimpAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalSimpAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L656-L666","name":"Lean.Elab.Tactic.evalSimp","line":656,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalSimp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L648-L650","name":"Lean.Elab.Tactic.withSimpDiagnostics","line":648,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.withSimpDiagnostics","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.withSimpDiagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">withSimpDiagnostics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Meta.Simp.Diagnostics</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L640-L646","name":"Lean.Elab.Tactic.simpLocation.go","line":640,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpLocation</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discharge?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Meta.Simp.Discharge</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarIdsToSimp</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simplifyTarget</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Meta.Simp.Stats</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L616-L646","name":"Lean.Elab.Tactic.simpLocation","line":616,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation","doc":"`simpLocation ctx discharge? varIdToLemmaId loc`\nruns the simplifier at locations specified by `loc`,\nusing the simp theorems collected in `ctx`\noptionally running a discharger specified in `discharge?` on generated subgoals.\n\nIts primary use is as the implementation of the\n`simp [...] at ...` and `simp only [...] at ...` syntaxes,\nbut can also be used by other tactics when a `Syntax` is not available.\n\nFor many tactics other than the simplifier,\none should use the `withLocation` tactic combinator\nwhen working with a `location`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpLocation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discharge?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Meta.Simp.Discharge</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loc</span> : <a href=\"./Lean/Elab/Tactic/Location.html#Lean.Elab.Tactic.Location\">Location</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Meta.Simp.Stats</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L608-L613","name":"Lean.Elab.Tactic.warnUnusedSimpArgs.usedThmIdOfSimpTheorem","line":608,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.warnUnusedSimpArgs.usedThmIdOfSimpTheorem","doc":"For equational theorems, usedTheorems record the declaration name. So if the user\nspecified `foo.eq_1`, we get `foo` in `usedTheores`, but we still want to mark\n`foo.eq_1` as used.\n(cf. `recordSimpTheorem`)\nThis may lead to unused, explicitly given `foo.eq_1` to not be warned about. Ok for now,\neventually `recordSimpTheorem` could record the actual theorem, and the logic for\ntreating `foo.eq_1` as `foo` be moved to `SimpTrace.lean`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.warnUnusedSimpArgs.usedThmIdOfSimpTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">warnUnusedSimpArgs</span>.<span class=\"name\">usedThmIdOfSimpTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thm</span> : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Meta.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L568-L613","name":"Lean.Elab.Tactic.warnUnusedSimpArgs","line":568,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.warnUnusedSimpArgs","doc":"Checks the simp arguments for unused ones, and stores a bitmask of unused ones in the info tree,\nto be picked up by the linter.\n(This indirection is necessary because the same `simp` syntax may be executed multiple times,\nand different simp arguments may be used in each step.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.warnUnusedSimpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">warnUnusedSimpArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedSimps</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L563-L566","name":"Lean.Elab.Tactic.pushUnusedSimpArgsInfo","line":563,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.pushUnusedSimpArgsInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.pushUnusedSimpArgsInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">pushUnusedSimpArgsInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mask</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L561-L561","name":"Lean.Elab.Tactic.instTypeNameUnusedSimpArgsInfo","line":561,"kind":"instance","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instTypeNameUnusedSimpArgsInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instTypeNameUnusedSimpArgsInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instTypeNameUnusedSimpArgsInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo\">UnusedSimpArgsInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L560-L560","name":"Lean.Elab.Tactic.UnusedSimpArgsInfo.mask","line":560,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo.mask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo.mask\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">UnusedSimpArgsInfo</span>.<span class=\"name\">mask</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo\">UnusedSimpArgsInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L559-L559","name":"Lean.Elab.Tactic.UnusedSimpArgsInfo.mk","line":559,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">UnusedSimpArgsInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mask</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo\">UnusedSimpArgsInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L559-L561","name":"Lean.Elab.Tactic.UnusedSimpArgsInfo","line":559,"kind":"structure","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">UnusedSimpArgsInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L544-L557","name":"Lean.Elab.Tactic.linter.unusedSimpArgs","line":544,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.linter.unusedSimpArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.linter.unusedSimpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">linter</span>.<span class=\"name\">unusedSimpArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L540-L541","name":"Lean.Elab.Tactic.traceSimpCall","line":540,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.traceSimpCall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.traceSimpCall\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">traceSimpCall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedSimps</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L481-L538","name":"Lean.Elab.Tactic.mkSimpOnly","line":481,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpOnly","doc":"If `stx` is the syntax of a `simp`, `simp_all` or `dsimp` tactic invocation, and\n`usedSimps` is the set of simp lemmas used by this invocation, then `mkSimpOnly`\ncreates the syntax of an equivalent `simp only`, `simp_all only` or `dsimp only`\ninvocation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkSimpOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedSimps</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L476-L479","name":"Lean.Elab.Tactic.tactic.simp.trace","line":476,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tactic.simp.trace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tactic.simp.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tactic</span>.<span class=\"name\">simp</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L469-L474","name":"Lean.Elab.Tactic.withLoopChecking.go","line":469,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.withLoopChecking.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.withLoopChecking.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">withLoopChecking</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">force</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L451-L474","name":"Lean.Elab.Tactic.withLoopChecking","line":451,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.withLoopChecking","doc":"Runs the given action.\nIf it throws a maxRecDepth exception (nested or not), run the loop checking.\nIf it does not throw, run the loop checking only if explicitly enabled.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.withLoopChecking\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">withLoopChecking</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">MonadRuntimeException</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L417-L449","name":"Lean.Elab.Tactic.mkSimpContext","line":417,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpContext","doc":"Create the `Simp.Context` for the `simp`, `dsimp`, and `simp_all` tactics.\nIf `kind != SimpKind.simp`, the `discharge` option must be `none`\n\nTODO: generate error message if non `rfl` theorems are provided as arguments to `dsimp`.\n\nThe argument `simpTheorems` defaults to `getSimpTheorems`,\nbut allows overriding with an arbitrary mechanism to choose\nthe simp theorems besides those specified in the syntax.\nNote that if the syntax includes `simp only`, the `simpTheorems` argument is ignored.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkSimpContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eraseLocal</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a> := <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simp\">SimpKind.simp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ignoreStarArg</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpTheorems</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Meta.SimpTheorems</a></span> := <a href=\"./Lean/Meta/Tactic/Simp/Attr.html#Lean.Meta.getSimpTheorems\">Meta.getSimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L415-L415","name":"Lean.Elab.Tactic.MkSimpContextResult.simpArgs","line":415,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.simpArgs","doc":"The elaborated simp arguments with syntax "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.simpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">simpArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L413-L413","name":"Lean.Elab.Tactic.MkSimpContextResult.dischargeWrapper","line":413,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.dischargeWrapper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.dischargeWrapper\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">dischargeWrapper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">Simp.DischargeWrapper</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L412-L412","name":"Lean.Elab.Tactic.MkSimpContextResult.simprocs","line":412,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.simprocs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.simprocs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">simprocs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L411-L411","name":"Lean.Elab.Tactic.MkSimpContextResult.ctx","line":411,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.ctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.ctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L410-L410","name":"Lean.Elab.Tactic.MkSimpContextResult.mk","line":410,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dischargeWrapper</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">Simp.DischargeWrapper</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L410-L415","name":"Lean.Elab.Tactic.MkSimpContextResult","line":410,"kind":"structure","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L408-L408","name":"Lean.Elab.Tactic.simpOnlyBuiltins","line":408,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpOnlyBuiltins","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpOnlyBuiltins\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpOnlyBuiltins</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L401-L406","name":"Lean.Elab.Tactic.setSimpParams","line":401,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.setSimpParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.setSimpParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">setSimpParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L398-L399","name":"Lean.Elab.Tactic.getSimpParams","line":398,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.getSimpParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.getSimpParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getSimpParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L395-L396","name":"Lean.Elab.Tactic.isSimpOnly","line":395,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.isSimpOnly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.isSimpOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">isSimpOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L392-L393","name":"Lean.Elab.Tactic.simpOnlyPos","line":392,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpOnlyPos","doc":"Position for the `only` child syntax in the `simp` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpOnlyPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpOnlyPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L389-L390","name":"Lean.Elab.Tactic.simpParamsPos","line":389,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpParamsPos","doc":"Position for the `[..]` child syntax in the `simp` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpParamsPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpParamsPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L376-L387","name":"Lean.Elab.Tactic.elabSimpArgs.toZetaDeltaSet","line":376,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs.toZetaDeltaSet","doc":"If `zetaDelta := false`, create a `FVarId` set with all local let declarations in the `simp` argument list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs.toZetaDeltaSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpArgs</span>.<span class=\"name\">toZetaDeltaSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L300-L387","name":"Lean.Elab.Tactic.elabSimpArgs","line":300,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs","doc":"Elaborate extra simp theorems provided to `simp`. `stx` is of the form `\"[\" simpTheorem,* \"]\"`\nIf `eraseLocal == true`, then we consider local declarations when resolving names for erased theorems (`- id`),\nthis option only makes sense for `simp_all` or `*` is used.\nWhen `recover := true`, try to recover from errors as much as possible so that users keep seeing\nthe current goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eraseLocal</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ignoreStarArg</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">ElabSimpArgsResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L285-L285","name":"Lean.Elab.Tactic.ElabSimpArgsResult.simpArgs","line":285,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.simpArgs","doc":"The elaborated simp arguments with syntax "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.simpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">simpArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">ElabSimpArgsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L283-L283","name":"Lean.Elab.Tactic.ElabSimpArgsResult.simprocs","line":283,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.simprocs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.simprocs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">simprocs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">ElabSimpArgsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L282-L282","name":"Lean.Elab.Tactic.ElabSimpArgsResult.ctx","line":282,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.ctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.ctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">ElabSimpArgsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L281-L281","name":"Lean.Elab.Tactic.ElabSimpArgsResult.mk","line":281,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">ElabSimpArgsResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L278-L285","name":"Lean.Elab.Tactic.ElabSimpArgsResult","line":278,"kind":"structure","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult","doc":"The result of elaborating a full array of simp arguments and applying them to the simp context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L158-L165","name":"Lean.Elab.Tactic.ElabSimpArgResult.simpTheorems","line":158,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.simpTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.simpTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">simpTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Meta.SimpTheorem</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L156-L156","name":"Lean.Elab.Tactic.ElabSimpArgResult.none","line":156,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L155-L155","name":"Lean.Elab.Tactic.ElabSimpArgResult.star","line":155,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.star\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L154-L154","name":"Lean.Elab.Tactic.ElabSimpArgResult.eraseSimproc","line":154,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.eraseSimproc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.eraseSimproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">eraseSimproc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toErase</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L153-L153","name":"Lean.Elab.Tactic.ElabSimpArgResult.erase","line":153,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.erase\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">erase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toErase</span> : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Meta.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L152-L152","name":"Lean.Elab.Tactic.ElabSimpArgResult.ext","line":152,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext₁?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Meta.SimpExtension</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext₂?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocExtension\">Meta.Simp.SimprocExtension</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\">ext₁?</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">ext₂?</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L151-L151","name":"Lean.Elab.Tactic.ElabSimpArgResult.addLetToUnfold","line":151,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addLetToUnfold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addLetToUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">addLetToUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L150-L150","name":"Lean.Elab.Tactic.ElabSimpArgResult.addSimproc","line":150,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addSimproc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addSimproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">addSimproc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«simproc»</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">post</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L149-L149","name":"Lean.Elab.Tactic.ElabSimpArgResult.addEntries","line":149,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addEntries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addEntries\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">addEntries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entries</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Meta.SimpEntry</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L145-L156","name":"Lean.Elab.Tactic.ElabSimpArgResult","line":145,"kind":"inductive","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult","doc":"The result of elaborating a single `simp` argument\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L100-L107","name":"Lean.Elab.Tactic.ResolveSimpIdResult.ext","line":100,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.ext","doc":"Recall that when we declare a `simp` attribute using `register_simp_attr`, we automatically\ncreate a `simproc` attribute. However, if the user creates `simp` and `simproc` attributes\nprogrammatically, then one of them may be missing. Moreover, when we write `simp [seval]`,\nwe want to retrieve both the simp and simproc sets. We want to hide from users that\n`simp` and `simproc` sets are stored in different data-structures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext₁?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Meta.SimpExtension</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext₂?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocExtension\">Meta.Simp.SimprocExtension</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\">ext₁?</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">ext₂?</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">ResolveSimpIdResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L99-L99","name":"Lean.Elab.Tactic.ResolveSimpIdResult.simproc","line":99,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.simproc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.simproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">simproc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">ResolveSimpIdResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L98-L98","name":"Lean.Elab.Tactic.ResolveSimpIdResult.expr","line":98,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">ResolveSimpIdResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L97-L97","name":"Lean.Elab.Tactic.ResolveSimpIdResult.none","line":97,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">ResolveSimpIdResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L96-L107","name":"Lean.Elab.Tactic.ResolveSimpIdResult","line":96,"kind":"inductive","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L90-L94","name":"Lean.Elab.Tactic.elabSimpConfig","line":90,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optConfig</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Meta.Simp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L69-L77","name":"Lean.Elab.Tactic.Simp.DischargeWrapper.with","line":69,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.with","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.with\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span>.<span class=\"name\">with</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">DischargeWrapper</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Meta.Simp.Discharge</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L67-L67","name":"Lean.Elab.Tactic.Simp.DischargeWrapper.custom","line":67,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.custom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.custom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span>.<span class=\"name\">custom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">Term.State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discharge</span> : <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Meta.Simp.Discharge</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">DischargeWrapper</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L66-L66","name":"Lean.Elab.Tactic.Simp.DischargeWrapper.default","line":66,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">DischargeWrapper</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L65-L67","name":"Lean.Elab.Tactic.Simp.DischargeWrapper","line":65,"kind":"inductive","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L31-L63","name":"Lean.Elab.Tactic.tacticToDischarge","line":31,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tacticToDischarge","doc":"Implement a `simp` discharge function using the given tactic syntax code.\nRecall that `simp` dischargers are in `SimpM` which does not have access to `Term.State`.\nWe need access to `Term.State` to store messages and update the info tree.\nThus, we create an `IO.ref` to track these changes at `Term.State` when we execute `tacticCode`.\nWe must set this reference with the current `Term.State` before we execute `simp` using the\ngenerated `Simp.Discharge`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tacticToDischarge\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticToDischarge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticCode</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> (<span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">Term.State</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Meta.Simp.Discharge</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L29-L29","name":"Lean.Elab.Tactic.instBEqSimpKind","line":29,"kind":"instance","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instBEqSimpKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instBEqSimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instBEqSimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L29-L29","name":"Lean.Elab.Tactic.instInhabitedSimpKind","line":29,"kind":"instance","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instInhabitedSimpKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instInhabitedSimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instInhabitedSimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L28-L28","name":"Lean.Elab.Tactic.SimpKind.dsimp","line":28,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.dsimp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.dsimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span>.<span class=\"name\">dsimp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L27-L27","name":"Lean.Elab.Tactic.SimpKind.simpAll","line":27,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simpAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simpAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span>.<span class=\"name\">simpAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L26-L26","name":"Lean.Elab.Tactic.SimpKind.simp","line":26,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span>.<span class=\"name\">simp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L25-L29","name":"Lean.Elab.Tactic.SimpKind","line":25,"kind":"inductive","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L23-L23","name":"Lean.Elab.Tactic.elabDSimpConfigCore","line":23,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabDSimpConfigCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabDSimpConfigCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabDSimpConfigCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Meta.DSimp.Config</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L22-L22","name":"Lean.Elab.Tactic.elabSimpConfigCtxCore","line":22,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCtxCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCtxCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpConfigCtxCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\">Meta.Simp.ConfigCtx</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Simp.lean#L21-L21","name":"Lean.Elab.Tactic.elabSimpConfigCore","line":21,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpConfigCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Meta.Simp.Config</a></span></span></div></div>"}]}