{"name":"Lean.Meta.Tactic.Grind.Arith.Simproc","instances":[],"imports":["Init.Grind.Ring.Basic","Init.Simproc","Lean.Meta.Tactic.Simp.Simproc"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Simproc.lean#L50-L51","name":"Lean.Meta.Grind.Arith.addSimproc","line":50,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Simproc.html#Lean.Meta.Grind.Arith.addSimproc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Simproc.html#Lean.Meta.Grind.Arith.addSimproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">addSimproc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs\">Simprocs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs\">Simprocs</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Simproc.lean#L19-L48","name":"Lean.Meta.Grind.Arith.expandPowAdd","line":19,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Simproc.html#Lean.Meta.Grind.Arith.expandPowAdd","doc":"Applies `a^(m+n) = a^m * a^n`, `a^0 = 1`, `a^1 = a`.\n\nWe do normalize `a^0` and `a^1` when converting expressions into polynomials,\nbut we need to normalize them here when for other preprocessing steps such as\n`a / b = a*b⁻¹`. If `b` is of the form `c^1`, it will be treated as an\natom in the comm ring module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Simproc.html#Lean.Meta.Grind.Arith.expandPowAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">expandPowAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Simp.Simproc</a></div></div>"}]}