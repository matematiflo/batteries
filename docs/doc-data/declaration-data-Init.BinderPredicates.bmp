{"name":"Init.BinderPredicates","instances":[],"imports":["Init.NotationExtra"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L82-L84","name":"Lean.«binderTerm⊃_»","line":82,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«binderTerm⊃_»","doc":"Declare `∀ x ⊃ y, ...` as syntax for `∀ x, x ⊃ y → ...` and `∃ x ⊃ y, ...` as syntax for\n`∃ x, x ⊃ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«binderTerm⊃_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«binderTerm⊃_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L78-L80","name":"Lean.«binderTerm⊇_»","line":78,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«binderTerm⊇_»","doc":"Declare `∀ x ⊇ y, ...` as syntax for `∀ x, x ⊇ y → ...` and `∃ x ⊇ y, ...` as syntax for\n`∃ x, x ⊇ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«binderTerm⊇_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«binderTerm⊇_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L74-L76","name":"Lean.«binderTerm⊂_»","line":74,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«binderTerm⊂_»","doc":"Declare `∀ x ⊂ y, ...` as syntax for `∀ x, x ⊂ y → ...` and `∃ x ⊂ y, ...` as syntax for\n`∃ x, x ⊂ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«binderTerm⊂_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«binderTerm⊂_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L70-L72","name":"Lean.«binderTerm⊆_»","line":70,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«binderTerm⊆_»","doc":"Declare `∀ x ⊆ y, ...` as syntax for `∀ x, x ⊆ y → ...` and `∃ x ⊆ y, ...` as syntax for\n`∃ x, x ⊆ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«binderTerm⊆_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«binderTerm⊆_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L66-L68","name":"Lean.«binderTerm∉_»","line":66,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«binderTerm∉_»","doc":"Declare `∀ x ∉ y, ...` as syntax for `∀ x, x ∉ y → ...` and `∃ x ∉ y, ...` as syntax for\n`∃ x, x ∉ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«binderTerm∉_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«binderTerm∉_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L62-L64","name":"Lean.«binderTerm∈_»","line":62,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«binderTerm∈_»","doc":"Declare `∀ x ∈ y, ...` as syntax for `∀ x, x ∈ y → ...` and `∃ x ∈ y, ...` as syntax for\n`∃ x, x ∈ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«binderTerm∈_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«binderTerm∈_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L59-L60","name":"Lean.«binderTerm≠_»","line":59,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«binderTerm≠_»","doc":"Declare `∃ x ≠ y, ...` as syntax for `∃ x, x ≠ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«binderTerm≠_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«binderTerm≠_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L57-L58","name":"Lean.«binderTerm≤_»","line":57,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«binderTerm≤_»","doc":"Declare `∃ x ≤ y, ...` as syntax for `∃ x, x ≤ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«binderTerm≤_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«binderTerm≤_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L55-L56","name":"Lean.«binderTerm<_»","line":55,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«binderTerm<_»","doc":"Declare `∃ x < y, ...` as syntax for `∃ x, x < y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«binderTerm&lt;_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«binderTerm&lt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L53-L54","name":"Lean.«binderTerm≥_»","line":53,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«binderTerm≥_»","doc":"Declare `∃ x ≥ y, ...` as syntax for `∃ x, x ≥ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«binderTerm≥_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«binderTerm≥_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L51-L52","name":"Lean.«binderTerm>_»","line":51,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«binderTerm>_»","doc":"Declare `∃ x > y, ...` as syntax for `∃ x, x > y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«binderTerm&gt;_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«binderTerm&gt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L33-L37","name":"Lean.«term∀__,_»","line":33,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«term∀__,_»","doc":"The notation `∀ x < 2, p x` is shorthand for `∀ x, x < 2 → p x`,\nand similarly for other binary operators.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«term∀__,_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«term∀__,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L28-L32","name":"Lean.«term∃__,_»","line":28,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«term∃__,_»","doc":"The notation `∃ x < 2, p x` is shorthand for `∃ x, x < 2 ∧ p x`,\nand similarly for other binary operators.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«term∃__,_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«term∃__,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L21-L24","name":"Lean.«termSatisfies_binder_pred%__»","line":21,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.«termSatisfies_binder_pred%__»","doc":"`satisfies_binder_pred% t pred` expands to a proposition expressing that `t` satisfies `pred`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.«termSatisfies_binder_pred%__»\"><span class=\"name\">Lean</span>.<span class=\"name\">«termSatisfies_binder_pred%__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L15-L19","name":"Lean.Parser.Category.binderPred","line":15,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.Parser.Category.binderPred","doc":"The syntax category of binder predicates contains predicates like `> 0`, `∈ s`, etc.\n(`: t` should not be a binder predicate because it would clash with the built-in syntax for ∀/∃.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.Parser.Category.binderPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Category</span>.<span class=\"name\">binderPred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Notation.html#Lean.Parser.Category\">Category</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/BinderPredicates.lean#L15-L19","name":"Lean.binderPred.quot","line":15,"kind":"def","docLink":"./Init/BinderPredicates.html#Lean.binderPred.quot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/BinderPredicates.html#Lean.binderPred.quot\"><span class=\"name\">Lean</span>.<span class=\"name\">binderPred</span>.<span class=\"name\">quot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"}]}