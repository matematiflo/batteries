{"name":"Init.Data.Iterators.Basic","instances":[{"typeNames":["Std.Iterators.IterM.TerminationMeasures.Finite"],"name":"Std.Iterators.instWellFoundedRelationFiniteOfFinite","className":"WellFoundedRelation"},{"typeNames":["Std.Iterators.IterM.TerminationMeasures.Productive"],"name":"Std.Iterators.instWellFoundedRelationProductiveOfProductive","className":"WellFoundedRelation"},{"typeNames":[],"name":"Std.Iterators.instProductiveOfFinite","className":"Std.Iterators.Productive"}],"imports":["Init.Core","Init.Classical","Init.Ext","Init.NotationExtra","Init.TacticsExtra"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L798-L798","name":"Std.Iterators.LawfulDeterministicIterator.isPlausibleStep_eq_eq","line":798,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.LawfulDeterministicIterator.isPlausibleStep_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.LawfulDeterministicIterator.isPlausibleStep_eq_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">LawfulDeterministicIterator</span>.<span class=\"name\">isPlausibleStep_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.LawfulDeterministicIterator\">LawfulDeterministicIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">step</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">step</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L796-L796","name":"Std.Iterators.LawfulDeterministicIterator.mk","line":796,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.LawfulDeterministicIterator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.LawfulDeterministicIterator.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">LawfulDeterministicIterator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isPlausibleStep_eq_eq</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>),\n    <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">step</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">step</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.LawfulDeterministicIterator\">LawfulDeterministicIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L785-L798","name":"Std.Iterators.LawfulDeterministicIterator","line":785,"kind":"class","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.LawfulDeterministicIterator","doc":"This typeclass characterizes iterators that have deterministic return values. This typeclass does\n*not* guarantee that there are no monadic side effects such as exceptions.\n\nGeneral monadic iterators can be nondeterministic, so that `it.IsPlausibleStep step` will be true\nfor no or more than one choice of `step`. This typeclass ensures that there is exactly one such\nchoice.\n\nThis is an experimental instance and it should not be explicitly used downstream of the standard\nlibrary.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.LawfulDeterministicIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">LawfulDeterministicIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L776-L781","name":"Std.Iterators.instProductiveOfFinite","line":776,"kind":"instance","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.instProductiveOfFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.instProductiveOfFinite\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instProductiveOfFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L761-L769","name":"Std.Iterators.Iter.TerminationMeasures.Productive.rel_of_skip","line":761,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Productive.rel_of_skip","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `Iter.finitelyManySkips`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Productive.rel_of_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span>.<span class=\"name\">rel_of_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">}</a>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel\">Rel</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L756-L759","name":"Std.Iterators.Iter.finitelyManySkips","line":756,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.finitelyManySkips","doc":"Termination measure to be used in well-founded recursive functions recursing over a productive\niterator (see also `Productive`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.finitelyManySkips\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">finitelyManySkips</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">IterM.TerminationMeasures.Productive</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L741-L749","name":"Std.Iterators.IterM.TerminationMeasures.Productive.rel_of_skip","line":741,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.rel_of_skip","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `IterM.finitelyManySkips`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.rel_of_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span>.<span class=\"name\">rel_of_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it'</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">}</a>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel\">Rel</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L732-L739","name":"Std.Iterators.IterM.finitelyManySkips","line":732,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips","doc":"Termination measure to be used in well-founded recursive functions recursing over a productive\niterator (see also `Productive`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">finitelyManySkips</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">TerminationMeasures.Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L727-L730","name":"Std.Iterators.instWellFoundedRelationProductiveOfProductive","line":727,"kind":"instance","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.instWellFoundedRelationProductiveOfProductive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.instWellFoundedRelationProductiveOfProductive\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instWellFoundedRelationProductiveOfProductive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">IterM.TerminationMeasures.Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L717-L725","name":"Std.Iterators.IterM.TerminationMeasures.Productive.Rel","line":717,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel","doc":"The relation of plausible successors while skipping on `IterM.TerminationMeasures.Productive`.\nIt is well-founded if there is a `Productive` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span>.<span class=\"name\">Rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L715-L715","name":"Std.Iterators.IterM.TerminationMeasures.Productive.it","line":715,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.it","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.it\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span>.<span class=\"name\">it</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L713-L713","name":"Std.Iterators.IterM.TerminationMeasures.Productive.mk","line":713,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L709-L715","name":"Std.Iterators.IterM.TerminationMeasures.Productive","line":709,"kind":"structure","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive","doc":"This type is a wrapper around `IterM` so that it becomes a useful termination measure for\nrecursion over productive iterators. See also `IterM.finitelyManySkips` and `Iter.finitelyManySkips`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L707-L707","name":"Std.Iterators.Productive.wf","line":707,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive.wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive.wf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Productive</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSkipSuccessorOf\">IterM.IsPlausibleSkipSuccessorOf</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L706-L706","name":"Std.Iterators.Productive.mk","line":706,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Productive</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wf</span> : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSkipSuccessorOf\">IterM.IsPlausibleSkipSuccessorOf</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L699-L707","name":"Std.Iterators.Productive","line":699,"kind":"class","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive","doc":"`Productive α m` asserts that `IterM (α := α) m` terminates or emits a value after finitely many\nskips. Technically, this means that the relation of plausible successors during skips is\nwell-founded.\nGiven this typeclass, termination proofs for well-founded recursion over an iterator `it` can use\n`it.finitelyManySkips` as a termination measure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Productive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L689-L693","name":"Std.Iterators.IterM.isPlausibleSuccessorOf_of_skip","line":689,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.isPlausibleSuccessorOf_of_skip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.isPlausibleSuccessorOf_of_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">isPlausibleSuccessorOf_of_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L683-L687","name":"Std.Iterators.IterM.isPlausibleSuccessorOf_of_yield","line":683,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.isPlausibleSuccessorOf_of_yield","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.isPlausibleSuccessorOf_of_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">isPlausibleSuccessorOf_of_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L670-L675","name":"Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_skip","line":670,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_skip","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `IterM.finitelyManySteps`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">rel_of_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\">Rel</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L660-L668","name":"Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_yield","line":660,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_yield","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `IterM.finitelyManySteps`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">rel_of_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\">Rel</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L655-L658","name":"Std.Iterators.Iter.finitelyManySteps","line":655,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.finitelyManySteps","doc":"Termination measure to be used in well-founded recursive functions recursing over a finite iterator\n(see also `Finite`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.finitelyManySteps\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">finitelyManySteps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">IterM.TerminationMeasures.Finite</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L642-L647","name":"Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_skip","line":642,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_skip","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `IterM.finitelyManySteps`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">rel_of_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it'</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\">Rel</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L632-L640","name":"Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_yield","line":632,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_yield","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `IterM.finitelyManySteps`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">rel_of_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it'</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\">Rel</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L623-L630","name":"Std.Iterators.IterM.finitelyManySteps","line":623,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySteps","doc":"Termination measure to be used in well-founded recursive functions recursing over a finite iterator\n(see also `Finite`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySteps\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">finitelyManySteps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">TerminationMeasures.Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L618-L621","name":"Std.Iterators.instWellFoundedRelationFiniteOfFinite","line":618,"kind":"instance","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.instWellFoundedRelationFiniteOfFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.instWellFoundedRelationFiniteOfFinite\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instWellFoundedRelationFiniteOfFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">IterM.TerminationMeasures.Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L608-L616","name":"Std.Iterators.IterM.TerminationMeasures.Finite.Rel","line":608,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel","doc":"The relation of plausible successors on `IterM.TerminationMeasures.Finite`. It is well-founded\nif there is a `Finite` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">Rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L606-L606","name":"Std.Iterators.IterM.TerminationMeasures.Finite.it","line":606,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.it","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.it\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">it</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L604-L604","name":"Std.Iterators.IterM.TerminationMeasures.Finite.mk","line":604,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L600-L606","name":"Std.Iterators.IterM.TerminationMeasures.Finite","line":600,"kind":"structure","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite","doc":"This type is a wrapper around `IterM` so that it becomes a useful termination measure for\nrecursion over finite iterators. See also `IterM.finitelyManySteps` and `Iter.finitelyManySteps`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L598-L598","name":"Std.Iterators.Finite.wf","line":598,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite.wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite.wf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Finite</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IterM.IsPlausibleSuccessorOf</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L597-L597","name":"Std.Iterators.Finite.mk","line":597,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Finite</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wf</span> : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IterM.IsPlausibleSuccessorOf</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L591-L598","name":"Std.Iterators.Finite","line":591,"kind":"class","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite","doc":"`Finite α m` asserts that `IterM (α := α) m` terminates after finitely many steps. Technically,\nthis means that the relation of plausible successors is well-founded.\nGiven this typeclass, termination proofs for well-founded recursion over an iterator `it` can use\n`it.finitelyManySteps` as a termination measure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Finite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L578-L585","name":"Std.Iterators.Iter.step","line":578,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.step","doc":"Makes a single step with the given iterator `it`, potentially emitting a value and providing a\nsucceeding iterator. If this function is used recursively, termination can sometimes be proved with\nthe termination measures `it.finitelyManySteps` and `it.finitelyManySkips`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.step\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.Step\">Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L570-L576","name":"Std.Iterators.Iter.IsPlausibleSkipSuccessorOf","line":570,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSkipSuccessorOf","doc":"Asserts that a certain iterator `it'` could plausibly be the directly succeeding iterator of another\ngiven iterator `it` while no value is emitted (see `IterStep.skip`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSkipSuccessorOf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleSkipSuccessorOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L563-L568","name":"Std.Iterators.Iter.IsPlausibleIndirectOutput.trans","line":563,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput.trans\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleIndirectOutput</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L556-L561","name":"Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf.trans","line":556,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf.trans\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleIndirectSuccessorOf</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it'' </span><span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it''</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it''</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L541-L554","name":"Std.Iterators.Iter.isPlausibleIndirectSuccessor_iff_isPlausibleIndirectSuccessor_toIterM","line":541,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.isPlausibleIndirectSuccessor_iff_isPlausibleIndirectSuccessor_toIterM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.isPlausibleIndirectSuccessor_iff_isPlausibleIndirectSuccessor_toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">isPlausibleIndirectSuccessor_iff_isPlausibleIndirectSuccessor_toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L538-L539","name":"Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf.cons_right","line":538,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf.cons_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf.cons_right\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleIndirectSuccessorOf</span>.<span class=\"name\">cons_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it'' </span><span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it''</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it''</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L537-L537","name":"Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf.refl","line":537,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf.refl\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleIndirectSuccessorOf</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L531-L539","name":"Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf","line":531,"kind":"inductive","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf","doc":"Asserts that an iterator `it'` could plausibly produce `it'` as a successor iterator after\nfinitely many steps. This relation is reflexive.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectSuccessorOf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleIndirectSuccessorOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L510-L529","name":"Std.Iterators.Iter.isPlausibleIndirectOutput_iff_isPlausibleIndirectOutput_toIterM","line":510,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.isPlausibleIndirectOutput_iff_isPlausibleIndirectOutput_toIterM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.isPlausibleIndirectOutput_iff_isPlausibleIndirectOutput_toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">isPlausibleIndirectOutput_iff_isPlausibleIndirectOutput_toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L507-L508","name":"Std.Iterators.Iter.IsPlausibleIndirectOutput.indirect","line":507,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput.indirect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput.indirect\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleIndirectOutput</span>.<span class=\"name\">indirect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L505-L506","name":"Std.Iterators.Iter.IsPlausibleIndirectOutput.direct","line":505,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput.direct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput.direct\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleIndirectOutput</span>.<span class=\"name\">direct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L499-L508","name":"Std.Iterators.Iter.IsPlausibleIndirectOutput","line":499,"kind":"inductive","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput","doc":"Asserts that a certain iterator `it` could plausibly yield the value `out` after an arbitrary\nnumber of steps.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleIndirectOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L487-L497","name":"Std.Iterators.Iter.isPlausibleSuccessorOf_iff_exists","line":487,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.isPlausibleSuccessorOf_iff_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.isPlausibleSuccessorOf_iff_exists\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">isPlausibleSuccessorOf_iff_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">step</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">step</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.successor\">successor</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">it'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">step</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L478-L485","name":"Std.Iterators.Iter.IsPlausibleSuccessorOf","line":478,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSuccessorOf","doc":"Asserts that a certain iterator `it'` could plausibly be the directly succeeding iterator of another\ngiven iterator `it`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSuccessorOf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleSuccessorOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L468-L476","name":"Std.Iterators.Iter.isPlausibleOutput_iff_exists","line":468,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.isPlausibleOutput_iff_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.isPlausibleOutput_iff_exists\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">isPlausibleOutput_iff_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L459-L466","name":"Std.Iterators.Iter.IsPlausibleOutput","line":459,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleOutput","doc":"Asserts that a certain output value could plausibly be emitted by the given iterator in its next\nstep.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleOutput\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L454-L457","name":"Std.Iterators.IterM.Step.toPure_done","line":454,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_done","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_done\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Step</span>.<span class=\"name\">toPure_done</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure\">toPure</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\">PlausibleIterStep.done</a> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L449-L452","name":"Std.Iterators.IterM.Step.toPure_skip","line":449,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_skip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Step</span>.<span class=\"name\">toPure_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure\">toPure</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span></span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.skip\">PlausibleIterStep.skip</a> <span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L444-L447","name":"Std.Iterators.IterM.Step.toPure_yield","line":444,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_yield","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Step</span>.<span class=\"name\">toPure_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure\">toPure</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span></span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\">PlausibleIterStep.yield</a> <span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span> <span class=\"fn\">out</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L436-L442","name":"Std.Iterators.IterM.Step.toPure","line":436,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure","doc":"Converts an `IterM.Step` into an `Iter.Step`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Step</span>.<span class=\"name\">toPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step\">Step</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.Step\">Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L428-L434","name":"Std.Iterators.Iter.Step.toMonadic","line":428,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.Step.toMonadic","doc":"Converts an `Iter.Step` into an `IterM.Step`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.Step.toMonadic\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">Step</span>.<span class=\"name\">toMonadic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.Step\">Step</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step\">Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L420-L426","name":"Std.Iterators.Iter.Step","line":420,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.Step","doc":"The type of the step object returned by `Iter.step`, containing an `IterStep`\nand a proof that this is a plausible step for the given iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.Step\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">Step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L412-L418","name":"Std.Iterators.IterM.IsPlausibleIndirectOutput.trans","line":412,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput.trans\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleIndirectOutput</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L406-L410","name":"Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.single","line":406,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.single","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.single\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleIndirectSuccessorOf</span>.<span class=\"name\">single</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L398-L404","name":"Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.trans","line":398,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.trans\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleIndirectSuccessorOf</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it'' </span><span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it''</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it''</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L395-L396","name":"Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.cons_right","line":395,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.cons_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.cons_right\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleIndirectSuccessorOf</span>.<span class=\"name\">cons_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it'' </span><span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it''</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it''</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L394-L394","name":"Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.refl","line":394,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf.refl\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleIndirectSuccessorOf</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf\">IsPlausibleIndirectSuccessorOf</a></span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L388-L396","name":"Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf","line":388,"kind":"inductive","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf","doc":"Asserts that an iterator `it'` could plausibly produce `it'` as a successor iterator after\nfinitely many steps. This relation is reflexive.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectSuccessorOf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleIndirectSuccessorOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L385-L386","name":"Std.Iterators.IterM.IsPlausibleIndirectOutput.indirect","line":385,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput.indirect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput.indirect\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleIndirectOutput</span>.<span class=\"name\">indirect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L383-L384","name":"Std.Iterators.IterM.IsPlausibleIndirectOutput.direct","line":383,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput.direct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput.direct\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleIndirectOutput</span>.<span class=\"name\">direct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L377-L386","name":"Std.Iterators.IterM.IsPlausibleIndirectOutput","line":377,"kind":"inductive","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput","doc":"Asserts that a certain iterator `it` could plausibly yield the value `out` after an arbitrary\nnumber of steps.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleIndirectOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L368-L375","name":"Std.Iterators.Iter.IsPlausibleStep","line":368,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep","doc":"Asserts that certain step is plausibly the successor of a given iterator. What \"plausible\" means\nis up to the `Iterator` instance but it should be strong enough to allow termination proofs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L354-L362","name":"Std.Iterators.IterM.step","line":354,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.step","doc":"Makes a single step with the given iterator `it`, potentially emitting a value and providing a\nsucceeding iterator. If this function is used recursively, termination can sometimes be proved with\nthe termination measures `it.finitelyManySteps` and `it.finitelyManySkips`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.step\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step\">Step</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L345-L352","name":"Std.Iterators.IterM.IsPlausibleSkipSuccessorOf","line":345,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSkipSuccessorOf","doc":"Asserts that a certain iterator `it'` could plausibly be the directly succeeding iterator of another\ngiven iterator `it` while no value is emitted (see `IterStep.skip`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSkipSuccessorOf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleSkipSuccessorOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L336-L343","name":"Std.Iterators.IterM.IsPlausibleSuccessorOf","line":336,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf","doc":"Asserts that a certain iterator `it'` could plausibly be the directly succeeding iterator of another\ngiven iterator `it`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleSuccessorOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L327-L334","name":"Std.Iterators.IterM.IsPlausibleOutput","line":327,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput","doc":"Asserts that a certain output value could plausibly be emitted by the given iterator in its next\nstep.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L318-L325","name":"Std.Iterators.IterM.Step","line":318,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step","doc":"The type of the step object returned by `IterM.step`, containing an `IterStep`\nand a proof that this is a plausible step for the given iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L309-L316","name":"Std.Iterators.IterM.IsPlausibleStep","line":309,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep","doc":"Asserts that certain step is plausibly the successor of a given iterator. What \"plausible\" means\nis up to the `Iterator` instance but it should be strong enough to allow termination proofs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L304-L307","name":"Std.Iterators.internalState_toIterM","line":304,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.internalState_toIterM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.internalState_toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">internalState_toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.toIterM\">toIterM</a> <span class=\"fn\">it</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">it</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L299-L302","name":"Std.Iterators.toIterM_internalState","line":299,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.toIterM_internalState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.toIterM_internalState\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">toIterM_internalState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.toIterM\">toIterM</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">it</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L291-L297","name":"Std.Iterators.toIterM","line":291,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.toIterM","doc":"Converts wraps the state of an iterator into an `IterM` object.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L287-L287","name":"Std.Iterators.Iterator.step","line":287,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator.step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator.step\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator.IsPlausibleStep\">IsPlausibleStep</a> <span class=\"fn\">it</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L286-L286","name":"Std.Iterators.Iterator.IsPlausibleStep","line":286,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator.IsPlausibleStep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator.IsPlausibleStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">IsPlausibleStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L285-L285","name":"Std.Iterators.Iterator.mk","line":285,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>) → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">(<span class=\"fn\">IsPlausibleStep</span> <span class=\"fn\">it</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L278-L287","name":"Std.Iterators.Iterator","line":278,"kind":"class","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator","doc":"The typeclass providing the step function of an iterator in `Iter (α := α) β` or\n`IterM (α := α) m β`.\n\nIn order to allow intrinsic termination proofs when iterating with the `step` function, the\nstep object is bundled with a proof that it is a \"plausible\" step for the given current iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max w w')</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L262-L274","name":"Std.Iterators.PlausibleIterStep.casesOn","line":262,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.casesOn","doc":"A more convenient `cases` eliminator for `PlausibleIterStep`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.casesOn\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">PlausibleIterStep</span>.<span class=\"name\">casesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">IsPlausibleStep</span></span> → <a href=\"./foundational_types.html\">Sort</a> x</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">IsPlausibleStep</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">yield</span> : <span class=\"fn\">(<span class=\"fn\">it'</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">β</span>) → <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span></span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">skip</span> : <span class=\"fn\">(<span class=\"fn\">it'</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span></span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">done</span> : <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L254-L260","name":"Std.Iterators.PlausibleIterStep.done","line":254,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done","doc":"Match pattern for the `done` case. See also `IterStep.done`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">PlausibleIterStep</span>.<span class=\"name\">done</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">IsPlausibleStep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L246-L252","name":"Std.Iterators.PlausibleIterStep.skip","line":246,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.skip","doc":"Match pattern for the `skip` case. See also `IterStep.skip`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">PlausibleIterStep</span>.<span class=\"name\">skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it'</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">IsPlausibleStep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L237-L244","name":"Std.Iterators.PlausibleIterStep.yield","line":237,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield","doc":"Match pattern for the `yield` case. See also `IterStep.yield`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">PlausibleIterStep</span>.<span class=\"name\">yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it'</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">IsPlausibleStep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L227-L235","name":"Std.Iterators.PlausibleIterStep","line":227,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep","doc":"A variant of `IterStep` that bundles the step together with a proof that it is \"plausible\".\nThe plausibility predicate will later be chosen to assert that a state is a plausible successor\nof another state. Having this proof bundled up with the step is important for termination proofs.\n\nSee `IterM.Step` and `Iter.Step` for the concrete choice of the plausibility predicate.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">PlausibleIterStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max 0 u w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L222-L225","name":"Std.Iterators.IterStep.mapIterator_id","line":222,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_id\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">step</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">step</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L216-L220","name":"Std.Iterators.IterStep.mapIterator_comp","line":216,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_comp\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α''</span> : <a href=\"./foundational_types.html\">Type</a> u''}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\">α''</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L210-L214","name":"Std.Iterators.IterStep.mapIterator_mapIterator","line":210,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_mapIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_mapIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator_mapIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α''</span> : <a href=\"./foundational_types.html\">Type</a> u''}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\">α''</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">f</span> <span class=\"fn\">step</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">step</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L205-L208","name":"Std.Iterators.IterStep.mapIterator_done","line":205,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_done","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_done\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator_done</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">f</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">done</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">done</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L200-L203","name":"Std.Iterators.IterStep.mapIterator_skip","line":200,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_skip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">skip</a> <span class=\"fn\">it</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">skip</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">it</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L195-L198","name":"Std.Iterators.IterStep.mapIterator_yield","line":195,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_yield","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">yield</a> <span class=\"fn\">it</span> <span class=\"fn\">out</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">yield</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">it</span>)</span> <span class=\"fn\">out</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L185-L193","name":"Std.Iterators.IterStep.mapIterator","line":185,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator","doc":"If present, applies `f` to the iterator of an `IterStep` and replaces the iterator\nwith the result of the application of `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α'</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L175-L183","name":"Std.Iterators.IterStep.successor","line":175,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.successor","doc":"Returns the succeeding iterator stored in an iterator step or `none` if the step is `.done`\nand the iterator has finished.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.successor\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">successor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L169-L173","name":"Std.Iterators.IterStep.done","line":169,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done","doc":"`IterStep.done` describes the situation that an iterator has finished and will neither emit\nmore values nor cause any monadic effects. In this case, no succeeding iterator is provided.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">done</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L162-L168","name":"Std.Iterators.IterStep.skip","line":162,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip","doc":"`IterStep.skip it` describes the situation that an iterator does not emit anything in this\niteration and provides `it'` as the succeeding iterator.\n\nAllowing `skip` steps is necessary to generate efficient code from a loop over an iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L157-L161","name":"Std.Iterators.IterStep.yield","line":157,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield","doc":"`IterStep.yield it out` describes the situation that an iterator emits `out` and provides `it`\nas the succeeding iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L153-L173","name":"Std.Iterators.IterStep","line":153,"kind":"inductive","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep","doc":"`IterStep α β` represents a step taken by an iterator (`Iter β` or `IterM m β`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max (max 1 u_1) u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L144-L147","name":"Std.Iterators.Iter.toIterM_comp_toIter","line":144,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM_comp_toIter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM_comp_toIter\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">toIterM_comp_toIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">IterM.toIter</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L139-L142","name":"Std.Iterators.Iter.toIterM_toIter","line":139,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM_toIter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM_toIter\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">toIterM_toIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">it</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L134-L137","name":"Std.Iterators.Iter.toIter_comp_toIterM","line":134,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIter_comp_toIterM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIter_comp_toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">toIter_comp_toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">IterM.toIter</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L129-L132","name":"Std.Iterators.Iter.toIter_toIterM","line":129,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIter_toIterM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIter_toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">toIter_toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">it</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L122-L127","name":"Std.Iterators.IterM.toIter","line":122,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter","doc":"Converts a monadic iterator (`IterM Id β`) over `Id` into a pure iterator (`Iter β`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">toIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L114-L120","name":"Std.Iterators.Iter.toIterM","line":114,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM","doc":"Converts a pure iterator (`Iter β`) into a monadic iterator (`IterM Id β`) in the\nidentity monad `Id`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L112-L112","name":"Std.Iterators.Iter.internalState","line":112,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState","doc":"Internal implementation detail of the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">internalState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L110-L110","name":"Std.Iterators.Iter.mk","line":110,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">internalState</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L71-L112","name":"Std.Iterators.Iter","line":71,"kind":"structure","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter","doc":"An iterator that sequentially emits values of type `β`. It may be finite\nor infinite.\n\nSee the root module `Std.Data.Iterators` for a more comprehensive overview over the iterator\nframework.\n\nSee `Std.Data.Iterators.Producers` for ways to iterate over common data structures.\nBy convention, the monadic iterator associated with an object can be obtained via dot notation.\nFor example, `List.iterM IO` creates an iterator over a list in the monad `IO`.\n\nSee `Init.Data.Iterators.Consumers` for ways to use an iterator. For example, `it.toList` will\nconvert a provably finite iterator `it` into a list and `it.allowNontermination.toList` will\ndo so even if finiteness cannot be proved. It is also always possible to manually iterate using\n`it.step`, relying on the termination measures `it.finitelyManySteps` and `it.finitelyManySkips`.\n\nSee `IterM` for iterators that operate in a monad.\n\nInternally, `Iter β` wraps an element of type `α` containing state information.\nThe type `α` determines the implementation of the iterator using a typeclass mechanism.\nThe concrete typeclass implementing the iterator is `Iterator α m β`.\n\nWhen using combinators, `α` can become very complicated. It is an implicit parameter\nof `α` so that the pretty printer will not print this large type by default. If a declaration\nreturns an iterator, the following will not work:\n\n```lean\ndef x : Iter Nat := [1, 2, 3].iter\n```\n\nInstead the declaration type needs to be completely omitted:\n\n```lean\ndef x := [1, 2, 3].iter\n\n-- if you want to ensure that `x` is an iterator emitting `Nat`\ndef x := ([1, 2, 3].iter : Iter Nat)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L69-L69","name":"Std.Iterators.IterM.internalState","line":69,"kind":"def","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState","doc":"Internal implementation detail of the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">internalState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L67-L67","name":"Std.Iterators.IterM.mk","line":67,"kind":"ctor","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">internalState</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L66-L66","name":"Std.Iterators.IterM.ext","line":66,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.ext\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">internalState</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L66-L66","name":"Std.Iterators.IterM.ext_iff","line":66,"kind":"theorem","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.ext_iff\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Iterators/Basic.lean#L27-L69","name":"Std.Iterators.IterM","line":27,"kind":"structure","docLink":"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM","doc":"An iterator that sequentially emits values of type `β` in the monad `m`. It may be finite\nor infinite.\n\nSee the root module `Std.Data.Iterators` for a more comprehensive overview over the iterator\nframework.\n\nSee `Std.Data.Iterators.Producers` for ways to iterate over common data structures.\nBy convention, the monadic iterator associated with an object can be obtained via dot notation.\nFor example, `List.iterM IO` creates an iterator over a list in the monad `IO`.\n\nSee `Init.Data.Iterators.Consumers` for ways to use an iterator. For example, `it.toList` will\nconvert a provably finite iterator `it` into a list and `it.allowNontermination.toList` will\ndo so even if finiteness cannot be proved. It is also always possible to manually iterate using\n`it.step`, relying on the termination measures `it.finitelyManySteps` and `it.finitelyManySkips`.\n\nSee `Iter` for a more convenient interface in case that no monadic effects are needed (`m = Id`).\n\nInternally, `IterM m β` wraps an element of type `α` containing state information.\nThe type `α` determines the implementation of the iterator using a typeclass mechanism.\nThe concrete typeclass implementing the iterator is `Iterator α m β`.\n\nWhen using combinators, `α` can become very complicated. It is an implicit parameter\nof `α` so that the pretty printer will not print this large type by default. If a declaration\nreturns an iterator, the following will not work:\n\n```lean\ndef x : IterM IO Nat := [1, 2, 3].iterM IO\n```\n\nInstead the declaration type needs to be completely omitted:\n\n```lean\ndef x := [1, 2, 3].iterM IO\n\n-- if you want to ensure that `x` is an iterator in `IO` emitting `Nat`\ndef x := ([1, 2, 3].iterM IO : IterM IO Nat)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"}]}