{"name":"Lean.Meta.Tactic.Grind.Arith.Linear.Util","instances":[{"typeNames":[],"name":"Lean.Meta.Grind.Arith.Linear.instMonadGetStructOfMonadLift","className":"Lean.Meta.Grind.Arith.Linear.MonadGetStruct"},{"typeNames":["Lean.Meta.Grind.Arith.Linear.LinearM"],"name":"Lean.Meta.Grind.Arith.Linear.instMonadGetStructLinearM","className":"Lean.Meta.Grind.Arith.Linear.MonadGetStruct"},{"typeNames":["Lean.Meta.Grind.Arith.Linear.LinearM"],"name":"Lean.Meta.Grind.Arith.Linear.instMonadGetRingLinearM","className":"Lean.Meta.Grind.Arith.CommRing.MonadGetRing"}],"imports":["Lean.Meta.Tactic.Grind.Types","Lean.Meta.Tactic.Grind.Arith.CommRing.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L264-L269","name":"Lean.Grind.Linarith.Poly.pickVarToElim?.go","line":264,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.pickVarToElim?.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.pickVarToElim?.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">pickVarToElim?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L256-L269","name":"Lean.Grind.Linarith.Poly.pickVarToElim?","line":256,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.pickVarToElim?","doc":"Selects the variable in the given linear polynomial whose coefficient has the smallest absolute value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.pickVarToElim?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">pickVarToElim?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L251-L254","name":"Lean.Grind.Linarith.Poly.div","line":251,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.div\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L246-L249","name":"Lean.Grind.Linarith.Poly.gcdCoeffs","line":246,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.gcdCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.gcdCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">gcdCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L242-L244","name":"Lean.Grind.Linarith.Poly.gcdCoeffsAux","line":242,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.gcdCoeffsAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.gcdCoeffsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">gcdCoeffsAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L229-L240","name":"Lean.Grind.Linarith.Poly.findVarToSubst","line":229,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.findVarToSubst","doc":"Given a polynomial `p`, returns `some (x, k, c)` if `p` contains the monomial `k*x`,\nand `x` has been eliminated using the equality `c`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.findVarToSubst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">findVarToSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">Meta.Grind.Arith.Linear.LinearM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.EqCnstr\">Meta.Grind.Arith.Linear.EqCnstr</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L224-L226","name":"Lean.Grind.Linarith.Poly.updateOccs.go","line":224,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.updateOccs.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.updateOccs.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">updateOccs</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">Meta.Grind.Arith.Linear.LinearM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L218-L227","name":"Lean.Grind.Linarith.Poly.updateOccs","line":218,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.updateOccs","doc":"Given `p` a polynomial being inserted into `lowers`, `uppers`, or `diseqs`,\nget its leading variable `y`, and adds `y` as an occurrence for the remaining variables in `p`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.updateOccs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">updateOccs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">Meta.Grind.Arith.Linear.LinearM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L210-L216","name":"Lean.Meta.Grind.Arith.Linear.addOcc","line":210,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.addOcc","doc":"Adds `y` as an occurrence of `x`.\nThat is, `x` occurs in `lowers[y]`, `uppers[y]`, or `diseqs[y]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.addOcc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">addOcc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L206-L208","name":"Lean.Meta.Grind.Arith.Linear.getOccursOf","line":206,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getOccursOf","doc":"Returns occurrences of `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getOccursOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getOccursOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.VarSet\">VarSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L202-L204","name":"Lean.Meta.Grind.Arith.Linear.eliminated","line":202,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.eliminated","doc":"Returns `true` if `x` has been eliminated using an equality constraint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.eliminated\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eliminated</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L197-L200","name":"Lean.Meta.Grind.Arith.Linear.inconsistent","line":197,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.inconsistent","doc":"Returns `true` if the linarith state is inconsistent. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.inconsistent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">inconsistent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L194-L195","name":"Lean.Meta.Grind.Arith.Linear.getVar","line":194,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L190-L192","name":"Lean.Meta.Grind.Arith.Linear.resetAssignmentFrom","line":190,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.resetAssignmentFrom","doc":"Resets the assignment of any variable bigger or equal to `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.resetAssignmentFrom\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">resetAssignmentFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L186-L188","name":"Lean.Meta.Grind.Arith.Linear.DiseqCnstr.satisfied","line":186,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr.satisfied","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr.satisfied\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">satisfied</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Data/LBool.html#Lean.LBool\">LBool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L175-L184","name":"Lean.Meta.Grind.Arith.Linear.IneqCnstr.satisfied","line":175,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.satisfied","doc":"Returns `.true` if `c` is satisfied by the current partial model,\n`.undef` if `c` contains unassigned variables, and `.false` otherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.satisfied\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstr</span>.<span class=\"name\">satisfied</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Data/LBool.html#Lean.LBool\">LBool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L167-L173","name":"Lean.Grind.Linarith.Poly.eval?.go","line":167,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.eval?.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.eval?.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">eval?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Std/Internal/Rat.html#Std.Internal.Rat\">Std.Internal.Rat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Std/Internal/Rat.html#Std.Internal.Rat\">Std.Internal.Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Internal/Rat.html#Std.Internal.Rat\">Std.Internal.Rat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L161-L174","name":"Lean.Grind.Linarith.Poly.eval?","line":161,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.eval?","doc":"Tries to evaluate the polynomial `p` using the partial model/assignment built so far.\nThe result is `none` if the polynomial contains variables that have not been assigned.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Grind.Linarith.Poly.eval?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">eval?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">Meta.Grind.Arith.Linear.LinearM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Internal/Rat.html#Std.Internal.Rat\">Std.Internal.Rat</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L156-L159","name":"Lean.Meta.Grind.Arith.Linear.getOrderedRingInst","line":156,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getOrderedRingInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getOrderedRingInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getOrderedRingInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L151-L154","name":"Lean.Meta.Grind.Arith.Linear.getCommRingInst","line":151,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getCommRingInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getCommRingInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getCommRingInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L146-L149","name":"Lean.Meta.Grind.Arith.Linear.getRingInst","line":146,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getRingInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getRingInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getRingInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L141-L144","name":"Lean.Meta.Grind.Arith.Linear.getLinearOrderInst","line":141,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getLinearOrderInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getLinearOrderInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getLinearOrderInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L136-L139","name":"Lean.Meta.Grind.Arith.Linear.getLeFn","line":136,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getLeFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getLeFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getLeFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct\">MonadGetStruct</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L131-L134","name":"Lean.Meta.Grind.Arith.Linear.getLtFn","line":131,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getLtFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getLtFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getLtFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct\">MonadGetStruct</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L128-L129","name":"Lean.Meta.Grind.Arith.Linear.isOrderedAdd","line":128,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.isOrderedAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.isOrderedAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isOrderedAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L123-L126","name":"Lean.Meta.Grind.Arith.Linear.getOrderedAddInst","line":123,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getOrderedAddInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getOrderedAddInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getOrderedAddInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L118-L121","name":"Lean.Meta.Grind.Arith.Linear.getPreorderInst","line":118,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getPreorderInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getPreorderInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getPreorderInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L113-L116","name":"Lean.Meta.Grind.Arith.Linear.getNoNatDivInst","line":113,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getNoNatDivInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getNoNatDivInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getNoNatDivInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L105-L111","name":"Lean.Meta.Grind.Arith.Linear.setTermStructId","line":105,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.setTermStructId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.setTermStructId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">setTermStructId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L102-L103","name":"Lean.Meta.Grind.Arith.Linear.getTermStructId?","line":102,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getTermStructId?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getTermStructId?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getTermStructId?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L98-L100","name":"Lean.Meta.Grind.Arith.Linear.modifyStruct","line":98,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.modifyStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.modifyStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">modifyStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a> → <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L95-L96","name":"Lean.Meta.Grind.Arith.Linear.hasNoNatZeroDivisors","line":95,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.hasNoNatZeroDivisors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.hasNoNatZeroDivisors\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">hasNoNatZeroDivisors</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L92-L93","name":"Lean.Meta.Grind.Arith.Linear.isLinearOrder","line":92,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.isLinearOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.isLinearOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isLinearOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L89-L90","name":"Lean.Meta.Grind.Arith.Linear.isOrderedCommRing","line":89,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.isOrderedCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.isOrderedCommRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isOrderedCommRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L86-L87","name":"Lean.Meta.Grind.Arith.Linear.isCommRing","line":86,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.isCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.isCommRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isCommRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L81-L84","name":"Lean.Meta.Grind.Arith.Linear.withRingM","line":81,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.withRingM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.withRingM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">withRingM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">CommRing.RingM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L76-L79","name":"Lean.Meta.Grind.Arith.Linear.getOne","line":76,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getOne\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L73-L74","name":"Lean.Meta.Grind.Arith.Linear.getZero","line":73,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getZero\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L70-L71","name":"Lean.Meta.Grind.Arith.Linear.instMonadGetRingLinearM","line":70,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.instMonadGetRingLinearM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.instMonadGetRingLinearM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instMonadGetRingLinearM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">CommRing.MonadGetRing</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L65-L68","name":"Lean.Meta.Grind.Arith.Linear.getRing","line":65,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.Ring\">CommRing.Ring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L62-L63","name":"Lean.Meta.Grind.Arith.Linear.getRing?","line":62,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getRing?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getRing?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getRing?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.Ring\">CommRing.Ring</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L59-L60","name":"Lean.Meta.Grind.Arith.Linear.throwNotCommRing","line":59,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.throwNotCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.throwNotCommRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">throwNotCommRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L56-L57","name":"Lean.Meta.Grind.Arith.Linear.throwNotRing","line":56,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.throwNotRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.throwNotRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">throwNotRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L52-L54","name":"Lean.Meta.Grind.Arith.Linear.getRingCore?","line":52,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getRingCore?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getRingCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getRingCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ringId?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.Ring\">CommRing.Ring</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L47-L48","name":"Lean.Meta.Grind.Arith.Linear.instMonadGetStructLinearM","line":47,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.instMonadGetStructLinearM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.instMonadGetStructLinearM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instMonadGetStructLinearM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct\">MonadGetStruct</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L39-L45","name":"Lean.Meta.Grind.Arith.Linear.LinearM.getStruct","line":39,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.getStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.getStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">LinearM</span>.<span class=\"name\">getStruct</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L36-L37","name":"Lean.Meta.Grind.Arith.Linear.getStructId","line":36,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getStructId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.getStructId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getStructId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L33-L34","name":"Lean.Meta.Grind.Arith.Linear.LinearM.run","line":33,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">LinearM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L30-L31","name":"Lean.Meta.Grind.Arith.Linear.LinearM","line":30,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM","doc":"We don't want to keep carrying the `StructId` around. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">LinearM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L26-L28","name":"Lean.Meta.Grind.Arith.Linear.instMonadGetStructOfMonadLift","line":26,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.instMonadGetStructOfMonadLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.instMonadGetStructOfMonadLift\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instMonadGetStructOfMonadLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct\">MonadGetStruct</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct\">MonadGetStruct</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L22-L22","name":"Lean.Meta.Grind.Arith.Linear.MonadGetStruct.getStruct","line":22,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct.getStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct.getStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">MonadGetStruct</span>.<span class=\"name\">getStruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct\">MonadGetStruct</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L21-L21","name":"Lean.Meta.Grind.Arith.Linear.MonadGetStruct.mk","line":21,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">MonadGetStruct</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getStruct</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct\">MonadGetStruct</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L21-L22","name":"Lean.Meta.Grind.Arith.Linear.MonadGetStruct","line":21,"kind":"class","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.MonadGetStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">MonadGetStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L19-L19","name":"Lean.Meta.Grind.Arith.Linear.LinearM.Context.structId","line":19,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.Context.structId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.Context.structId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">LinearM</span>.<span class=\"name\">Context</span>.<span class=\"name\">structId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L18-L18","name":"Lean.Meta.Grind.Arith.Linear.LinearM.Context.mk","line":18,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">LinearM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L18-L19","name":"Lean.Meta.Grind.Arith.Linear.LinearM.Context","line":18,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.LinearM.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">LinearM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L15-L16","name":"Lean.Meta.Grind.Arith.Linear.modify'","line":15,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.modify'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.modify'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">modify'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State\">State</a> → <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/Arith/Linear/Util.lean#L12-L13","name":"Lean.Meta.Grind.Arith.Linear.get'","line":12,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.get'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Util.html#Lean.Meta.Grind.Arith.Linear.get'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">get'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.State\">State</a></span></div></div>"}]}