{"name":"Init.Grind.Ring.Envelope","instances":[{"typeNames":["Lean.Grind.Ring.OfSemiring.Q"],"name":"Lean.Grind.Ring.OfSemiring.ofSemiring","className":"Lean.Grind.Ring"},{"typeNames":["Lean.Grind.Ring.OfSemiring.Q"],"name":"Lean.Grind.Ring.OfSemiring.instNoNatZeroDivisorsQOfAddRightCancel","className":"Lean.Grind.NoNatZeroDivisors"},{"typeNames":["Lean.Grind.Ring.OfSemiring.Q"],"name":"Lean.Grind.Ring.OfSemiring.instIsCharPQOfAddRightCancel","className":"Lean.Grind.IsCharP"},{"typeNames":["Lean.Grind.Ring.OfSemiring.Q"],"name":"Lean.Grind.Ring.OfSemiring.instLEQOfOrderedAdd","className":"LE"},{"typeNames":["Lean.Grind.Ring.OfSemiring.Q"],"name":"Lean.Grind.Ring.OfSemiring.instPreorderQOfOrderedAdd","className":"Lean.Grind.Preorder"},{"typeNames":["Lean.Grind.Ring.OfSemiring.Q"],"name":"Lean.Grind.Ring.OfSemiring.instOrderedAddQ","className":"Lean.Grind.OrderedAdd"},{"typeNames":["Lean.Grind.Ring.OfSemiring.Q"],"name":"Lean.Grind.Ring.OfSemiring.instOrderedRingQOfExistsAddOfLT","className":"Lean.Grind.OrderedRing"},{"typeNames":["Lean.Grind.Ring.OfSemiring.Q"],"name":"Lean.Grind.CommRing.OfCommSemiring.ofCommSemiring","className":"Lean.Grind.CommRing"}],"imports":["Init.Grind.Ring.Basic","Init.Grind.Ordered.Ring","Init.Data.AC"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L533-L537","name":"Lean.Grind.CommRing.OfCommSemiring.toQUnexpander","line":533,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.toQUnexpander","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.toQUnexpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">OfCommSemiring</span>.<span class=\"name\">toQUnexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L522-L524","name":"Lean.Grind.CommRing.OfCommSemiring.ofCommSemiring","line":522,"kind":"instance","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.ofCommSemiring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.ofCommSemiring\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">OfCommSemiring</span>.<span class=\"name\">ofCommSemiring</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Ring.OfSemiring.Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L516-L520","name":"Lean.Grind.CommRing.OfCommSemiring.mul_comm","line":516,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.mul_comm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">OfCommSemiring</span>.<span class=\"name\">mul_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Ring.OfSemiring.Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">Ring.OfSemiring.mul</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">Ring.OfSemiring.mul</a> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L509-L510","name":"Lean.Grind.CommRing.OfCommSemiring.instCommutativeHMul","line":509,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.instCommutativeHMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.instCommutativeHMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">OfCommSemiring</span>.<span class=\"name\">instCommutativeHMul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L507-L508","name":"Lean.Grind.CommRing.OfCommSemiring.instAssociativeHMul","line":507,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.instAssociativeHMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.instAssociativeHMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">OfCommSemiring</span>.<span class=\"name\">instAssociativeHMul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L505-L506","name":"Lean.Grind.CommRing.OfCommSemiring.instCommutativeHAdd","line":505,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.instCommutativeHAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.instCommutativeHAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">OfCommSemiring</span>.<span class=\"name\">instCommutativeHAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L503-L504","name":"Lean.Grind.CommRing.OfCommSemiring.instAssociativeHAdd","line":503,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.instAssociativeHAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.CommRing.OfCommSemiring.instAssociativeHAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">OfCommSemiring</span>.<span class=\"name\">instAssociativeHAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L451-L490","name":"Lean.Grind.Ring.OfSemiring.instOrderedRingQOfExistsAddOfLT","line":451,"kind":"instance","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instOrderedRingQOfExistsAddOfLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instOrderedRingQOfExistsAddOfLT\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instOrderedRingQOfExistsAddOfLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.ExistsAddOfLT\">ExistsAddOfLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L435-L448","name":"Lean.Grind.Ring.OfSemiring.instOrderedAddQ","line":435,"kind":"instance","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instOrderedAddQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instOrderedAddQ\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instOrderedAddQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L431-L433","name":"Lean.Grind.Ring.OfSemiring.toQ_lt","line":431,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">toQ_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L427-L429","name":"Lean.Grind.Ring.OfSemiring.toQ_le","line":427,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">toQ_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L397-L417","name":"Lean.Grind.Ring.OfSemiring.instPreorderQOfOrderedAdd","line":397,"kind":"instance","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instPreorderQOfOrderedAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instPreorderQOfOrderedAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instPreorderQOfOrderedAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L393-L395","name":"Lean.Grind.Ring.OfSemiring.mk_le_mk","line":393,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mk_le_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mk_le_mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">mk_le_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.mk\">Q.mk</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a₁</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">a₂</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.mk\">Q.mk</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b₁</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b₂</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L377-L391","name":"Lean.Grind.Ring.OfSemiring.instLEQOfOrderedAdd","line":377,"kind":"instance","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instLEQOfOrderedAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instLEQOfOrderedAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instLEQOfOrderedAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L357-L375","name":"Lean.Grind.Ring.OfSemiring.instIsCharPQOfAddRightCancel","line":357,"kind":"instance","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instIsCharPQOfAddRightCancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instIsCharPQOfAddRightCancel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instIsCharPQOfAddRightCancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.AddRightCancel\">AddRightCancel</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L338-L355","name":"Lean.Grind.Ring.OfSemiring.instNoNatZeroDivisorsQOfAddRightCancel","line":338,"kind":"instance","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instNoNatZeroDivisorsQOfAddRightCancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instNoNatZeroDivisorsQOfAddRightCancel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instNoNatZeroDivisorsQOfAddRightCancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.AddRightCancel\">AddRightCancel</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L331-L336","name":"Lean.Grind.Ring.OfSemiring.toQ_inj","line":331,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_inj\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">toQ_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.AddRightCancel\">AddRightCancel</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L326-L328","name":"Lean.Grind.Ring.OfSemiring.Q.exact","line":326,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Q</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.mk\">mk</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.mk\">mk</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L301-L304","name":"Lean.Grind.Ring.OfSemiring.toQ_pow","line":301,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">toQ_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L298-L299","name":"Lean.Grind.Ring.OfSemiring.toQ_ofNat","line":298,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">toQ_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L295-L296","name":"Lean.Grind.Ring.OfSemiring.toQ_natCast","line":295,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_natCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_natCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">toQ_natCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L292-L293","name":"Lean.Grind.Ring.OfSemiring.toQ_mul","line":292,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">toQ_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L289-L290","name":"Lean.Grind.Ring.OfSemiring.toQ_add","line":289,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">toQ_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L282-L283","name":"Lean.Grind.Ring.OfSemiring.toQ","line":282,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">toQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L258-L270","name":"Lean.Grind.Ring.OfSemiring.ofSemiring","line":258,"kind":"instance","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.ofSemiring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.ofSemiring\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">ofSemiring</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L245-L256","name":"Lean.Grind.Ring.OfSemiring.neg_zsmul","line":245,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.neg_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.neg_zsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">neg_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.zsmul\">zsmul</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.neg\">neg</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.zsmul\">zsmul</a> <span class=\"fn\">i</span> <span class=\"fn\">a</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L242-L243","name":"Lean.Grind.Ring.OfSemiring.zsmul","line":242,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.zsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L239-L240","name":"Lean.Grind.Ring.OfSemiring.nsmul","line":239,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.nsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.nsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L230-L233","name":"Lean.Grind.Ring.OfSemiring.hPow","line":230,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.hPow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.hPow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">hPow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L222-L228","name":"Lean.Grind.Ring.OfSemiring.right_distrib","line":222,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.right_distrib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.right_distrib\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">right_distrib</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L214-L220","name":"Lean.Grind.Ring.OfSemiring.left_distrib","line":214,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.left_distrib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.left_distrib\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">left_distrib</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L210-L212","name":"Lean.Grind.Ring.OfSemiring.mul_zero","line":210,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">mul_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">0</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L206-L208","name":"Lean.Grind.Ring.OfSemiring.zero_mul","line":206,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.zero_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.zero_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">zero_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L202-L204","name":"Lean.Grind.Ring.OfSemiring.one_mul","line":202,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.one_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">one_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L198-L200","name":"Lean.Grind.Ring.OfSemiring.mul_one","line":198,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul_one\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">mul_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">1</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L190-L196","name":"Lean.Grind.Ring.OfSemiring.mul_assoc","line":190,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul_assoc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">mul_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\">mul</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L187-L188","name":"Lean.Grind.Ring.OfSemiring.ofNat_succ","line":187,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.ofNat_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.ofNat_succ\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">ofNat_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L184-L185","name":"Lean.Grind.Ring.OfSemiring.intCast_ofNat","line":184,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.intCast_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.intCast_ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">intCast_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.intCast\">intCast</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L176-L182","name":"Lean.Grind.Ring.OfSemiring.intCast_neg","line":176,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.intCast_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.intCast_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">intCast_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.intCast\">intCast</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.neg\">neg</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.intCast\">intCast</a> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L170-L174","name":"Lean.Grind.Ring.OfSemiring.sub_eq_add_neg","line":170,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.sub_eq_add_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.sub\">sub</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.neg\">neg</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L163-L168","name":"Lean.Grind.Ring.OfSemiring.add_assoc","line":163,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add_assoc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">add_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L159-L161","name":"Lean.Grind.Ring.OfSemiring.add_zero","line":159,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">add_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">0</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L153-L157","name":"Lean.Grind.Ring.OfSemiring.add_comm","line":153,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add_comm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">add_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L147-L151","name":"Lean.Grind.Ring.OfSemiring.neg_add_cancel","line":147,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.neg_add_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.neg_add_cancel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">neg_add_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.neg\">neg</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\">natCast</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L137-L141","name":"Lean.Grind.Ring.OfSemiring.neg","line":137,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L131-L135","name":"Lean.Grind.Ring.OfSemiring.mul","line":131,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q₁ </span><span class=\"fn\">q₂</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L122-L129","name":"Lean.Grind.Ring.OfSemiring.add","line":122,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q₁ </span><span class=\"fn\">q₂</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L113-L120","name":"Lean.Grind.Ring.OfSemiring.sub","line":113,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q₁ </span><span class=\"fn\">q₂</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L110-L111","name":"Lean.Grind.Ring.OfSemiring.intCast","line":110,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.intCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.intCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L107-L108","name":"Lean.Grind.Ring.OfSemiring.natCast","line":107,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.natCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">natCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L104-L105","name":"Lean.Grind.Ring.OfSemiring.Q.ind","line":104,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.ind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.ind\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Q</span>.<span class=\"name\">ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.mk\">mk</a> <span class=\"fn\">a</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L92-L100","name":"Lean.Grind.Ring.OfSemiring.Q.liftOn₂","line":92,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.liftOn₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.liftOn₂\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Q</span>.<span class=\"name\">liftOn₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q₁ </span><span class=\"fn\">q₂</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ {<span class=\"fn\">a₁ </span><span class=\"fn\">b₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">b₁</span> <span class=\"fn\">b₂</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L89-L90","name":"Lean.Grind.Ring.OfSemiring.Q.mk","line":89,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Q</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L57-L87","name":"Lean.Grind.Ring.OfSemiring.mul_helper","line":57,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul_helper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.mul_helper\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">mul_helper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">b₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₂ </span><span class=\"fn\">a₃ </span><span class=\"fn\">b₃ </span><span class=\"fn\">a₄ </span><span class=\"fn\">b₄ </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₃</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₃</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₄</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₄</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">k</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">a₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₄</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a₄</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">a₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a₄</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₄</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L45-L55","name":"Lean.Grind.Ring.OfSemiring.r_trans","line":45,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r_trans\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">r_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L42-L43","name":"Lean.Grind.Ring.OfSemiring.r_sym","line":42,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r_sym","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r_sym\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">r_sym</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L39-L40","name":"Lean.Grind.Ring.OfSemiring.r_rfl","line":39,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r_rfl\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">r_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L35-L35","name":"Lean.Grind.Ring.OfSemiring.Q","line":35,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Q</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L32-L33","name":"Lean.Grind.Ring.OfSemiring.r","line":32,"kind":"def","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.r\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">r</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L27-L28","name":"Lean.Grind.Ring.OfSemiring.instAssociativeHMul","line":27,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instAssociativeHMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instAssociativeHMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instAssociativeHMul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L25-L26","name":"Lean.Grind.Ring.OfSemiring.instCommutativeHAdd","line":25,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instCommutativeHAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instCommutativeHAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instCommutativeHAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ring/Envelope.lean#L23-L24","name":"Lean.Grind.Ring.OfSemiring.instAssociativeHAdd","line":23,"kind":"theorem","docLink":"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instAssociativeHAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.instAssociativeHAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instAssociativeHAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"}]}