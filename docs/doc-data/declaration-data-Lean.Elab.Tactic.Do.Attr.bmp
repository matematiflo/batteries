{"name":"Lean.Elab.Tactic.Do.Attr","instances":[{"typeNames":["Lean.Elab.Tactic.Do.SpecAttr.SpecProof"],"name":"Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecProof","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.Do.SpecAttr.SpecProof"],"name":"Lean.Elab.Tactic.Do.SpecAttr.instBEqSpecProof","className":"BEq"},{"typeNames":["Lean.Elab.Tactic.Do.SpecAttr.SpecProof"],"name":"Lean.Elab.Tactic.Do.SpecAttr.instHashableSpecProof","className":"Hashable"},{"typeNames":["Lean.Elab.Tactic.Do.SpecAttr.SpecProof"],"name":"Lean.Elab.Tactic.Do.SpecAttr.instToMessageDataSpecProof","className":"Lean.ToMessageData"},{"typeNames":["Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem"],"name":"Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecTheorem","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem"],"name":"Lean.Elab.Tactic.Do.SpecAttr.instBEqSpecTheorem","className":"BEq"},{"typeNames":["Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems"],"name":"Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecTheorems","className":"Inhabited"}],"imports":["Lean.Meta","Std.Do.Triple.Basic","Std.Tactic.Do.Syntax"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L234-L235","name":"Lean.Elab.Tactic.Do.SpecAttr.getSpecTheorems","line":234,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.getSpecTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.getSpecTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">getSpecTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L231-L232","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecExtension.getTheorems","line":231,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecExtension.getTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecExtension.getTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecExtension</span>.<span class=\"name\">getTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecExtension\">SpecExtension</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L207-L227","name":"Lean.Elab.Tactic.Do.SpecAttr.mkSpecAttr","line":207,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mkSpecAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mkSpecAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">mkSpecAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecExtension\">SpecExtension</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L205-L205","name":"Lean.Elab.Tactic.Do.SpecAttr.specAttr","line":205,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.specAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.specAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">specAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecExtension\">SpecExtension</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L200-L203","name":"Lean.Elab.Tactic.Do.SpecAttr.mkSpecExt","line":200,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mkSpecExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mkSpecExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">mkSpecExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension.Descr\">SimpleScopedEnvExtension.Descr</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecEntry\">SpecEntry</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L196-L198","name":"Lean.Elab.Tactic.Do.SpecAttr.addSpecTheorem","line":196,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.addSpecTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.addSpecTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">addSpecTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecExtension\">SpecExtension</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrKind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L193-L194","name":"Lean.Elab.Tactic.Do.SpecAttr.addSpecTheoremEntry","line":193,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.addSpecTheoremEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.addSpecTheoremEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">addSpecTheoremEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L189-L191","name":"Lean.Elab.Tactic.Do.SpecAttr.mkSpecTheoremFromStx","line":189,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mkSpecTheoremFromStx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mkSpecTheoremFromStx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">mkSpecTheoremFromStx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L185-L187","name":"Lean.Elab.Tactic.Do.SpecAttr.mkSpecTheoremFromLocal","line":185,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mkSpecTheoremFromLocal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mkSpecTheoremFromLocal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">mkSpecTheoremFromLocal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L176-L183","name":"Lean.Elab.Tactic.Do.SpecAttr.mkSpecTheoremFromConst","line":176,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mkSpecTheoremFromConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mkSpecTheoremFromConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">mkSpecTheoremFromConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L127-L155","name":"Lean.Elab.Tactic.Do.SpecAttr.computeMVarBetaPotentialForSPred","line":127,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.computeMVarBetaPotentialForSPred","doc":"If `σs : List Type`, then `e : SPred σs`.\nReturn the number of times `e` needs to be applied\nin order to assign closed solutions to meta variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.computeMVarBetaPotentialForSPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">computeMVarBetaPotentialForSPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L119-L125","name":"Lean.Elab.Tactic.Do.SpecAttr.simpSPredConfig","line":119,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.simpSPredConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.simpSPredConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">simpSPredConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.ConfigWithKey\">Meta.ConfigWithKey</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L95-L95","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecExtension","line":95,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L92-L93","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.eraseCore","line":92,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.eraseCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.eraseCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorems</span>.<span class=\"name\">eraseCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thmId</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L89-L90","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.isErased","line":89,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.isErased","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.isErased\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorems</span>.<span class=\"name\">isErased</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thmId</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L87-L87","name":"Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecTheorems","line":87,"kind":"instance","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">instInhabitedSpecTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L86-L86","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.erased","line":86,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.erased","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.erased\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorems</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L85-L85","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.specs","line":85,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.specs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.specs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorems</span>.<span class=\"name\">specs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Meta.DiscrTree</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L84-L84","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.mk","line":84,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorems</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">specs</span> : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Meta.DiscrTree</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">erased</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\">SpecTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L84-L87","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems","line":84,"kind":"structure","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L82-L82","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecEntry","line":82,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L80-L80","name":"Lean.Elab.Tactic.Do.SpecAttr.instBEqSpecTheorem","line":80,"kind":"instance","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instBEqSpecTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instBEqSpecTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">instBEqSpecTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L80-L80","name":"Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecTheorem","line":80,"kind":"instance","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">instInhabitedSpecTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L79-L79","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.priority","line":79,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.priority","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.priority\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorem</span>.<span class=\"name\">priority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L78-L78","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.etaPotential","line":78,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.etaPotential","doc":"If `etaPotential` is non-zero, then the precondition contains meta variables that can be\ninstantiated after applying `mintro ∀s` `etaPotential` many times.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.etaPotential\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorem</span>.<span class=\"name\">etaPotential</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L73-L73","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.proof","line":73,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.proof","doc":"The proof for the theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorem</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L71-L71","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.prog","line":71,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.prog","doc":"Expr key tested for matching, in ∀-quantified form.\n`keys = (← mkPath (← forallMetaTelescope prog).2.2)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.prog\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorem</span>.<span class=\"name\">prog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L66-L66","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.keys","line":66,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.keys\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorem</span>.<span class=\"name\">keys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Meta.DiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L65-L65","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.mk","line":65,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">keys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Meta.DiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prog</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">etaPotential </span><span class=\"fn\">priority</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\">SpecTheorem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L65-L80","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem","line":65,"kind":"structure","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L59-L63","name":"Lean.Elab.Tactic.Do.SpecAttr.instToMessageDataSpecProof","line":59,"kind":"instance","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instToMessageDataSpecProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instToMessageDataSpecProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">instToMessageDataSpecProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L47-L57","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecProof.instantiate","line":47,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof.instantiate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof.instantiate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecProof</span>.<span class=\"name\">instantiate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L44-L45","name":"Lean.Elab.Tactic.Do.SpecAttr.instHashableSpecProof","line":44,"kind":"instance","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instHashableSpecProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instHashableSpecProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">instHashableSpecProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L38-L42","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecProof.key","line":38,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof.key","doc":"A unique identifier corresponding to the origin. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof.key\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecProof</span>.<span class=\"name\">key</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L36-L36","name":"Lean.Elab.Tactic.Do.SpecAttr.instBEqSpecProof","line":36,"kind":"instance","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instBEqSpecProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instBEqSpecProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">instBEqSpecProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L36-L36","name":"Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecProof","line":36,"kind":"instance","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.instInhabitedSpecProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">instInhabitedSpecProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L35-L35","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecProof.stx","line":35,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecProof</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L34-L34","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecProof.local","line":34,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof.local","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof.local\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecProof</span>.<span class=\"name\">local</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L33-L33","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecProof.global","line":33,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof.global","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof.global\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecProof</span>.<span class=\"name\">global</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\">SpecProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L32-L36","name":"Lean.Elab.Tactic.Do.SpecAttr.SpecProof","line":32,"kind":"inductive","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.SpecProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">SpecProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L24-L30","name":"Lean.Elab.Tactic.Do.SpecAttr.getSpecSimpTheorems","line":24,"kind":"def","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.getSpecSimpTheorems","doc":"The simp set accumulated by the `@[spec]` attribute.\n(This does not include Hoare triple specs.)\nIt is an implementation detail of the `mvcgen` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.getSpecSimpTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">getSpecSimpTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Meta.SimpTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Elab/Tactic/Do/Attr.lean#L17-L22","name":"Lean.Elab.Tactic.Do.SpecAttr.mvcgenSimpExt","line":17,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mvcgenSimpExt","doc":"This attribute should not be used directly.\nIt is an implementation detail of the `mvcgen` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/Attr.html#Lean.Elab.Tactic.Do.SpecAttr.mvcgenSimpExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">SpecAttr</span>.<span class=\"name\">mvcgenSimpExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Meta.SimpExtension</a></div></div>"}]}