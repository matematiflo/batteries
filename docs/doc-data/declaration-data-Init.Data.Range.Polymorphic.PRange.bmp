{"name":"Init.Data.Range.Polymorphic.PRange","instances":[{"typeNames":["Std.PRange.BoundShape.unbounded"],"name":"Std.PRange.instSupportsLowerBoundUnbounded","className":"Std.PRange.SupportsLowerBound"},{"typeNames":["Std.PRange.BoundShape.unbounded"],"name":"Std.PRange.instSupportsUpperBoundUnbounded","className":"Std.PRange.SupportsUpperBound"},{"typeNames":["Std.PRange.SupportsLowerBound.IsSatisfied"],"name":"Std.PRange.instDecidableRelBoundIsSatisfied","className":"Decidable"},{"typeNames":["Std.PRange.SupportsUpperBound.IsSatisfied"],"name":"Std.PRange.instDecidableRelBoundIsSatisfied_1","className":"Decidable"},{"typeNames":["Std.PRange"],"name":"Std.PRange.instMembershipMkOfSupportsLowerBoundOfSupportsUpperBound","className":"Membership"},{"typeNames":["Membership.mem"],"name":"Std.PRange.instDecidableMemMk","className":"Decidable"},{"typeNames":["Std.PRange.BoundShape.open"],"name":"Std.PRange.instSupportsLowerBoundOpenOfDecidableLT","className":"Std.PRange.SupportsLowerBound"},{"typeNames":["Std.PRange.BoundShape.open"],"name":"Std.PRange.instSupportsUpperBoundOpenOfDecidableLT","className":"Std.PRange.SupportsUpperBound"},{"typeNames":["Std.PRange.BoundShape.closed"],"name":"Std.PRange.instSupportsLowerBoundClosedOfDecidableLE","className":"Std.PRange.SupportsLowerBound"},{"typeNames":["Std.PRange.BoundShape.closed"],"name":"Std.PRange.instSupportsUpperBoundClosedOfDecidableLE","className":"Std.PRange.SupportsUpperBound"},{"typeNames":["Std.PRange.BoundShape.unbounded"],"name":"Std.PRange.instBoundedUpwardEnumerableUnboundedOfLeast?","className":"Std.PRange.BoundedUpwardEnumerable"},{"typeNames":["Std.PRange.BoundShape.open"],"name":"Std.PRange.instBoundedUpwardEnumerableOpenOfUpwardEnumerable","className":"Std.PRange.BoundedUpwardEnumerable"},{"typeNames":["Std.PRange.BoundShape.closed"],"name":"Std.PRange.instBoundedUpwardEnumerableClosed","className":"Std.PRange.BoundedUpwardEnumerable"},{"typeNames":[],"name":"Std.PRange.instLawfulClosedUpperBoundOfLawfulUpwardEnumerableLE","className":"Std.PRange.LawfulClosedUpperBound"},{"typeNames":[],"name":"Std.PRange.instLawfulOpenUpperBoundOfLawfulUpwardEnumerableLT","className":"Std.PRange.LawfulOpenUpperBound"},{"typeNames":[],"name":"Std.PRange.instLawfulUnboundedUpperBoundOfUpwardEnumerable","className":"Std.PRange.LawfulUnboundedUpperBound"}],"imports":["Init.Core","Init.Data.Range.Polymorphic.UpwardEnumerable"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L322-L322","name":"Std.PRange.LawfulClosedOpenIntersection.mem_intersection_iff","line":322,"kind":"theorem","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection.mem_intersection_iff","doc":"The intersection according to `ClosedOpenIntersection shapee α` of two ranges contains exactly\nthose elements that are contained in both ranges.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection.mem_intersection_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedOpenIntersection</span>.<span class=\"name\">mem_intersection_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\">ClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝³</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝⁴</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection\">LawfulClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span>, <span class=\"fn\">upper</span> := <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.intersection\">ClosedOpenIntersection.intersection</a> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L313-L313","name":"Std.PRange.LawfulClosedOpenIntersection.mk","line":313,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedOpenIntersection</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\">ClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem_intersection_iff</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span>, <span class=\"fn\">upper</span> := <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}\n    {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>},\n    <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.intersection\">ClosedOpenIntersection.intersection</a> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection\">LawfulClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L309-L324","name":"Std.PRange.LawfulClosedOpenIntersection","line":309,"kind":"class","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection","doc":"This typeclass ensures that the intersection according to `ClosedOpenIntersection shape α`\nof two ranges contains exactly those elements that are contained in both ranges.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedOpenIntersection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\">ClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L307-L307","name":"Std.PRange.ClosedOpenIntersection.intersection","line":307,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.intersection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.intersection\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">ClosedOpenIntersection</span>.<span class=\"name\">intersection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\">ClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span> →\n    <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L306-L306","name":"Std.PRange.ClosedOpenIntersection.mk","line":306,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">ClosedOpenIntersection</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">intersection</span> :\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span> →\n      <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\">ClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L300-L307","name":"Std.PRange.ClosedOpenIntersection","line":300,"kind":"class","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection","doc":"This typeclass allows taking the intersection of ranges of the given shape and half-open ranges.\n\nAn element should be contained in the intersection if and only if it is contained in both ranges.\nThis is encoded in `LawfulClosedOpenIntersection`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">ClosedOpenIntersection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L297-L298","name":"Std.PRange.instLawfulUnboundedUpperBoundOfUpwardEnumerable","line":297,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulUnboundedUpperBoundOfUpwardEnumerable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulUnboundedUpperBoundOfUpwardEnumerable\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instLawfulUnboundedUpperBoundOfUpwardEnumerable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound\">LawfulUnboundedUpperBound</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L293-L295","name":"Std.PRange.instLawfulOpenUpperBoundOfLawfulUpwardEnumerableLT","line":293,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulOpenUpperBoundOfLawfulUpwardEnumerableLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulOpenUpperBoundOfLawfulUpwardEnumerableLT\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instLawfulOpenUpperBoundOfLawfulUpwardEnumerableLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">LawfulUpwardEnumerableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\">LawfulOpenUpperBound</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L289-L291","name":"Std.PRange.instLawfulClosedUpperBoundOfLawfulUpwardEnumerableLE","line":289,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulClosedUpperBoundOfLawfulUpwardEnumerableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulClosedUpperBoundOfLawfulUpwardEnumerableLE\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instLawfulClosedUpperBoundOfLawfulUpwardEnumerableLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound\">LawfulClosedUpperBound</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L286-L287","name":"Std.PRange.instBoundedUpwardEnumerableClosed","line":286,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableClosed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableClosed\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instBoundedUpwardEnumerableClosed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L283-L284","name":"Std.PRange.instBoundedUpwardEnumerableOpenOfUpwardEnumerable","line":283,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableOpenOfUpwardEnumerable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableOpenOfUpwardEnumerable\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instBoundedUpwardEnumerableOpenOfUpwardEnumerable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L280-L281","name":"Std.PRange.instBoundedUpwardEnumerableUnboundedOfLeast?","line":280,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableUnboundedOfLeast?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableUnboundedOfLeast?\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instBoundedUpwardEnumerableUnboundedOfLeast?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.Least?\">Least?</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L277-L278","name":"Std.PRange.instSupportsUpperBoundClosedOfDecidableLE","line":277,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundClosedOfDecidableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundClosedOfDecidableLE\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsUpperBoundClosedOfDecidableLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L274-L275","name":"Std.PRange.instSupportsLowerBoundClosedOfDecidableLE","line":274,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundClosedOfDecidableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundClosedOfDecidableLE\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsLowerBoundClosedOfDecidableLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L271-L272","name":"Std.PRange.instSupportsUpperBoundOpenOfDecidableLT","line":271,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundOpenOfDecidableLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundOpenOfDecidableLT\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsUpperBoundOpenOfDecidableLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L268-L269","name":"Std.PRange.instSupportsLowerBoundOpenOfDecidableLT","line":268,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundOpenOfDecidableLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundOpenOfDecidableLT\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsLowerBoundOpenOfDecidableLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L265-L265","name":"Std.PRange.LawfulUnboundedUpperBound.isSatisfied","line":265,"kind":"theorem","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound.isSatisfied","doc":"An unbounded upper bound is satisfied for every element.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound.isSatisfied\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUnboundedUpperBound</span>.<span class=\"name\">isSatisfied</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound\">LawfulUnboundedUpperBound</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L261-L261","name":"Std.PRange.LawfulUnboundedUpperBound.mk","line":261,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUnboundedUpperBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSatisfied</span> : <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound\">LawfulUnboundedUpperBound</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L257-L266","name":"Std.PRange.LawfulUnboundedUpperBound","line":257,"kind":"class","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound","doc":"This typeclass ensures that according to `SupportsUpperBound .unbounded α`, every element is\nin bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUnboundedUpperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L254-L254","name":"Std.PRange.LawfulOpenUpperBound.isSatisfied_iff_le","line":254,"kind":"theorem","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound.isSatisfied_iff_le","doc":"An open upper bound is satisfied for `a` if and only if it is greater than to `a`\naccording to `UpwardEnumerable.LT`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound.isSatisfied_iff_le\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulOpenUpperBound</span>.<span class=\"name\">isSatisfied_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\">LawfulOpenUpperBound</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">UpwardEnumerable.LT</a> <span class=\"fn\">a</span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L248-L248","name":"Std.PRange.LawfulOpenUpperBound.mk","line":248,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulOpenUpperBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSatisfied_iff_le</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">UpwardEnumerable.LT</a> <span class=\"fn\">a</span> <span class=\"fn\">u</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\">LawfulOpenUpperBound</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L244-L255","name":"Std.PRange.LawfulOpenUpperBound","line":244,"kind":"class","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound","doc":"This typeclass ensures that `SupportsUpperBound .open α` and `UpwardEnumerable α` instances\nare compatible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulOpenUpperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L241-L241","name":"Std.PRange.LawfulClosedUpperBound.isSatisfied_iff_le","line":241,"kind":"theorem","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound.isSatisfied_iff_le","doc":"A closed upper bound is satisfied for `a` if and only if it is greater than or equal to `a`\naccording to `UpwardEnumerable.LE`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound.isSatisfied_iff_le\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedUpperBound</span>.<span class=\"name\">isSatisfied_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound\">LawfulClosedUpperBound</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">a</span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L235-L235","name":"Std.PRange.LawfulClosedUpperBound.mk","line":235,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedUpperBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSatisfied_iff_le</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">a</span> <span class=\"fn\">u</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound\">LawfulClosedUpperBound</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L231-L242","name":"Std.PRange.LawfulClosedUpperBound","line":231,"kind":"class","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound","doc":"This typeclass ensures that `SupportsUpperBound .closed α` and `UpwardEnumerable α` instances\nare compatible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedUpperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L221-L229","name":"Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_of_le","line":221,"kind":"theorem","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_of_le\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableLowerBound</span>.<span class=\"name\">isSatisfied_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">SupportsLowerBound.IsSatisfied</a> <span class=\"fn\">l</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hle</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">SupportsLowerBound.IsSatisfied</a> <span class=\"fn\">l</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L218-L218","name":"Std.PRange.LawfulUpwardEnumerableUpperBound.isSatisfied_of_le","line":218,"kind":"theorem","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound.isSatisfied_of_le","doc":"If `b` is a transitive successor of `a` and `b` satisfies a certain upper bound, then\n`a` also satisfies the upper bound.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound.isSatisfied_of_le\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableUpperBound</span>.<span class=\"name\">isSatisfied_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L213-L213","name":"Std.PRange.LawfulUpwardEnumerableUpperBound.mk","line":213,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableUpperBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSatisfied_of_le</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L209-L219","name":"Std.PRange.LawfulUpwardEnumerableUpperBound","line":209,"kind":"class","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound","doc":"This typeclass ensures that if `b` is a transitive successor of `a` and `b` satisfies an upper bound\nof the given shape, then `a` also satisfies the upper bound.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableUpperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L205-L205","name":"Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_iff","line":205,"kind":"theorem","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_iff","doc":"An element `a` satisfies the lower bound `l` if and only if it is\n`BoundedUpwardEnumerable.init? l` or one of its transitive successors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableLowerBound</span>.<span class=\"name\">isSatisfied_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">SupportsLowerBound.IsSatisfied</a> <span class=\"fn\">l</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">init</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">BoundedUpwardEnumerable.init?</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">init</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L199-L199","name":"Std.PRange.LawfulUpwardEnumerableLowerBound.mk","line":199,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableLowerBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSatisfied_iff</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">SupportsLowerBound.IsSatisfied</a> <span class=\"fn\">l</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>       <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">init</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">BoundedUpwardEnumerable.init?</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">init</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L195-L207","name":"Std.PRange.LawfulUpwardEnumerableLowerBound","line":195,"kind":"class","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound","doc":"This typeclass ensures that the lower bound predicate from `SupportsLowerBound sl α`\ncan be characterized in terms of `UpwardEnumerable α` and `BoundedUpwardEnumerable sl α`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableLowerBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L193-L193","name":"Std.PRange.BoundedUpwardEnumerable.init?","line":193,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundedUpwardEnumerable</span>.<span class=\"name\">init?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lowerBoundShape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">lowerBoundShape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">lowerBoundShape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L192-L192","name":"Std.PRange.BoundedUpwardEnumerable.mk","line":192,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundedUpwardEnumerable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lowerBoundShape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init?</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">lowerBoundShape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">lowerBoundShape</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L182-L193","name":"Std.PRange.BoundedUpwardEnumerable","line":182,"kind":"class","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable","doc":"This typeclass will usually be used together with `UpwardEnumerable α`. It provides the starting\npoint from which to enumerate all the values above the given lower bound.\n\nInstances are automatically generated in the following cases:\n\n* `lowerBoundShape` is `.closed`\n* `lowerBoundShape` is `.open` and there is an `UpwardEnumerable α` instance\n* `lowerBoundShape` is `.unbounded` and there is a `Least? α` instance\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundedUpwardEnumerable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lowerBoundShape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L179-L179","name":"Std.PRange.HasFiniteRanges.mem_of_satisfiesUpperBound","line":179,"kind":"theorem","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges.mem_of_satisfiesUpperBound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges.mem_of_satisfiesUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">HasFiniteRanges</span>.<span class=\"name\">mem_of_satisfiesUpperBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">enumeration</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">enumeration</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L178-L178","name":"Std.PRange.HasFiniteRanges.mk","line":178,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">HasFiniteRanges</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem_of_satisfiesUpperBound</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>), <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">enumeration</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">enumeration</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L174-L180","name":"Std.PRange.HasFiniteRanges","line":174,"kind":"class","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges","doc":"This typeclass ensures that ranges with the given shape of upper bounds are always finite.\nThis is a prerequisite for many functions and instances, such as `PRange.toList` or `ForIn'`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">HasFiniteRanges</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L170-L172","name":"Std.PRange.instDecidableMemMk","line":170,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableMemMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableMemMk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instDecidableMemMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L166-L168","name":"Std.PRange.instMembershipMkOfSupportsLowerBoundOfSupportsUpperBound","line":166,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instMembershipMkOfSupportsLowerBoundOfSupportsUpperBound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instMembershipMkOfSupportsLowerBoundOfSupportsUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instMembershipMkOfSupportsLowerBoundOfSupportsUpperBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L163-L164","name":"Std.PRange.instDecidableRelBoundIsSatisfied_1","line":163,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableRelBoundIsSatisfied_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableRelBoundIsSatisfied_1\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instDecidableRelBoundIsSatisfied_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L160-L161","name":"Std.PRange.instDecidableRelBoundIsSatisfied","line":160,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableRelBoundIsSatisfied","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableRelBoundIsSatisfied\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instDecidableRelBoundIsSatisfied</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">SupportsLowerBound.IsSatisfied</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L157-L158","name":"Std.PRange.instSupportsUpperBoundUnbounded","line":157,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundUnbounded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundUnbounded\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsUpperBoundUnbounded</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L155-L155","name":"Std.PRange.SupportsUpperBound.decidableSatisfiesUpperBound","line":155,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.decidableSatisfiesUpperBound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.decidableSatisfiesUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsUpperBound</span>.<span class=\"name\">decidableSatisfiesUpperBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">IsSatisfied</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L154-L154","name":"Std.PRange.SupportsUpperBound.IsSatisfied","line":154,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsUpperBound</span>.<span class=\"name\">IsSatisfied</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L153-L153","name":"Std.PRange.SupportsUpperBound.mk","line":153,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsUpperBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IsSatisfied</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decidableSatisfiesUpperBound</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">IsSatisfied</span></span> := by infer_instance)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L144-L155","name":"Std.PRange.SupportsUpperBound","line":144,"kind":"class","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound","doc":"This typeclass provides decidable upper bound checks of the given shape.\n\nInstances are automatically provided in the following cases:\n\n* `shape` is `open` and there is an `LT α` instance\n* `shape` is `closed` and there is an `LE α` instance\n* `shape` is `.unbounded`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsUpperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L141-L142","name":"Std.PRange.instSupportsLowerBoundUnbounded","line":141,"kind":"instance","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundUnbounded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundUnbounded\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsLowerBoundUnbounded</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L139-L139","name":"Std.PRange.SupportsLowerBound.decidableSatisfiesLowerBound","line":139,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.decidableSatisfiesLowerBound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.decidableSatisfiesLowerBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsLowerBound</span>.<span class=\"name\">decidableSatisfiesLowerBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">IsSatisfied</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L138-L138","name":"Std.PRange.SupportsLowerBound.IsSatisfied","line":138,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsLowerBound</span>.<span class=\"name\">IsSatisfied</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L137-L137","name":"Std.PRange.SupportsLowerBound.mk","line":137,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsLowerBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IsSatisfied</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decidableSatisfiesLowerBound</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">IsSatisfied</span></span> := by infer_instance)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L128-L139","name":"Std.PRange.SupportsLowerBound","line":128,"kind":"class","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound","doc":"This typeclass provides decidable lower bound checks of the given shape.\n\nInstances are automatically provided in the following cases:\n\n* `shape` is `open` and there is an `LT α` instance\n* `shape` is `closed` and there is an `LE α` instance\n* `shape` is `.unbounded`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsLowerBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L108-L112","name":"Std.PRange.«term_<...=_»","line":108,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_<...=_»","doc":"`a<...=b` is the range of elements greater than `a` and less than or equal to `b`.\nSee also `Std.PRange`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_&lt;...=_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_&lt;</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L106-L107","name":"Std.PRange.«term*...=_»","line":106,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...=_»","doc":"`*...=b` is the range of elements less than or equal to `b`. See also `Std.PRange`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...=_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term*</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L101-L105","name":"Std.PRange.«term_...=_»","line":101,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...=_»","doc":"`a...=b` is the range of elements greater than or equal to `a` and less than or equal to `b`.\nSee also `Std.PRange`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...=_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L96-L100","name":"Std.PRange.«term_<..._»","line":96,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_<..._»","doc":"`a<...b` is the range of elements greater than `a` and less than `b`.\nSee also `Std.PRange`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_&lt;..._»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_&lt;</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L91-L95","name":"Std.PRange.«term_<...<_»","line":91,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_<...<_»","doc":"`a<...<b` is the range of elements greater than `a` and less than `b`.\nSee also `Std.PRange`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_&lt;...&lt;_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_&lt;</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">&lt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L89-L90","name":"Std.PRange.«term*..._»","line":89,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*..._»","doc":"`*...b` is the range of elements less than `b`. See also `Std.PRange`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*..._»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term*</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L87-L88","name":"Std.PRange.«term*...<_»","line":87,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...<_»","doc":"`*...<b` is the range of elements less than `b`. See also `Std.PRange`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...&lt;_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term*</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">&lt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L82-L86","name":"Std.PRange.«term_..._»","line":82,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_..._»","doc":"`a...b` is the range of elements greater than or equal to `a` and less than `b`.\nSee also `Std.PRange`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_..._»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L77-L81","name":"Std.PRange.«term_...<_»","line":77,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...<_»","doc":"`a...<b` is the range of elements greater than or equal to `a` and less than `b`.\nSee also `Std.PRange`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...&lt;_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">&lt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L75-L76","name":"Std.PRange.«term_<...*»","line":75,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_<...*»","doc":"`a<...*` is the range of elements greater than `a`. See also `Std.PRange`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_&lt;...*»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_&lt;</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">*»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L73-L74","name":"Std.PRange.«term*...*»","line":73,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...*»","doc":"`*...*` is the range that is unbounded in both directions. See also `Std.PRange`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...*»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term*</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">*»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L71-L72","name":"Std.PRange.«term_...*»","line":71,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...*»","doc":"`a...*` is the range of elements greater than or equal to `a`. See also `Std.PRange`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...*»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">*»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L69-L69","name":"Std.PRange.upper","line":69,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper","doc":"The upper bound of the range. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">upper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L67-L67","name":"Std.PRange.lower","line":67,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower","doc":"The lower bound of the range. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">lower</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L65-L65","name":"Std.PRange.mk","line":65,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lower</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">upper</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L51-L69","name":"Std.PRange","line":51,"kind":"structure","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange","doc":"A range of elements of some type `α`. It is characterized by its upper and lower bounds, which\nmay be inclusive, exclusive or absent.\n\n* `a...=b` is the range of elements greater than or equal to `a` and less than or equal to `b`.\n* `a<...=b` is the range of elements greater than `a` and less than or equal to `b`.\n* `a...b` or `a...<b` is the range of elements greater than or equal to `a` and less than `b`.\n* `a<...b` or `a<...<b` is the range of elements greater than `a` and less than `b`.\n* `*...=b` is the range of elements less than or equal to `b`.\n* `*...b` or `*...<b` is the range of elements less than `b`.\n* `a...*` is the range of elements greater than or equal to `a`.\n* `a<...*` is the range of elements greater than `a`.\n* `*...*` contains all elements of `α`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">PRange.RangeShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L43-L49","name":"Std.PRange.Bound","line":43,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound","doc":"An upper or lower bound in `α` of the given shape.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Bound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L41-L41","name":"Std.PRange.RangeShape.upper","line":41,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper","doc":"The shape of the range's upper bound. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeShape</span>.<span class=\"name\">upper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L39-L39","name":"Std.PRange.RangeShape.lower","line":39,"kind":"def","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower","doc":"The shape of the range's lower bound. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeShape</span>.<span class=\"name\">lower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L37-L37","name":"Std.PRange.RangeShape.mk","line":37,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeShape</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lower </span><span class=\"fn\">upper</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L36-L41","name":"Std.PRange.RangeShape","line":36,"kind":"structure","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape","doc":"The shape of a range, consisting of the shape of its upper and lower bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeShape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L30-L34","name":"Std.PRange.BoundShape.unbounded","line":30,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded","doc":"This bound shape signifies the absence of a range bound, so that the range is unbounded in at\nleast one direction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundShape</span>.<span class=\"name\">unbounded</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L25-L29","name":"Std.PRange.BoundShape.closed","line":25,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed","doc":"A closed upper (or lower) bound of this shape requires elements of a range to be less than or equal\n(or greater than or equal) to the bound.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundShape</span>.<span class=\"name\">closed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L20-L24","name":"Std.PRange.BoundShape.open","line":20,"kind":"ctor","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open","doc":"An open upper (or lower) bound of this shape requires elements of a range to be less than\n(or greater than) the bound, excluding the bound itself.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundShape</span>.<span class=\"name\">open</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/Range/Polymorphic/PRange.lean#L16-L34","name":"Std.PRange.BoundShape","line":16,"kind":"inductive","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape","doc":"The shape of a range's upper or lower bound: `open`, `closed` or `unbounded`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundShape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}