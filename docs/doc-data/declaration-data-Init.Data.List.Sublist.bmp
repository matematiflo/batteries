{"name":"Init.Data.List.Sublist","instances":[{"typeNames":["Membership.mem","Membership.mem"],"name":"List.instTransSubsetMem","className":"Trans"},{"typeNames":["HasSubset.Subset","HasSubset.Subset","HasSubset.Subset"],"name":"List.instTransSubset","className":"Trans"},{"typeNames":["List.Sublist","List.Sublist","List.Sublist"],"name":"List.instTransSublist","className":"Trans"},{"typeNames":["List.Sublist","HasSubset.Subset","HasSubset.Subset"],"name":"List.instTransSublistSubset","className":"Trans"},{"typeNames":["HasSubset.Subset","List.Sublist","HasSubset.Subset"],"name":"List.instTransSubsetSublist","className":"Trans"},{"typeNames":["Membership.mem","Membership.mem"],"name":"List.instTransSublistMem","className":"Trans"},{"typeNames":["List.Sublist"],"name":"List.instDecidableSublistOfDecidableEq","className":"Decidable"},{"typeNames":["List.IsPrefix"],"name":"List.instDecidableIsPrefixOfDecidableEq","className":"Decidable"},{"typeNames":["List.IsSuffix"],"name":"List.instDecidableIsSuffixOfDecidableEq","className":"Decidable"}],"imports":["Init.Data.List.TakeDrop"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1268-L1270","name":"List.prefix_iff_eq_take","line":1268,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_iff_eq_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_iff_eq_take\"><span class=\"name\">List</span>.<span class=\"name\">prefix_iff_eq_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1265-L1266","name":"List.prefix_iff_eq_append","line":1265,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_iff_eq_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_iff_eq_append\"><span class=\"name\">List</span>.<span class=\"name\">prefix_iff_eq_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1262-L1263","name":"List.instDecidableIsSuffixOfDecidableEq","line":1262,"kind":"instance","docLink":"./Init/Data/List/Sublist.html#List.instDecidableIsSuffixOfDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.instDecidableIsSuffixOfDecidableEq\"><span class=\"name\">List</span>.<span class=\"name\">instDecidableIsSuffixOfDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1258-L1260","name":"List.isSuffixOf_iff_suffix","line":1258,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.isSuffixOf_iff_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isSuffixOf_iff_suffix\"><span class=\"name\">List</span>.<span class=\"name\">isSuffixOf_iff_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.isSuffixOf\">isSuffixOf</a></span> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1255-L1256","name":"List.instDecidableIsPrefixOfDecidableEq","line":1255,"kind":"instance","docLink":"./Init/Data/List/Sublist.html#List.instDecidableIsPrefixOfDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.instDecidableIsPrefixOfDecidableEq\"><span class=\"name\">List</span>.<span class=\"name\">instDecidableIsPrefixOfDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1246-L1253","name":"List.isPrefixOf_iff_prefix","line":1246,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.isPrefixOf_iff_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isPrefixOf_iff_prefix\"><span class=\"name\">List</span>.<span class=\"name\">isPrefixOf_iff_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.isPrefixOf\">isPrefixOf</a></span> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1238-L1241","name":"List.IsInfix.filterMap","line":1238,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.filterMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.filterMap\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">List.filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">List.filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1230-L1233","name":"List.IsSuffix.filterMap","line":1230,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.filterMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.filterMap\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">List.filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">List.filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1222-L1225","name":"List.IsPrefix.filterMap","line":1222,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.filterMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.filterMap\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">List.filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">List.filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1214-L1217","name":"List.IsInfix.filter","line":1214,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.filter\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1206-L1209","name":"List.IsSuffix.filter","line":1206,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.filter\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1198-L1201","name":"List.IsPrefix.filter","line":1198,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.filter\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1191-L1193","name":"List.IsInfix.map","line":1191,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.map\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1184-L1186","name":"List.IsSuffix.map","line":1184,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.map\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1177-L1179","name":"List.IsPrefix.map","line":1177,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.map\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1175-L1175","name":"List.tail_suffix","line":1175,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.tail_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.tail_suffix\"><span class=\"name\">List</span>.<span class=\"name\">tail_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1172-L1173","name":"List.dropLast_subset","line":1172,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.dropLast_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.dropLast_subset\"><span class=\"name\">List</span>.<span class=\"name\">dropLast_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.dropLast\">dropLast</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1169-L1170","name":"List.dropLast_sublist","line":1169,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.dropLast_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.dropLast_sublist\"><span class=\"name\">List</span>.<span class=\"name\">dropLast_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.dropLast\">dropLast</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1165-L1167","name":"List.dropLast_prefix","line":1165,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.dropLast_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.dropLast_prefix\"><span class=\"name\">List</span>.<span class=\"name\">dropLast_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.dropLast\">dropLast</a></span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1162-L1163","name":"List.dropWhile_subset","line":1162,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.dropWhile_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.dropWhile_subset\"><span class=\"name\">List</span>.<span class=\"name\">dropWhile_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1159-L1160","name":"List.takeWhile_subset","line":1159,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.takeWhile_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.takeWhile_subset\"><span class=\"name\">List</span>.<span class=\"name\">takeWhile_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1156-L1157","name":"List.dropWhile_sublist","line":1156,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.dropWhile_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.dropWhile_sublist\"><span class=\"name\">List</span>.<span class=\"name\">dropWhile_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.dropWhile\">dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1153-L1154","name":"List.takeWhile_sublist","line":1153,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.takeWhile_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.takeWhile_sublist\"><span class=\"name\">List</span>.<span class=\"name\">takeWhile_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1150-L1151","name":"List.dropWhile_suffix","line":1150,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.dropWhile_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.dropWhile_suffix\"><span class=\"name\">List</span>.<span class=\"name\">dropWhile_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1147-L1148","name":"List.takeWhile_prefix","line":1147,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.takeWhile_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.takeWhile_prefix\"><span class=\"name\">List</span>.<span class=\"name\">takeWhile_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1144-L1145","name":"List.drop_subset_drop_left","line":1144,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.drop_subset_drop_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.drop_subset_drop_left\"><span class=\"name\">List</span>.<span class=\"name\">drop_subset_drop_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">j</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1141-L1142","name":"List.drop_sublist_drop_left","line":1141,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.drop_sublist_drop_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.drop_sublist_drop_left\"><span class=\"name\">List</span>.<span class=\"name\">drop_sublist_drop_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">j</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1135-L1137","name":"List.drop_suffix_drop_left","line":1135,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.drop_suffix_drop_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.drop_suffix_drop_left\"><span class=\"name\">List</span>.<span class=\"name\">drop_suffix_drop_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">j</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1132-L1133","name":"List.mem_of_mem_drop","line":1132,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.mem_of_mem_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.mem_of_mem_drop\"><span class=\"name\">List</span>.<span class=\"name\">mem_of_mem_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1129-L1130","name":"List.mem_of_mem_take","line":1129,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.mem_of_mem_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.mem_of_mem_take\"><span class=\"name\">List</span>.<span class=\"name\">mem_of_mem_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1126-L1127","name":"List.drop_subset","line":1126,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.drop_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.drop_subset\"><span class=\"name\">List</span>.<span class=\"name\">drop_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1123-L1124","name":"List.take_subset","line":1123,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.take_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.take_subset\"><span class=\"name\">List</span>.<span class=\"name\">take_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1120-L1121","name":"List.drop_sublist","line":1120,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.drop_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.drop_sublist\"><span class=\"name\">List</span>.<span class=\"name\">drop_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1117-L1118","name":"List.take_sublist","line":1117,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.take_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.take_sublist\"><span class=\"name\">List</span>.<span class=\"name\">take_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1114-L1115","name":"List.drop_suffix","line":1114,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.drop_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.drop_suffix\"><span class=\"name\">List</span>.<span class=\"name\">drop_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1111-L1112","name":"List.take_prefix","line":1111,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.take_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.take_prefix\"><span class=\"name\">List</span>.<span class=\"name\">take_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1108-L1109","name":"List.prefix_cons_inj","line":1108,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_cons_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_cons_inj\"><span class=\"name\">List</span>.<span class=\"name\">prefix_cons_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1105-L1106","name":"List.prefix_append_right_inj","line":1105,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_append_right_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_append_right_inj\"><span class=\"name\">List</span>.<span class=\"name\">prefix_append_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1098-L1103","name":"List.infix_of_mem_flatten","line":1098,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_of_mem_flatten","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_of_mem_flatten\"><span class=\"name\">List</span>.<span class=\"name\">infix_of_mem_flatten</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">L</span> → <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1095-L1096","name":"List.isInfix_replicate_iff","line":1095,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isInfix_replicate_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isInfix_replicate_iff\"><span class=\"name\">List</span>.<span class=\"name\">isInfix_replicate_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1083-L1093","name":"List.infix_replicate_iff","line":1083,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_replicate_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_replicate_iff\"><span class=\"name\">List</span>.<span class=\"name\">infix_replicate_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1080-L1081","name":"List.isSuffix_replicate_iff","line":1080,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isSuffix_replicate_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isSuffix_replicate_iff\"><span class=\"name\">List</span>.<span class=\"name\">isSuffix_replicate_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1075-L1078","name":"List.suffix_replicate_iff","line":1075,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_replicate_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_replicate_iff\"><span class=\"name\">List</span>.<span class=\"name\">suffix_replicate_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1072-L1073","name":"List.isPrefix_replicate_iff","line":1072,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isPrefix_replicate_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isPrefix_replicate_iff\"><span class=\"name\">List</span>.<span class=\"name\">isPrefix_replicate_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1060-L1070","name":"List.prefix_replicate_iff","line":1060,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_replicate_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_replicate_iff\"><span class=\"name\">List</span>.<span class=\"name\">prefix_replicate_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1057-L1058","name":"List.isInfix_map_iff","line":1057,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isInfix_map_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isInfix_map_iff\"><span class=\"name\">List</span>.<span class=\"name\">isInfix_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1053-L1055","name":"List.infix_map_iff","line":1053,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_map_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_map_iff\"><span class=\"name\">List</span>.<span class=\"name\">infix_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1050-L1051","name":"List.isSuffix_map_iff","line":1050,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isSuffix_map_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isSuffix_map_iff\"><span class=\"name\">List</span>.<span class=\"name\">isSuffix_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1046-L1048","name":"List.suffix_map_iff","line":1046,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_map_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_map_iff\"><span class=\"name\">List</span>.<span class=\"name\">suffix_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1043-L1044","name":"List.isPrefix_map_iff","line":1043,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isPrefix_map_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isPrefix_map_iff\"><span class=\"name\">List</span>.<span class=\"name\">isPrefix_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1039-L1041","name":"List.prefix_map_iff","line":1039,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_map_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_map_iff\"><span class=\"name\">List</span>.<span class=\"name\">prefix_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1036-L1037","name":"List.isInfix_filter_iff","line":1036,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isInfix_filter_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isInfix_filter_iff\"><span class=\"name\">List</span>.<span class=\"name\">isInfix_filter_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1032-L1034","name":"List.infix_filter_iff","line":1032,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_filter_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_filter_iff\"><span class=\"name\">List</span>.<span class=\"name\">infix_filter_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1029-L1030","name":"List.isSuffix_filter_iff","line":1029,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isSuffix_filter_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isSuffix_filter_iff\"><span class=\"name\">List</span>.<span class=\"name\">isSuffix_filter_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1025-L1027","name":"List.suffix_filter_iff","line":1025,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_filter_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_filter_iff\"><span class=\"name\">List</span>.<span class=\"name\">suffix_filter_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1022-L1023","name":"List.isPrefix_filter_iff","line":1022,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isPrefix_filter_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isPrefix_filter_iff\"><span class=\"name\">List</span>.<span class=\"name\">isPrefix_filter_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1018-L1020","name":"List.prefix_filter_iff","line":1018,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_filter_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_filter_iff\"><span class=\"name\">List</span>.<span class=\"name\">prefix_filter_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1015-L1016","name":"List.isInfix_filterMap_iff","line":1015,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isInfix_filterMap_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isInfix_filterMap_iff\"><span class=\"name\">List</span>.<span class=\"name\">isInfix_filterMap_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1006-L1013","name":"List.infix_filterMap_iff","line":1006,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_filterMap_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_filterMap_iff\"><span class=\"name\">List</span>.<span class=\"name\">infix_filterMap_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L1003-L1004","name":"List.isSuffix_filterMap_iff","line":1003,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isSuffix_filterMap_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isSuffix_filterMap_iff\"><span class=\"name\">List</span>.<span class=\"name\">isSuffix_filterMap_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L994-L1001","name":"List.suffix_filterMap_iff","line":994,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_filterMap_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_filterMap_iff\"><span class=\"name\">List</span>.<span class=\"name\">suffix_filterMap_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L991-L992","name":"List.isPrefix_filterMap_iff","line":991,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isPrefix_filterMap_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isPrefix_filterMap_iff\"><span class=\"name\">List</span>.<span class=\"name\">isPrefix_filterMap_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L982-L989","name":"List.prefix_filterMap_iff","line":982,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_filterMap_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_filterMap_iff\"><span class=\"name\">List</span>.<span class=\"name\">prefix_filterMap_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L976-L980","name":"List.cons_prefix_iff","line":976,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.cons_prefix_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.cons_prefix_iff\"><span class=\"name\">List</span>.<span class=\"name\">cons_prefix_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l'</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L973-L974","name":"List.isPrefix_iff_getElem","line":973,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isPrefix_iff_getElem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isPrefix_iff_getElem\"><span class=\"name\">List</span>.<span class=\"name\">isPrefix_iff_getElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hx</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>), <span class=\"fn\">l₁</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L955-L971","name":"List.prefix_iff_getElem","line":955,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_iff_getElem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_iff_getElem\"><span class=\"name\">List</span>.<span class=\"name\">prefix_iff_getElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hx</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>), <span class=\"fn\">l₁</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L952-L953","name":"List.isPrefix_iff","line":952,"kind":"def","docLink":"./Init/Data/List/Sublist.html#List.isPrefix_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isPrefix_iff\"><span class=\"name\">List</span>.<span class=\"name\">isPrefix_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>), <span class=\"fn\">l₂</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">l₁</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L937-L948","name":"List.prefix_iff_getElem?","line":937,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_iff_getElem?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_iff_getElem?\"><span class=\"name\">List</span>.<span class=\"name\">prefix_iff_getElem?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>), <span class=\"fn\">l₂</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">l₁</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L932-L935","name":"List.infix_concat_iff","line":932,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_concat_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_concat_iff\"><span class=\"name\">List</span>.<span class=\"name\">infix_concat_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L921-L930","name":"List.suffix_concat_iff","line":921,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_concat_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_concat_iff\"><span class=\"name\">List</span>.<span class=\"name\">suffix_concat_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">t</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">t</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L916-L919","name":"List.prefix_concat_iff","line":916,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_concat_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_concat_iff\"><span class=\"name\">List</span>.<span class=\"name\">prefix_concat_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L905-L914","name":"List.infix_cons_iff","line":905,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_cons_iff\"><span class=\"name\">List</span>.<span class=\"name\">infix_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L894-L903","name":"List.suffix_cons_iff","line":894,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_cons_iff\"><span class=\"name\">List</span>.<span class=\"name\">suffix_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L886-L892","name":"List.cons_prefix_cons","line":886,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.cons_prefix_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.cons_prefix_cons\"><span class=\"name\">List</span>.<span class=\"name\">cons_prefix_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L872-L884","name":"List.prefix_cons_iff","line":872,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_cons_iff\"><span class=\"name\">List</span>.<span class=\"name\">prefix_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">t</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">t</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L868-L870","name":"List.suffix_or_suffix_of_suffix","line":868,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_or_suffix_of_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_or_suffix_of_suffix\"><span class=\"name\">List</span>.<span class=\"name\">suffix_or_suffix_of_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₃ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₃</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₃</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₁</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L863-L866","name":"List.suffix_of_suffix_length_le","line":863,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_of_suffix_length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_of_suffix_length_le\"><span class=\"name\">List</span>.<span class=\"name\">suffix_of_suffix_length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₃ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₃</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₃</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ll</span> : <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L859-L861","name":"List.prefix_or_prefix_of_prefix","line":859,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_or_prefix_of_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_or_prefix_of_prefix\"><span class=\"name\">List</span>.<span class=\"name\">prefix_or_prefix_of_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₃ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₃</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₃</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₁</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L851-L857","name":"List.prefix_of_prefix_length_le","line":851,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_of_prefix_length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_of_prefix_length_le\"><span class=\"name\">List</span>.<span class=\"name\">prefix_of_prefix_length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₃</span> → <span class=\"fn\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₃</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L848-L849","name":"List.IsSuffix.eq_of_length_le","line":848,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.eq_of_length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.eq_of_length_le\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">eq_of_length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L845-L846","name":"List.IsSuffix.eq_of_length","line":845,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.eq_of_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.eq_of_length\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">eq_of_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L842-L843","name":"List.IsPrefix.eq_of_length_le","line":842,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.eq_of_length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.eq_of_length_le\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">eq_of_length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L839-L840","name":"List.IsPrefix.eq_of_length","line":839,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.eq_of_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.eq_of_length\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">eq_of_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L836-L837","name":"List.IsInfix.eq_of_length_le","line":836,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.eq_of_length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.eq_of_length_le\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">eq_of_length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L833-L834","name":"List.IsInfix.eq_of_length","line":833,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.eq_of_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.eq_of_length\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">eq_of_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L829-L831","name":"List.infix_iff_suffix_prefix","line":829,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_iff_suffix_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_iff_suffix_prefix\"><span class=\"name\">List</span>.<span class=\"name\">infix_iff_suffix_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">t</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">t</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L825-L827","name":"List.infix_iff_prefix_suffix","line":825,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_iff_prefix_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_iff_prefix_suffix\"><span class=\"name\">List</span>.<span class=\"name\">infix_iff_prefix_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">t</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">t</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L823-L823","name":"List.prefix_concat","line":823,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_concat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_concat\"><span class=\"name\">List</span>.<span class=\"name\">prefix_concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.concat\">concat</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L818-L821","name":"List.IsSuffix.getLast","line":818,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.getLast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.getLast\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">getLast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">hx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L813-L816","name":"List.IsPrefix.head","line":813,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.head","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.head\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.head\">head</a></span> <span class=\"fn\">hx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.head\">head</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L807-L808","name":"List.IsPrefix.reverse","line":807,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.reverse\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> → <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L801-L802","name":"List.IsSuffix.reverse","line":801,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.reverse\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span> → <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L795-L796","name":"List.IsInfix.reverse","line":795,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.reverse\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span> → <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L789-L793","name":"List.reverse_infix","line":789,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.reverse_infix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.reverse_infix\"><span class=\"name\">List</span>.<span class=\"name\">reverse_infix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L786-L787","name":"List.reverse_prefix","line":786,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.reverse_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.reverse_prefix\"><span class=\"name\">List</span>.<span class=\"name\">reverse_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L782-L784","name":"List.reverse_suffix","line":782,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.reverse_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.reverse_suffix\"><span class=\"name\">List</span>.<span class=\"name\">reverse_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L779-L780","name":"List.IsInfix.mem","line":779,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.mem\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L776-L777","name":"List.IsSuffix.mem","line":776,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.mem\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L773-L774","name":"List.IsPrefix.mem","line":773,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.mem\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L766-L769","name":"List.IsPrefix.getElem","line":766,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.getElem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.getElem\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">getElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">ys</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ys</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L760-L761","name":"List.IsSuffix.length_le","line":760,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.length_le\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L754-L755","name":"List.IsPrefix.length_le","line":754,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.length_le\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L748-L749","name":"List.IsInfix.length_le","line":748,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.length_le\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L745-L746","name":"List.IsInfix.ne_nil","line":745,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.ne_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.ne_nil\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">ne_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">ys</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">ys</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L742-L743","name":"List.IsSuffix.ne_nil","line":742,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.ne_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.ne_nil\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">ne_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">ys</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">ys</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L739-L740","name":"List.IsPrefix.ne_nil","line":739,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.ne_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.ne_nil\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">ne_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">ys</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">ys</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L737-L737","name":"List.eq_nil_of_suffix_nil","line":737,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.eq_nil_of_suffix_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.eq_nil_of_suffix_nil\"><span class=\"name\">List</span>.<span class=\"name\">eq_nil_of_suffix_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L736-L736","name":"List.eq_nil_of_prefix_nil","line":736,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.eq_nil_of_prefix_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.eq_nil_of_prefix_nil\"><span class=\"name\">List</span>.<span class=\"name\">eq_nil_of_prefix_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L735-L735","name":"List.eq_nil_of_infix_nil","line":735,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.eq_nil_of_infix_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.eq_nil_of_infix_nil\"><span class=\"name\">List</span>.<span class=\"name\">eq_nil_of_infix_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L733-L733","name":"List.suffix_nil","line":733,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_nil\"><span class=\"name\">List</span>.<span class=\"name\">suffix_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L731-L731","name":"List.prefix_nil","line":731,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_nil\"><span class=\"name\">List</span>.<span class=\"name\">prefix_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L729-L729","name":"List.infix_nil","line":729,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_nil\"><span class=\"name\">List</span>.<span class=\"name\">infix_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L726-L727","name":"List.IsSuffix.subset","line":726,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.subset\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L723-L724","name":"List.IsSuffix.sublist","line":723,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.sublist\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L720-L721","name":"List.IsPrefix.subset","line":720,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.subset\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L717-L718","name":"List.IsPrefix.sublist","line":717,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.sublist\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L714-L715","name":"List.IsInfix.subset","line":714,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.subset\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L711-L712","name":"List.IsInfix.sublist","line":711,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.sublist\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L706-L707","name":"List.infix_append_of_infix_right","line":706,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_append_of_infix_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_append_of_infix_right\"><span class=\"name\">List</span>.<span class=\"name\">infix_append_of_infix_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₃ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₃</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₃</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L701-L702","name":"List.infix_append_of_infix_left","line":701,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_append_of_infix_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_append_of_infix_left\"><span class=\"name\">List</span>.<span class=\"name\">infix_append_of_infix_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₃</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L696-L697","name":"List.suffix_append_of_suffix","line":696,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_append_of_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_append_of_suffix\"><span class=\"name\">List</span>.<span class=\"name\">suffix_append_of_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₃ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₃</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₃</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L691-L692","name":"List.prefix_append_of_prefix","line":691,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_append_of_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_append_of_prefix\"><span class=\"name\">List</span>.<span class=\"name\">prefix_append_of_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₃</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L686-L687","name":"List.IsInfix.trans","line":686,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsInfix.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsInfix.trans\"><span class=\"name\">List</span>.<span class=\"name\">IsInfix</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span> → <span class=\"fn\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₃</span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L681-L682","name":"List.IsSuffix.trans","line":681,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.trans\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span> → <span class=\"fn\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₃</span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L676-L677","name":"List.IsPrefix.trans","line":676,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.trans\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> → <span class=\"fn\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₃</span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L673-L674","name":"List.infix_concat","line":673,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_concat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_concat\"><span class=\"name\">List</span>.<span class=\"name\">infix_concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.concat\">concat</a></span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L671-L671","name":"List.infix_cons","line":671,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_cons\"><span class=\"name\">List</span>.<span class=\"name\">infix_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L669-L669","name":"List.suffix_cons","line":669,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_cons\"><span class=\"name\">List</span>.<span class=\"name\">suffix_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L667-L667","name":"List.infix_rfl","line":667,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_rfl\"><span class=\"name\">List</span>.<span class=\"name\">infix_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L666-L666","name":"List.infix_refl","line":666,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_refl\"><span class=\"name\">List</span>.<span class=\"name\">infix_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L664-L664","name":"List.suffix_rfl","line":664,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_rfl\"><span class=\"name\">List</span>.<span class=\"name\">suffix_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L663-L663","name":"List.suffix_refl","line":663,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_refl\"><span class=\"name\">List</span>.<span class=\"name\">suffix_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L661-L661","name":"List.prefix_rfl","line":661,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_rfl\"><span class=\"name\">List</span>.<span class=\"name\">prefix_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L660-L660","name":"List.prefix_refl","line":660,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_refl\"><span class=\"name\">List</span>.<span class=\"name\">prefix_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L658-L658","name":"List.nil_infix","line":658,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.nil_infix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.nil_infix\"><span class=\"name\">List</span>.<span class=\"name\">nil_infix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L656-L656","name":"List.nil_suffix","line":656,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.nil_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.nil_suffix\"><span class=\"name\">List</span>.<span class=\"name\">nil_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L654-L654","name":"List.nil_prefix","line":654,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.nil_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.nil_prefix\"><span class=\"name\">List</span>.<span class=\"name\">nil_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L650-L650","name":"List.IsSuffix.isInfix","line":650,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsSuffix.isInfix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsSuffix.isInfix\"><span class=\"name\">List</span>.<span class=\"name\">IsSuffix</span>.<span class=\"name\">isInfix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₂</span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L646-L646","name":"List.IsPrefix.isInfix","line":646,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.IsPrefix.isInfix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.IsPrefix.isInfix\"><span class=\"name\">List</span>.<span class=\"name\">IsPrefix</span>.<span class=\"name\">isInfix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₂</span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L644-L644","name":"List.infix_append_right","line":644,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_append_right\"><span class=\"name\">List</span>.<span class=\"name\">infix_append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂ </span><span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L643-L643","name":"List.infix_append_left","line":643,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_append_left\"><span class=\"name\">List</span>.<span class=\"name\">infix_append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L640-L641","name":"List.infix_append'","line":640,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_append'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_append'\"><span class=\"name\">List</span>.<span class=\"name\">infix_append'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> (<span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₃</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L638-L638","name":"List.infix_append","line":638,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.infix_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.infix_append\"><span class=\"name\">List</span>.<span class=\"name\">infix_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₃</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L636-L636","name":"List.suffix_append","line":636,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.suffix_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.suffix_append\"><span class=\"name\">List</span>.<span class=\"name\">suffix_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L634-L634","name":"List.prefix_append","line":634,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.prefix_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.prefix_append\"><span class=\"name\">List</span>.<span class=\"name\">prefix_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L627-L630","name":"List.Sublist.drop","line":627,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.drop\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">l₁</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">l₂</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L624-L625","name":"List.instDecidableSublistOfDecidableEq","line":624,"kind":"instance","docLink":"./Init/Data/List/Sublist.html#List.instDecidableSublistOfDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.instDecidableSublistOfDecidableEq\"><span class=\"name\">List</span>.<span class=\"name\">instDecidableSublistOfDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L605-L622","name":"List.isSublist_iff_sublist","line":605,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.isSublist_iff_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isSublist_iff_sublist\"><span class=\"name\">List</span>.<span class=\"name\">isSublist_iff_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.isSublist\">isSublist</a></span> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L579-L603","name":"List.flatten_sublist_iff","line":579,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.flatten_sublist_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.flatten_sublist_iff\"><span class=\"name\">List</span>.<span class=\"name\">flatten_sublist_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">L'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">x</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L'</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L550-L577","name":"List.sublist_flatten_iff","line":550,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_flatten_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_flatten_iff\"><span class=\"name\">List</span>.<span class=\"name\">sublist_flatten_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">L'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">x</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L542-L548","name":"List.sublist_flatten_of_mem","line":542,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_flatten_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_flatten_of_mem\"><span class=\"name\">List</span>.<span class=\"name\">sublist_flatten_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L517-L540","name":"List.sublist_replicate_iff","line":517,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_replicate_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_replicate_iff\"><span class=\"name\">List</span>.<span class=\"name\">sublist_replicate_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L509-L515","name":"List.replicate_sublist_replicate","line":509,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.replicate_sublist_replicate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.replicate_sublist_replicate\"><span class=\"name\">List</span>.<span class=\"name\">replicate_sublist_replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L502-L507","name":"List.append_sublist_append_right","line":502,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.append_sublist_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.append_sublist_append_right\"><span class=\"name\">List</span>.<span class=\"name\">append_sublist_append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>).<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L498-L500","name":"List.sublist_reverse_iff","line":498,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_reverse_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_reverse_iff\"><span class=\"name\">List</span>.<span class=\"name\">sublist_reverse_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L495-L496","name":"List.reverse_sublist","line":495,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.reverse_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.reverse_sublist\"><span class=\"name\">List</span>.<span class=\"name\">reverse_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L490-L493","name":"List.Sublist.reverse","line":490,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.reverse\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L484-L488","name":"List.Sublist.middle","line":484,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.middle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.middle\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">middle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L476-L482","name":"List.Sublist.of_sublist_append_right","line":476,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.of_sublist_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.of_sublist_append_right\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">of_sublist_append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L468-L474","name":"List.Sublist.of_sublist_append_left","line":468,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.of_sublist_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.of_sublist_append_left\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">of_sublist_append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L447-L466","name":"List.append_sublist_iff","line":447,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.append_sublist_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.append_sublist_iff\"><span class=\"name\">List</span>.<span class=\"name\">append_sublist_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r </span><span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>).<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">r₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">r₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">r₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">r₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L418-L445","name":"List.sublist_append_iff","line":418,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_append_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_append_iff\"><span class=\"name\">List</span>.<span class=\"name\">sublist_append_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂ </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">r₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">r₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L400-L416","name":"List.cons_sublist_iff","line":400,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.cons_sublist_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.cons_sublist_iff\"><span class=\"name\">List</span>.<span class=\"name\">cons_sublist_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>).<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">r₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">r₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">r₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L388-L398","name":"List.sublist_cons_iff","line":388,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_cons_iff\"><span class=\"name\">List</span>.<span class=\"name\">sublist_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l'</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L383-L384","name":"List.Sublist.append","line":383,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.append\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">r₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₁</span>).<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₂</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L378-L381","name":"List.Sublist.append_right","line":378,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.append_right\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>).<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L375-L376","name":"List.Sublist.append_left","line":375,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.append_left\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₁</span>).<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L371-L373","name":"List.append_sublist_append_left","line":371,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.append_sublist_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.append_sublist_append_left\"><span class=\"name\">List</span>.<span class=\"name\">append_sublist_append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₁</span>).<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L366-L367","name":"List.sublist_append_of_sublist_right","line":366,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_append_of_sublist_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_append_of_sublist_right\"><span class=\"name\">List</span>.<span class=\"name\">sublist_append_of_sublist_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L361-L362","name":"List.sublist_append_of_sublist_left","line":361,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_append_of_sublist_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_append_of_sublist_left\"><span class=\"name\">List</span>.<span class=\"name\">sublist_append_of_sublist_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L356-L359","name":"List.singleton_sublist","line":356,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.singleton_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.singleton_sublist\"><span class=\"name\">List</span>.<span class=\"name\">singleton_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L350-L352","name":"List.sublist_append_right","line":350,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_append_right\"><span class=\"name\">List</span>.<span class=\"name\">sublist_append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L344-L346","name":"List.sublist_append_left","line":344,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_append_left\"><span class=\"name\">List</span>.<span class=\"name\">sublist_append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L339-L342","name":"List.sublist_filter_iff","line":339,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_filter_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_filter_iff\"><span class=\"name\">List</span>.<span class=\"name\">sublist_filter_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂ </span><span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L334-L337","name":"List.sublist_map_iff","line":334,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_map_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_map_iff\"><span class=\"name\">List</span>.<span class=\"name\">sublist_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L299-L332","name":"List.sublist_filterMap_iff","line":299,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_filterMap_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_filterMap_iff\"><span class=\"name\">List</span>.<span class=\"name\">sublist_filterMap_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L296-L297","name":"List.getLast_filter_mem","line":296,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.getLast_filter_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.getLast_filter_mem\"><span class=\"name\">List</span>.<span class=\"name\">getLast_filter_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L293-L294","name":"List.head_filter_mem","line":293,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.head_filter_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.head_filter_mem\"><span class=\"name\">List</span>.<span class=\"name\">head_filter_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.head\">head</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L286-L288","name":"List.Sublist.filter","line":286,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.filter\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₁</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L278-L281","name":"List.Sublist.filterMap","line":278,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.filterMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.filterMap\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L266-L273","name":"List.Sublist.map","line":266,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.map\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L262-L264","name":"List.Sublist.of_cons_cons","line":262,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.of_cons_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.of_cons_cons\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">of_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₁</span>).<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L256-L260","name":"List.Sublist.tail","line":256,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.tail\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L251-L254","name":"List.tail_sublist","line":251,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.tail_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.tail_sublist\"><span class=\"name\">List</span>.<span class=\"name\">tail_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L248-L249","name":"List.Sublist.length_eq","line":248,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.length_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.length_eq\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">length_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L245-L246","name":"List.Sublist.eq_of_length_le","line":245,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.eq_of_length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.eq_of_length_le\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">eq_of_length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L237-L240","name":"List.Sublist.eq_of_length","line":237,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.eq_of_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.eq_of_length\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">eq_of_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L229-L232","name":"List.Sublist.length_le","line":229,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.length_le\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> → <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L226-L227","name":"List.eq_nil_of_sublist_nil","line":226,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.eq_nil_of_sublist_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.eq_nil_of_sublist_nil\"><span class=\"name\">List</span>.<span class=\"name\">eq_nil_of_sublist_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L223-L224","name":"List.sublist_nil","line":223,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_nil\"><span class=\"name\">List</span>.<span class=\"name\">sublist_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L220-L221","name":"List.mem_of_cons_sublist","line":220,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.mem_of_cons_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.mem_of_cons_sublist\"><span class=\"name\">List</span>.<span class=\"name\">mem_of_cons_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₁</span>).<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L217-L218","name":"List.instTransSublistMem","line":217,"kind":"instance","docLink":"./Init/Data/List/Sublist.html#List.instTransSublistMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.instTransSublistMem\"><span class=\"name\">List</span>.<span class=\"name\">instTransSublistMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <span class=\"fn\">(fun (<span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₁</span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">Membership.mem</a> <a href=\"./Init/Prelude.html#Membership.mem\">Membership.mem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L214-L215","name":"List.instTransSubsetSublist","line":214,"kind":"instance","docLink":"./Init/Data/List/Sublist.html#List.instTransSubsetSublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.instTransSubsetSublist\"><span class=\"name\">List</span>.<span class=\"name\">instTransSubsetSublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <a href=\"./Init/Core.html#HasSubset.Subset\">Subset</a> <a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a> <a href=\"./Init/Core.html#HasSubset.Subset\">Subset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L211-L212","name":"List.instTransSublistSubset","line":211,"kind":"instance","docLink":"./Init/Data/List/Sublist.html#List.instTransSublistSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.instTransSublistSubset\"><span class=\"name\">List</span>.<span class=\"name\">instTransSublistSubset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a> <a href=\"./Init/Core.html#HasSubset.Subset\">Subset</a> <a href=\"./Init/Core.html#HasSubset.Subset\">Subset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L208-L209","name":"List.Sublist.getLast_mem","line":208,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.getLast_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.getLast_mem\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">getLast_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys </span><span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">xs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">ys</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L205-L206","name":"List.Sublist.head_mem","line":205,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.head_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.head_mem\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">head_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys </span><span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">xs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">ys</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Data/List/Basic.html#List.head\">head</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L202-L203","name":"List.Sublist.mem","line":202,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.mem\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L196-L200","name":"List.Sublist.subset","line":196,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.subset\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L186-L194","name":"List.sublist_or_mem_of_sublist","line":186,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_or_mem_of_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_or_mem_of_sublist\"><span class=\"name\">List</span>.<span class=\"name\">sublist_or_mem_of_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L182-L184","name":"List.cons_sublist_cons","line":182,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.cons_sublist_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.cons_sublist_cons\"><span class=\"name\">List</span>.<span class=\"name\">cons_sublist_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₁</span>).<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L179-L180","name":"List.sublist_of_cons_sublist","line":179,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_of_cons_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_of_cons_sublist\"><span class=\"name\">List</span>.<span class=\"name\">sublist_of_cons_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₁</span>).<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L177-L177","name":"List.sublist_cons_self","line":177,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.sublist_cons_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.sublist_cons_self\"><span class=\"name\">List</span>.<span class=\"name\">sublist_cons_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L173-L173","name":"List.instTransSublist","line":173,"kind":"instance","docLink":"./Init/Data/List/Sublist.html#List.instTransSublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.instTransSublist\"><span class=\"name\">List</span>.<span class=\"name\">instTransSublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a> <a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a> <a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L162-L171","name":"List.Sublist.trans","line":162,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.trans\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₃</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L158-L160","name":"List.Sublist.refl","line":158,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Sublist.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Sublist.refl\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L154-L156","name":"List.nil_sublist","line":154,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.nil_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.nil_sublist\"><span class=\"name\">List</span>.<span class=\"name\">nil_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L149-L150","name":"List.subset_reverse","line":149,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.subset_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.subset_reverse\"><span class=\"name\">List</span>.<span class=\"name\">subset_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L146-L147","name":"List.reverse_subset","line":146,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.reverse_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.reverse_subset\"><span class=\"name\">List</span>.<span class=\"name\">reverse_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L138-L144","name":"List.subset_replicate","line":138,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.subset_replicate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.subset_replicate\"><span class=\"name\">List</span>.<span class=\"name\">subset_replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L133-L136","name":"List.replicate_subset","line":133,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.replicate_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.replicate_subset\"><span class=\"name\">List</span>.<span class=\"name\">replicate_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L130-L131","name":"List.append_subset","line":130,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.append_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.append_subset\"><span class=\"name\">List</span>.<span class=\"name\">append_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L127-L128","name":"List.subset_append_of_subset_right","line":127,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.subset_append_of_subset_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.subset_append_of_subset_right\"><span class=\"name\">List</span>.<span class=\"name\">subset_append_of_subset_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span> → <span class=\"fn\">l</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L124-L125","name":"List.subset_append_of_subset_left","line":124,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.subset_append_of_subset_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.subset_append_of_subset_left\"><span class=\"name\">List</span>.<span class=\"name\">subset_append_of_subset_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₁</span> → <span class=\"fn\">l</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L122-L122","name":"List.subset_append_right","line":122,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.subset_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.subset_append_right\"><span class=\"name\">List</span>.<span class=\"name\">subset_append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L120-L120","name":"List.subset_append_left","line":120,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.subset_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.subset_append_left\"><span class=\"name\">List</span>.<span class=\"name\">subset_append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L110-L115","name":"List.filterMap_subset","line":110,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.filterMap_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.filterMap_subset\"><span class=\"name\">List</span>.<span class=\"name\">filterMap_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L104-L105","name":"List.filter_subset","line":104,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.filter_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.filter_subset\"><span class=\"name\">List</span>.<span class=\"name\">filter_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">filter</a> <span class=\"fn\">p</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L98-L99","name":"List.map_subset","line":98,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.map_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.map_subset\"><span class=\"name\">List</span>.<span class=\"name\">map_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L96-L96","name":"List.eq_nil_of_subset_nil","line":96,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.eq_nil_of_subset_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.eq_nil_of_subset_nil\"><span class=\"name\">List</span>.<span class=\"name\">eq_nil_of_subset_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> → <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L93-L94","name":"List.subset_nil","line":93,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.subset_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.subset_nil\"><span class=\"name\">List</span>.<span class=\"name\">subset_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L90-L91","name":"List.cons_subset","line":90,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.cons_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.cons_subset\"><span class=\"name\">List</span>.<span class=\"name\">cons_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">l</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L87-L88","name":"List.cons_subset_cons","line":87,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.cons_subset_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.cons_subset_cons\"><span class=\"name\">List</span>.<span class=\"name\">cons_subset_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L84-L85","name":"List.subset_cons_of_subset","line":84,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.subset_cons_of_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.subset_cons_of_subset\"><span class=\"name\">List</span>.<span class=\"name\">subset_cons_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L81-L82","name":"List.subset_of_cons_subset","line":81,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.subset_of_cons_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.subset_of_cons_subset\"><span class=\"name\">List</span>.<span class=\"name\">subset_of_cons_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span> → <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L79-L79","name":"List.subset_cons_self","line":79,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.subset_cons_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.subset_cons_self\"><span class=\"name\">List</span>.<span class=\"name\">subset_cons_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L76-L77","name":"List.instTransSubset","line":76,"kind":"instance","docLink":"./Init/Data/List/Sublist.html#List.instTransSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.instTransSubset\"><span class=\"name\">List</span>.<span class=\"name\">instTransSubset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <a href=\"./Init/Core.html#HasSubset.Subset\">Subset</a> <a href=\"./Init/Core.html#HasSubset.Subset\">Subset</a> <a href=\"./Init/Core.html#HasSubset.Subset\">Subset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L73-L74","name":"List.instTransSubsetMem","line":73,"kind":"instance","docLink":"./Init/Data/List/Sublist.html#List.instTransSubsetMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.instTransSubsetMem\"><span class=\"name\">List</span>.<span class=\"name\">instTransSubsetMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <span class=\"fn\">(fun (<span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₁</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">Membership.mem</a> <a href=\"./Init/Prelude.html#Membership.mem\">Membership.mem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L70-L71","name":"List.Subset.trans","line":70,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Subset.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Subset.trans\"><span class=\"name\">List</span>.<span class=\"name\">Subset</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₃</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₃</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L68-L68","name":"List.Subset.refl","line":68,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.Subset.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.Subset.refl\"><span class=\"name\">List</span>.<span class=\"name\">Subset</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L66-L66","name":"List.nil_subset","line":66,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.nil_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.nil_subset\"><span class=\"name\">List</span>.<span class=\"name\">nil_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L64-L64","name":"List.subset_def","line":64,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.subset_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.subset_def\"><span class=\"name\">List</span>.<span class=\"name\">subset_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L53-L55","name":"List.isSuffixOf_replicate","line":53,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.isSuffixOf_replicate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isSuffixOf_replicate\"><span class=\"name\">List</span>.<span class=\"name\">isSuffixOf_replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isSuffixOf\">isSuffixOf</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.all\">all</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span></span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L50-L51","name":"List.isSuffixOf_cons_nil","line":50,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.isSuffixOf_cons_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isSuffixOf_cons_nil\"><span class=\"name\">List</span>.<span class=\"name\">isSuffixOf_cons_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">as</span>).<a href=\"./Init/Data/List/Basic.html#List.isSuffixOf\">isSuffixOf</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L35-L42","name":"List.isPrefixOf_replicate","line":35,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.isPrefixOf_replicate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isPrefixOf_replicate\"><span class=\"name\">List</span>.<span class=\"name\">isPrefixOf_replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isPrefixOf\">isPrefixOf</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.all\">all</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span></span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L32-L33","name":"List.isPrefixOf_length_pos_nil","line":32,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.isPrefixOf_length_pos_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isPrefixOf_length_pos_nil\"><span class=\"name\">List</span>.<span class=\"name\">isPrefixOf_length_pos_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isPrefixOf\">isPrefixOf</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/List/Sublist.lean#L29-L30","name":"List.isPrefixOf_cons₂_self","line":29,"kind":"theorem","docLink":"./Init/Data/List/Sublist.html#List.isPrefixOf_cons₂_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sublist.html#List.isPrefixOf_cons₂_self\"><span class=\"name\">List</span>.<span class=\"name\">isPrefixOf_cons₂_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as </span><span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">as</span>).<a href=\"./Init/Data/List/Basic.html#List.isPrefixOf\">isPrefixOf</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">bs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/List/Basic.html#List.isPrefixOf\">isPrefixOf</a></span> <span class=\"fn\">bs</span></span></div></div>"}]}