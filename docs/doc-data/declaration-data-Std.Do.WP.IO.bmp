{"name":"Std.Do.WP.IO","instances":[{"typeNames":["EIO"],"name":"Std.Do.IO.Bare.instLawfulMonad","className":"LawfulMonad"}],"imports":["Init.System.IO","Std.Do.WP.Monad"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/IO.lean#L41-L46","name":"Std.Do.IO.Bare.instWPMonad","line":41,"kind":"def","docLink":"./Std/Do/WP/IO.html#Std.Do.IO.Bare.instWPMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/IO.html#Std.Do.IO.Bare.instWPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">IO</span>.<span class=\"name\">Bare</span>.<span class=\"name\">instWPMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/IO.lean#L39-L39","name":"Std.Do.IO.Bare.instLawfulMonad","line":39,"kind":"instance","docLink":"./Std/Do/WP/IO.html#Std.Do.IO.Bare.instLawfulMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/IO.html#Std.Do.IO.Bare.instLawfulMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">IO</span>.<span class=\"name\">Bare</span>.<span class=\"name\">instLawfulMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Std/Do/WP/IO.lean#L23-L37","name":"Std.Do.IO.Bare.instWP","line":23,"kind":"def","docLink":"./Std/Do/WP/IO.html#Std.Do.IO.Bare.instWP","doc":"This is pretty much the instance for `EStateM` specialized to `σ = IO.RealWorld`.\nHowever, `IO.RealWorld` is ommitted in the `PredShape`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/IO.html#Std.Do.IO.Bare.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">IO</span>.<span class=\"name\">Bare</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>"}]}