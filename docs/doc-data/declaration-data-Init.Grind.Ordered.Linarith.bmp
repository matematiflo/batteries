{"name":"Init.Grind.Ordered.Linarith","instances":[{"typeNames":["Lean.Grind.Linarith.Expr"],"name":"Lean.Grind.Linarith.instInhabitedExpr","className":"Inhabited"},{"typeNames":["Lean.Grind.Linarith.Expr"],"name":"Lean.Grind.Linarith.instBEqExpr","className":"BEq"},{"typeNames":["Lean.Grind.Linarith.Expr"],"name":"Lean.Grind.Linarith.instReprExpr","className":"Repr"},{"typeNames":["Lean.Grind.Linarith.Poly"],"name":"Lean.Grind.Linarith.instBEqPoly","className":"BEq"},{"typeNames":["Lean.Grind.Linarith.Poly"],"name":"Lean.Grind.Linarith.instReprPoly","className":"Repr"},{"typeNames":["Lean.Grind.Linarith.Poly"],"name":"Lean.Grind.Linarith.instLawfulBEqPoly","className":"LawfulBEq"}],"imports":["Init.Grind.Ordered.Module","Init.Grind.Ordered.Ring","Init.Grind.Ring.Field","Init.Data.Ord","Init.Data.AC","Init.Data.RArray"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L567-L569","name":"Lean.Grind.Linarith.eq_eq_subst","line":567,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_eq_subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_eq_subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_eq_subst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_eq_subst_cert\">eq_eq_subst_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L562-L565","name":"Lean.Grind.Linarith.eq_eq_subst_cert","line":562,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_eq_subst_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_eq_subst_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_eq_subst_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L557-L560","name":"Lean.Grind.Linarith.eq_lt_subst","line":557,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_lt_subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_lt_subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_lt_subst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_lt_subst_cert\">eq_lt_subst_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L552-L555","name":"Lean.Grind.Linarith.eq_lt_subst_cert","line":552,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_lt_subst_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_lt_subst_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_lt_subst_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L547-L550","name":"Lean.Grind.Linarith.eq_le_subst","line":547,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_le_subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_le_subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_le_subst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_le_subst_cert\">eq_le_subst_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L542-L545","name":"Lean.Grind.Linarith.eq_le_subst_cert","line":542,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_le_subst_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_le_subst_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_le_subst_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L537-L540","name":"Lean.Grind.Linarith.eq_diseq_subst1","line":537,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_diseq_subst1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_diseq_subst1\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_diseq_subst1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_diseq_subst1_cert\">eq_diseq_subst1_cert</a> <span class=\"fn\">k</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L530-L531","name":"Lean.Grind.Linarith.eq_diseq_subst1_cert","line":530,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_diseq_subst1_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_diseq_subst1_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_diseq_subst1_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L517-L528","name":"Lean.Grind.Linarith.eq_diseq_subst","line":517,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_diseq_subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_diseq_subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_diseq_subst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_diseq_subst_cert\">eq_diseq_subst_cert</a> <span class=\"fn\">k₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L514-L515","name":"Lean.Grind.Linarith.eq_diseq_subst_cert","line":514,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_diseq_subst_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_diseq_subst_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_diseq_subst_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L505-L508","name":"Lean.Grind.Linarith.diseq_neg","line":505,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">diseq_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p'</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.mul\">mul</a></span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L496-L503","name":"Lean.Grind.Linarith.lt_coeff","line":496,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.lt_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.lt_coeff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">lt_coeff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.coeff_cert\">coeff_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L487-L494","name":"Lean.Grind.Linarith.le_coeff","line":487,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_coeff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">le_coeff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.coeff_cert\">coeff_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L484-L485","name":"Lean.Grind.Linarith.coeff_cert","line":484,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.coeff_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.coeff_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L479-L482","name":"Lean.Grind.Linarith.eq_coeff","line":479,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_coeff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_coeff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_coeff_cert\">eq_coeff_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L476-L477","name":"Lean.Grind.Linarith.eq_coeff_cert","line":476,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_coeff_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_coeff_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L472-L474","name":"Lean.Grind.Linarith.eq_neg","line":472,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_neg_cert\">eq_neg_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L469-L470","name":"Lean.Grind.Linarith.eq_neg_cert","line":469,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_neg_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_neg_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_neg_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L457-L463","name":"Lean.Grind.Linarith.zero_ne_one_of_charC","line":457,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_of_charC","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_of_charC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">zero_ne_one_of_charC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_of_charC_cert\">zero_ne_one_of_charC_cert</a> <span class=\"fn\">c</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#One.one\">One.one</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L454-L455","name":"Lean.Grind.Linarith.zero_ne_one_of_charC_cert","line":454,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_of_charC_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_of_charC_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">zero_ne_one_of_charC_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L448-L452","name":"Lean.Grind.Linarith.zero_ne_one_of_char0","line":448,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_of_char0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_of_char0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">zero_ne_one_of_char0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">0</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_cert\">zero_ne_one_cert</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#One.one\">One.one</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L443-L446","name":"Lean.Grind.Linarith.zero_ne_one_of_field","line":443,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_of_field","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_of_field\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">zero_ne_one_of_field</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Field.html#Lean.Grind.Field\">Field</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_cert\">zero_ne_one_cert</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#One.one\">One.one</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L438-L441","name":"Lean.Grind.Linarith.zero_ne_one_of_ord_ring","line":438,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_of_ord_ring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_of_ord_ring\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">zero_ne_one_of_ord_ring</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_cert\">zero_ne_one_cert</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#One.one\">One.one</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L435-L436","name":"Lean.Grind.Linarith.zero_ne_one_cert","line":435,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_ne_one_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">zero_ne_one_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L430-L433","name":"Lean.Grind.Linarith.zero_lt_one","line":430,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_lt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_lt_one\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">zero_lt_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_lt_one_cert\">zero_lt_one_cert</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#One.one\">One.one</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L427-L428","name":"Lean.Grind.Linarith.zero_lt_one_cert","line":427,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_lt_one_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.zero_lt_one_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">zero_lt_one_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L422-L425","name":"Lean.Grind.Linarith.lt_unsat","line":422,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.lt_unsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.lt_unsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">lt_unsat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.nil\">Poly.nil</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L419-L420","name":"Lean.Grind.Linarith.diseq_unsat","line":419,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_unsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_unsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">diseq_unsat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.nil\">Poly.nil</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L406-L413","name":"Lean.Grind.Linarith.eq_of_le_ge","line":406,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_of_le_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_of_le_ge\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_of_le_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_of_le_ge_cert\">eq_of_le_ge_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L403-L404","name":"Lean.Grind.Linarith.eq_of_le_ge_cert","line":403,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_of_le_ge_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_of_le_ge_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_of_le_ge_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L393-L398","name":"Lean.Grind.Linarith.not_lt_norm'","line":393,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.not_lt_norm'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.not_lt_norm'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">not_lt_norm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.norm_cert\">norm_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L386-L391","name":"Lean.Grind.Linarith.not_le_norm'","line":386,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.not_le_norm'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.not_le_norm'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">not_le_norm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.norm_cert\">norm_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L376-L382","name":"Lean.Grind.Linarith.not_lt_norm","line":376,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.not_lt_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.not_lt_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">not_lt_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.norm_cert\">norm_cert</a> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L368-L374","name":"Lean.Grind.Linarith.not_le_norm","line":368,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.not_le_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.not_le_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">not_le_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.norm_cert\">norm_cert</a> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L361-L366","name":"Lean.Grind.Linarith.lt_norm","line":361,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.lt_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.lt_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">lt_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.norm_cert\">norm_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L354-L359","name":"Lean.Grind.Linarith.le_norm","line":354,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">le_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.norm_cert\">norm_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L346-L352","name":"Lean.Grind.Linarith.diseq_norm","line":346,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">diseq_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.norm_cert\">norm_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L341-L344","name":"Lean.Grind.Linarith.le_of_eq","line":341,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_of_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">le_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.norm_cert\">norm_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L337-L339","name":"Lean.Grind.Linarith.eq_norm","line":337,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.eq_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.norm_cert\">norm_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L334-L335","name":"Lean.Grind.Linarith.norm_cert","line":334,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.norm_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.norm_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">norm_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L325-L328","name":"Lean.Grind.Linarith.diseq_split_resolve","line":325,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_split_resolve","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_split_resolve\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">diseq_split_resolve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_split_cert\">diseq_split_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L315-L323","name":"Lean.Grind.Linarith.diseq_split","line":315,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_split","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_split\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">diseq_split</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_split_cert\">diseq_split_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L311-L312","name":"Lean.Grind.Linarith.diseq_split_cert","line":311,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_split_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.diseq_split_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">diseq_split_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L304-L309","name":"Lean.Grind.Linarith.lt_lt_combine","line":304,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.lt_lt_combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.lt_lt_combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">lt_lt_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.lt_lt_combine_cert\">lt_lt_combine_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L299-L302","name":"Lean.Grind.Linarith.lt_lt_combine_cert","line":299,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.lt_lt_combine_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.lt_lt_combine_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">lt_lt_combine_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L292-L297","name":"Lean.Grind.Linarith.le_lt_combine","line":292,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_lt_combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_lt_combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">le_lt_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_lt_combine_cert\">le_lt_combine_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L287-L290","name":"Lean.Grind.Linarith.le_lt_combine_cert","line":287,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_lt_combine_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_lt_combine_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">le_lt_combine_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L280-L285","name":"Lean.Grind.Linarith.le_le_combine","line":280,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_le_combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_le_combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">le_le_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Order.html#Lean.Grind.Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_le_combine_cert\">le_le_combine_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L275-L278","name":"Lean.Grind.Linarith.le_le_combine_cert","line":275,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_le_combine_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.le_le_combine_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">le_le_combine_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L246-L249","name":"Lean.Grind.Linarith.Poly.leadCoeff","line":246,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.leadCoeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.leadCoeff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">leadCoeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L233-L242","name":"Lean.Grind.Linarith.instLawfulBEqPoly","line":233,"kind":"instance","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instLawfulBEqPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instLawfulBEqPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">instLawfulBEqPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L228-L229","name":"Lean.Grind.Linarith.Expr.denote_norm","line":228,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.norm\">norm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L217-L226","name":"Lean.Grind.Linarith.Expr.denote_toPoly'_go","line":217,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote_toPoly'_go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote_toPoly'_go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_toPoly'_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.toPoly'.go\">toPoly'.go</a> <span class=\"fn\">k</span> <span class=\"fn\">e</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L212-L213","name":"Lean.Grind.Linarith.Poly.denote_combine","line":212,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.combine\">combine</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L203-L210","name":"Lean.Grind.Linarith.Poly.denote_combine'","line":203,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_combine'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_combine'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_combine'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.combine'\">combine'</a> <span class=\"fn\">fuel</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L198-L199","name":"Lean.Grind.Linarith.Poly.denote_append","line":198,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_append\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.append\">append</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L193-L194","name":"Lean.Grind.Linarith.Poly.denote_norm","line":193,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.norm\">norm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L181-L189","name":"Lean.Grind.Linarith.Poly.denote_insert","line":181,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.insert\">insert</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L173-L179","name":"Lean.Grind.Linarith.Poly.denote_mul","line":173,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.mul\">mul</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L167-L171","name":"Lean.Grind.Linarith.Poly.mul","line":167,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L159-L165","name":"Lean.Grind.Linarith.Poly.mul'","line":159,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.mul'","doc":"`p.mul k` multiplies all coefficients and constant of the polynomial `p` by `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.mul'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L155-L157","name":"Lean.Grind.Linarith.Expr.norm","line":155,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.norm","doc":"Converts the given expression into a polynomial, and then normalizes it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L146-L153","name":"Lean.Grind.Linarith.Expr.toPoly'.go","line":146,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.toPoly'.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.toPoly'.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly'</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeff</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a> → <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L142-L153","name":"Lean.Grind.Linarith.Expr.toPoly'","line":142,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.toPoly'","doc":"Converts the given expression into a polynomial. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.toPoly'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L139-L140","name":"Lean.Grind.Linarith.Poly.combine","line":139,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L121-L137","name":"Lean.Grind.Linarith.Poly.combine'","line":121,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.combine'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.combine'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L116-L119","name":"Lean.Grind.Linarith.Poly.append","line":116,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L110-L114","name":"Lean.Grind.Linarith.Poly.norm","line":110,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.norm","doc":"Normalizes the given polynomial by fusing monomial and constants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L96-L108","name":"Lean.Grind.Linarith.Poly.insert","line":96,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L91-L94","name":"Lean.Grind.Linarith.Poly.coeff","line":91,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.coeff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L88-L89","name":"Lean.Grind.Linarith.Poly.denote'_eq_denote","line":88,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'_eq_denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'_eq_denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'_eq_denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\">denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L83-L86","name":"Lean.Grind.Linarith.Poly.denote'_go_eq_denote","line":83,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'_go_eq_denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'_go_eq_denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'_go_eq_denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'.go\">denote'.go</a> <span class=\"fn\">ctx</span> <span class=\"fn\">r</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L80-L81","name":"Lean.Grind.Linarith.instCommutativeHAdd","line":80,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instCommutativeHAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instCommutativeHAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">instCommutativeHAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L77-L78","name":"Lean.Grind.Linarith.instAssociativeHAdd","line":77,"kind":"theorem","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instAssociativeHAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instAssociativeHAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">instAssociativeHAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L70-L74","name":"Lean.Grind.Linarith.Poly.denote'.go","line":70,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L61-L74","name":"Lean.Grind.Linarith.Poly.denote'","line":61,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'","doc":"Similar to `Poly.denote`, but produces a denotation better for normalization.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L56-L59","name":"Lean.Grind.Linarith.Poly.denote","line":56,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L54-L54","name":"Lean.Grind.Linarith.instReprPoly","line":54,"kind":"instance","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instReprPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instReprPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">instReprPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L54-L54","name":"Lean.Grind.Linarith.instBEqPoly","line":54,"kind":"instance","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instBEqPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instBEqPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">instBEqPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L53-L53","name":"Lean.Grind.Linarith.Poly.add","line":53,"kind":"ctor","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L52-L52","name":"Lean.Grind.Linarith.Poly.nil","line":52,"kind":"ctor","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L51-L54","name":"Lean.Grind.Linarith.Poly","line":51,"kind":"inductive","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L42-L49","name":"Lean.Grind.Linarith.Expr.denote","line":42,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L39-L40","name":"Lean.Grind.Linarith.Var.denote","line":39,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var.denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Var</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L37-L37","name":"Lean.Grind.Linarith.Context","line":37,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L35-L35","name":"Lean.Grind.Linarith.instReprExpr","line":35,"kind":"instance","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instReprExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instReprExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">instReprExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L35-L35","name":"Lean.Grind.Linarith.instBEqExpr","line":35,"kind":"instance","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instBEqExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instBEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">instBEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L35-L35","name":"Lean.Grind.Linarith.instInhabitedExpr","line":35,"kind":"instance","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instInhabitedExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.instInhabitedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L34-L34","name":"Lean.Grind.Linarith.Expr.intMul","line":34,"kind":"ctor","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.intMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.intMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">intMul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L33-L33","name":"Lean.Grind.Linarith.Expr.natMul","line":33,"kind":"ctor","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.natMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.natMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">natMul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L32-L32","name":"Lean.Grind.Linarith.Expr.neg","line":32,"kind":"ctor","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L31-L31","name":"Lean.Grind.Linarith.Expr.sub","line":31,"kind":"ctor","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L30-L30","name":"Lean.Grind.Linarith.Expr.add","line":30,"kind":"ctor","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L29-L29","name":"Lean.Grind.Linarith.Expr.var","line":29,"kind":"ctor","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L28-L28","name":"Lean.Grind.Linarith.Expr.zero","line":28,"kind":"ctor","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr.zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L27-L35","name":"Lean.Grind.Linarith.Expr","line":27,"kind":"inductive","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Grind/Ordered/Linarith.lean#L22-L22","name":"Lean.Grind.Linarith.Var","line":22,"kind":"def","docLink":"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}