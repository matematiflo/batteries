{"name":"Init.Data.UInt.Basic","instances":[{"typeNames":["UInt8"],"name":"instAddUInt8","className":"Add"},{"typeNames":["UInt8"],"name":"instSubUInt8","className":"Sub"},{"typeNames":["UInt8"],"name":"instMulUInt8","className":"Mul"},{"typeNames":["UInt8","Nat"],"name":"instPowUInt8Nat","className":"Pow"},{"typeNames":["UInt8"],"name":"instModUInt8","className":"Mod"},{"typeNames":["UInt8","Nat","UInt8"],"name":"instHModUInt8Nat","className":"HMod"},{"typeNames":["UInt8"],"name":"instDivUInt8","className":"Div"},{"typeNames":["UInt8"],"name":"instLTUInt8","className":"LT"},{"typeNames":["UInt8"],"name":"instLEUInt8","className":"LE"},{"typeNames":["UInt8"],"name":"instComplementUInt8","className":"Complement"},{"typeNames":["UInt8"],"name":"instNegUInt8","className":"Neg"},{"typeNames":["UInt8"],"name":"instAndOpUInt8","className":"AndOp"},{"typeNames":["UInt8"],"name":"instOrOpUInt8","className":"OrOp"},{"typeNames":["UInt8"],"name":"instXorUInt8","className":"Xor"},{"typeNames":["UInt8"],"name":"instShiftLeftUInt8","className":"ShiftLeft"},{"typeNames":["UInt8"],"name":"instShiftRightUInt8","className":"ShiftRight"},{"typeNames":["LT.lt"],"name":"UInt8.decLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"UInt8.decLe","className":"Decidable"},{"typeNames":["UInt8"],"name":"instMaxUInt8","className":"Max"},{"typeNames":["UInt8"],"name":"instMinUInt8","className":"Min"},{"typeNames":["UInt16"],"name":"instAddUInt16","className":"Add"},{"typeNames":["UInt16"],"name":"instSubUInt16","className":"Sub"},{"typeNames":["UInt16"],"name":"instMulUInt16","className":"Mul"},{"typeNames":["UInt16","Nat"],"name":"instPowUInt16Nat","className":"Pow"},{"typeNames":["UInt16"],"name":"instModUInt16","className":"Mod"},{"typeNames":["UInt16","Nat","UInt16"],"name":"instHModUInt16Nat","className":"HMod"},{"typeNames":["UInt16"],"name":"instDivUInt16","className":"Div"},{"typeNames":["UInt16"],"name":"instLTUInt16","className":"LT"},{"typeNames":["UInt16"],"name":"instLEUInt16","className":"LE"},{"typeNames":["UInt16"],"name":"instComplementUInt16","className":"Complement"},{"typeNames":["UInt16"],"name":"instNegUInt16","className":"Neg"},{"typeNames":["UInt16"],"name":"instAndOpUInt16","className":"AndOp"},{"typeNames":["UInt16"],"name":"instOrOpUInt16","className":"OrOp"},{"typeNames":["UInt16"],"name":"instXorUInt16","className":"Xor"},{"typeNames":["UInt16"],"name":"instShiftLeftUInt16","className":"ShiftLeft"},{"typeNames":["UInt16"],"name":"instShiftRightUInt16","className":"ShiftRight"},{"typeNames":["LT.lt"],"name":"UInt16.decLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"UInt16.decLe","className":"Decidable"},{"typeNames":["UInt16"],"name":"instMaxUInt16","className":"Max"},{"typeNames":["UInt16"],"name":"instMinUInt16","className":"Min"},{"typeNames":["UInt32"],"name":"instAddUInt32","className":"Add"},{"typeNames":["UInt32"],"name":"instSubUInt32","className":"Sub"},{"typeNames":["UInt32"],"name":"instMulUInt32","className":"Mul"},{"typeNames":["UInt32","Nat"],"name":"instPowUInt32Nat","className":"Pow"},{"typeNames":["UInt32"],"name":"instModUInt32","className":"Mod"},{"typeNames":["UInt32","Nat","UInt32"],"name":"instHModUInt32Nat","className":"HMod"},{"typeNames":["UInt32"],"name":"instDivUInt32","className":"Div"},{"typeNames":["UInt32"],"name":"instComplementUInt32","className":"Complement"},{"typeNames":["UInt32"],"name":"instNegUInt32","className":"Neg"},{"typeNames":["UInt32"],"name":"instAndOpUInt32","className":"AndOp"},{"typeNames":["UInt32"],"name":"instOrOpUInt32","className":"OrOp"},{"typeNames":["UInt32"],"name":"instXorUInt32","className":"Xor"},{"typeNames":["UInt32"],"name":"instShiftLeftUInt32","className":"ShiftLeft"},{"typeNames":["UInt32"],"name":"instShiftRightUInt32","className":"ShiftRight"},{"typeNames":["UInt64"],"name":"instAddUInt64","className":"Add"},{"typeNames":["UInt64"],"name":"instSubUInt64","className":"Sub"},{"typeNames":["UInt64"],"name":"instMulUInt64","className":"Mul"},{"typeNames":["UInt64","Nat"],"name":"instPowUInt64Nat","className":"Pow"},{"typeNames":["UInt64"],"name":"instModUInt64","className":"Mod"},{"typeNames":["UInt64","Nat","UInt64"],"name":"instHModUInt64Nat","className":"HMod"},{"typeNames":["UInt64"],"name":"instDivUInt64","className":"Div"},{"typeNames":["UInt64"],"name":"instLTUInt64","className":"LT"},{"typeNames":["UInt64"],"name":"instLEUInt64","className":"LE"},{"typeNames":["UInt64"],"name":"instComplementUInt64","className":"Complement"},{"typeNames":["UInt64"],"name":"instNegUInt64","className":"Neg"},{"typeNames":["UInt64"],"name":"instAndOpUInt64","className":"AndOp"},{"typeNames":["UInt64"],"name":"instOrOpUInt64","className":"OrOp"},{"typeNames":["UInt64"],"name":"instXorUInt64","className":"Xor"},{"typeNames":["UInt64"],"name":"instShiftLeftUInt64","className":"ShiftLeft"},{"typeNames":["UInt64"],"name":"instShiftRightUInt64","className":"ShiftRight"},{"typeNames":["LT.lt"],"name":"UInt64.decLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"UInt64.decLe","className":"Decidable"},{"typeNames":["UInt64"],"name":"instMaxUInt64","className":"Max"},{"typeNames":["UInt64"],"name":"instMinUInt64","className":"Min"},{"typeNames":["USize"],"name":"instMulUSize","className":"Mul"},{"typeNames":["USize","Nat"],"name":"instPowUSizeNat","className":"Pow"},{"typeNames":["USize"],"name":"instModUSize","className":"Mod"},{"typeNames":["USize","Nat","USize"],"name":"instHModUSizeNat","className":"HMod"},{"typeNames":["USize"],"name":"instDivUSize","className":"Div"},{"typeNames":["USize"],"name":"instComplementUSize","className":"Complement"},{"typeNames":["USize"],"name":"instNegUSize","className":"Neg"},{"typeNames":["USize"],"name":"instAndOpUSize","className":"AndOp"},{"typeNames":["USize"],"name":"instOrOpUSize","className":"OrOp"},{"typeNames":["USize"],"name":"instXorUSize","className":"Xor"},{"typeNames":["USize"],"name":"instShiftLeftUSize","className":"ShiftLeft"},{"typeNames":["USize"],"name":"instShiftRightUSize","className":"ShiftRight"},{"typeNames":["USize"],"name":"instMaxUSize","className":"Max"},{"typeNames":["USize"],"name":"instMinUSize","className":"Min"}],"imports":["Init.Data.UInt.BasicAux","Init.Data.BitVec.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1070-L1070","name":"instMinUSize","line":1070,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMinUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUSize\"><span class=\"name\">instMinUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1069-L1069","name":"instMaxUSize","line":1069,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMaxUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUSize\"><span class=\"name\">instMaxUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1063-L1067","name":"Bool.toUSize","line":1063,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#Bool.toUSize","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUSize\"><span class=\"name\">Bool</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1061-L1061","name":"instShiftRightUSize","line":1061,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUSize\"><span class=\"name\">instShiftRightUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1060-L1060","name":"instShiftLeftUSize","line":1060,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUSize\"><span class=\"name\">instShiftLeftUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1059-L1059","name":"instXorUSize","line":1059,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instXorUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorUSize\"><span class=\"name\">instXorUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1058-L1058","name":"instOrOpUSize","line":1058,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instOrOpUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUSize\"><span class=\"name\">instOrOpUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1057-L1057","name":"instAndOpUSize","line":1057,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAndOpUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUSize\"><span class=\"name\">instAndOpUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1056-L1056","name":"instNegUSize","line":1056,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instNegUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUSize\"><span class=\"name\">instNegUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1055-L1055","name":"instComplementUSize","line":1055,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instComplementUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUSize\"><span class=\"name\">instComplementUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1047-L1053","name":"USize.neg","line":1047,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.neg","doc":"Negation of word-sized unsigned integers, computed modulo `USize.size`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.neg\"><span class=\"name\">USize</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1037-L1046","name":"USize.complement","line":1037,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.complement","doc":"Bitwise complement, also known as bitwise negation, for word-sized unsigned integers. Usually\naccessed via the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.complement\"><span class=\"name\">USize</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1035-L1035","name":"instDivUSize","line":1035,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instDivUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUSize\"><span class=\"name\">instDivUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1033-L1033","name":"instHModUSizeNat","line":1033,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instHModUSizeNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUSizeNat\"><span class=\"name\">instHModUSizeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#USize\">USize</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1030-L1030","name":"instModUSize","line":1030,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instModUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUSize\"><span class=\"name\">instModUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1029-L1029","name":"instPowUSizeNat","line":1029,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instPowUSizeNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUSizeNat\"><span class=\"name\">instPowUSizeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#USize\">USize</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1028-L1028","name":"instMulUSize","line":1028,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMulUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUSize\"><span class=\"name\">instMulUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1018-L1026","name":"USize.toUInt64","line":1018,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt64","doc":"Converts word-sized unsigned integers to 32-bit unsigned integers. This cannot overflow because\n`USize.size` is either `2^32` or `2^64`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1010-L1017","name":"UInt64.toUSize","line":1010,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.toUSize","doc":"Converts 64-bit unsigned integers to word-sized unsigned integers. On 32-bit machines, this may\noverflow, which results in the value wrapping around (that is, it is reduced modulo `USize.size`).\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L1002-L1009","name":"USize.toUInt32","line":1002,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt32","doc":"Converts word-sized unsigned integers to 32-bit unsigned integers. Wraps around on overflow, which\nmight occur on 64-bit architectures.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L995-L1001","name":"UInt32.toUSize","line":995,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.toUSize","doc":"Converts 32-bit unsigned integers to word-sized unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L988-L994","name":"USize.toUInt16","line":988,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt16","doc":"Converts word-sized unsigned integers to 16-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L980-L987","name":"UInt16.toUSize","line":980,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.toUSize","doc":"Converts 16-bit unsigned integers to word-sized unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L973-L979","name":"USize.toUInt8","line":973,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt8","doc":"Converts word-sized unsigned integers to 8-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L965-L972","name":"UInt8.toUSize","line":965,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.toUSize","doc":"Converts 8-bit unsigned integers to word-sized unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L956-L964","name":"USize.ofNat32","line":956,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.ofNat32","doc":"Converts a natural number to a `USize`. Overflow is impossible on any supported platform because\n`USize.size` is either `2^32` or `2^64`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofNat32\"><span class=\"name\">USize</span>.<span class=\"name\">ofNat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">4294967296</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L949-L955","name":"USize.shiftRight","line":949,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.shiftRight","doc":"Bitwise right shift for word-sized unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.shiftRight\"><span class=\"name\">USize</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L942-L948","name":"USize.shiftLeft","line":942,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.shiftLeft","doc":"Bitwise left shift for word-sized unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L932-L941","name":"USize.xor","line":932,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.xor","doc":"Bitwise exclusive or for word-sized unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.xor\"><span class=\"name\">USize</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L922-L931","name":"USize.lor","line":922,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.lor","doc":"Bitwise or for word-sized unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.lor\"><span class=\"name\">USize</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L913-L921","name":"USize.land","line":913,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.land","doc":"Bitwise and for word-sized unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.land\"><span class=\"name\">USize</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L911-L912","name":"USize.modn","line":911,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.modn\"><span class=\"name\">USize</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L893-L907","name":"USize.mod","line":893,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.mod","doc":"The modulo operator for word-sized unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `USize.mod 5 2 = 1`\n* `USize.mod 4 2 = 0`\n* `USize.mod 4 0 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.mod\"><span class=\"name\">USize</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L882-L892","name":"USize.pow","line":882,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.pow","doc":"The power operation, raising a word-sized unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.pow\"><span class=\"name\">USize</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L872-L881","name":"USize.div","line":872,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.div","doc":"Unsigned division for word-sized unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.div\"><span class=\"name\">USize</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L864-L871","name":"USize.mul","line":864,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.mul","doc":"Multiplies two word-sized unsigned integers, wrapping around on overflow.  Usually accessed via the\n`*` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.mul\"><span class=\"name\">USize</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L860-L862","name":"le_usize_size","line":860,"kind":"theorem","docLink":"./Init/Data/UInt/Basic.html#le_usize_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#le_usize_size\"><span class=\"name\">le_usize_size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">4294967296</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L856-L858","name":"usize_size_le","line":856,"kind":"theorem","docLink":"./Init/Data/UInt/Basic.html#usize_size_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#usize_size_le\"><span class=\"name\">usize_size_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">18446744073709551616</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L854-L854","name":"USize.size_le","line":854,"kind":"theorem","docLink":"./Init/Data/UInt/Basic.html#USize.size_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.size_le\"><span class=\"name\">USize</span>.<span class=\"name\">size_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.size\">size</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L853-L853","name":"USize.le_size","line":853,"kind":"theorem","docLink":"./Init/Data/UInt/Basic.html#USize.le_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.le_size\"><span class=\"name\">USize</span>.<span class=\"name\">le_size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L850-L851","name":"USize.ofInt","line":850,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.ofInt","doc":"Converts an `Int` to a `USize` by taking the (non-negative remainder of the division by `2 ^ numBits`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofInt\"><span class=\"name\">USize</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L846-L848","name":"USize.ofNatCore","line":846,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.ofNatCore","doc":"Converts a natural number to a `USize`. Requires a proof that the number is small enough to be\nrepresentable without overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofNatCore\"><span class=\"name\">USize</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#USize.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L843-L845","name":"USize.mk","line":843,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.mk","doc":"Creates a `USize` from a `BitVec System.Platform.numBits`. This function is overridden with a\nnative implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.mk\"><span class=\"name\">USize</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L841-L842","name":"USize.ofFin","line":841,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.ofFin","doc":"Converts a `Fin USize.size` into the corresponding `USize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofFin\"><span class=\"name\">USize</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L839-L839","name":"instMinUInt64","line":839,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMinUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUInt64\"><span class=\"name\">instMinUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L838-L838","name":"instMaxUInt64","line":838,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMaxUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUInt64\"><span class=\"name\">instMaxUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L820-L834","name":"UInt64.decLe","line":820,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt64.decLe","doc":"Decides whether one 64-bit unsigned integer is less than or equal to another. Usually accessed via the\n`DecidableLE UInt64` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (15 : UInt64) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : UInt64) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `(if (5 : UInt64) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `show (7 : UInt64) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.decLe\"><span class=\"name\">UInt64</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L805-L818","name":"UInt64.decLt","line":805,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt64.decLt","doc":"Decides whether one 64-bit unsigned integer is strictly less than another. Usually accessed via the\n`DecidableLT UInt64` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (6 : UInt64) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : UInt64) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : UInt64) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.decLt\"><span class=\"name\">UInt64</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L799-L803","name":"Bool.toUInt64","line":799,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt64","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt64\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L797-L797","name":"instShiftRightUInt64","line":797,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt64\"><span class=\"name\">instShiftRightUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L796-L796","name":"instShiftLeftUInt64","line":796,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt64\"><span class=\"name\">instShiftLeftUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L795-L795","name":"instXorUInt64","line":795,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instXorUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorUInt64\"><span class=\"name\">instXorUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L794-L794","name":"instOrOpUInt64","line":794,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt64\"><span class=\"name\">instOrOpUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L793-L793","name":"instAndOpUInt64","line":793,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt64\"><span class=\"name\">instAndOpUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L792-L792","name":"instNegUInt64","line":792,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instNegUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt64\"><span class=\"name\">instNegUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L791-L791","name":"instComplementUInt64","line":791,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt64\"><span class=\"name\">instComplementUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L781-L789","name":"UInt64.neg","line":781,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.neg","doc":"Negation of 64-bit unsigned integers, computed modulo `UInt64.size`.\n\n`UInt64.neg a` is equivalent to `18_446_744_073_709_551_615 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.neg\"><span class=\"name\">UInt64</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L771-L780","name":"UInt64.complement","line":771,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.complement","doc":"Bitwise complement, also known as bitwise negation, for 64-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.complement\"><span class=\"name\">UInt64</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L769-L769","name":"instLEUInt64","line":769,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLEUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLEUInt64\"><span class=\"name\">instLEUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L768-L768","name":"instLTUInt64","line":768,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLTUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLTUInt64\"><span class=\"name\">instLTUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L767-L767","name":"instDivUInt64","line":767,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instDivUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt64\"><span class=\"name\">instDivUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L765-L765","name":"instHModUInt64Nat","line":765,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instHModUInt64Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt64Nat\"><span class=\"name\">instHModUInt64Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L762-L762","name":"instModUInt64","line":762,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instModUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt64\"><span class=\"name\">instModUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L761-L761","name":"instPowUInt64Nat","line":761,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instPowUInt64Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt64Nat\"><span class=\"name\">instPowUInt64Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L760-L760","name":"instMulUInt64","line":760,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMulUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt64\"><span class=\"name\">instMulUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L759-L759","name":"instSubUInt64","line":759,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instSubUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt64\"><span class=\"name\">instSubUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L758-L758","name":"instAddUInt64","line":758,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAddUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt64\"><span class=\"name\">instAddUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L752-L756","name":"UInt64.le","line":752,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.le","doc":"Non-strict inequality of 64-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.le\"><span class=\"name\">UInt64</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L747-L751","name":"UInt64.lt","line":747,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.lt","doc":"Strict inequality of 64-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.lt\"><span class=\"name\">UInt64</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L740-L746","name":"UInt64.shiftRight","line":740,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.shiftRight","doc":"Bitwise right shift for 64-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.shiftRight\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L733-L739","name":"UInt64.shiftLeft","line":733,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.shiftLeft","doc":"Bitwise left shift for 64-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L723-L732","name":"UInt64.xor","line":723,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.xor","doc":"Bitwise exclusive or for 64-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L713-L722","name":"UInt64.lor","line":713,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.lor","doc":"Bitwise or for 64-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.lor\"><span class=\"name\">UInt64</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L704-L712","name":"UInt64.land","line":704,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.land","doc":"Bitwise and for 64-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.land\"><span class=\"name\">UInt64</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L702-L703","name":"UInt64.modn","line":702,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.modn\"><span class=\"name\">UInt64</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L684-L698","name":"UInt64.mod","line":684,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.mod","doc":"The modulo operator for 64-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt64.mod 5 2 = 1`\n* `UInt64.mod 4 2 = 0`\n* `UInt64.mod 4 0 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L673-L683","name":"UInt64.pow","line":673,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.pow","doc":"The power operation, raising a 64-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.pow\"><span class=\"name\">UInt64</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L663-L672","name":"UInt64.div","line":663,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.div","doc":"Unsigned division for 64-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.div\"><span class=\"name\">UInt64</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L655-L662","name":"UInt64.mul","line":655,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.mul","doc":"Multiplies two 64-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.mul\"><span class=\"name\">UInt64</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L647-L654","name":"UInt64.sub","line":647,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.sub","doc":"Subtracts one 64-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.sub\"><span class=\"name\">UInt64</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L639-L646","name":"UInt64.add","line":639,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.add","doc":"Adds two 64-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.add\"><span class=\"name\">UInt64</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L636-L637","name":"UInt64.ofInt","line":636,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.ofInt","doc":"Converts an `Int` to a `UInt64` by taking the (non-negative remainder of the division by `2 ^ 64`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.ofInt\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L632-L634","name":"UInt64.ofNatCore","line":632,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.ofNatCore","doc":"Converts a natural number to a 64-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^64`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.ofNatCore\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L629-L631","name":"UInt64.mk","line":629,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.mk","doc":"Creates a `UInt64` from a `BitVec 64`. This function is overridden with a native implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.mk\"><span class=\"name\">UInt64</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L627-L628","name":"UInt64.ofFin","line":627,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.ofFin","doc":"Converts a `Fin UInt64.size` into the corresponding `UInt64`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L621-L625","name":"Bool.toUInt32","line":621,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt32","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt32\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L619-L619","name":"instShiftRightUInt32","line":619,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt32\"><span class=\"name\">instShiftRightUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L618-L618","name":"instShiftLeftUInt32","line":618,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt32\"><span class=\"name\">instShiftLeftUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L617-L617","name":"instXorUInt32","line":617,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instXorUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorUInt32\"><span class=\"name\">instXorUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L616-L616","name":"instOrOpUInt32","line":616,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt32\"><span class=\"name\">instOrOpUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L615-L615","name":"instAndOpUInt32","line":615,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt32\"><span class=\"name\">instAndOpUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L614-L614","name":"instNegUInt32","line":614,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instNegUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt32\"><span class=\"name\">instNegUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L613-L613","name":"instComplementUInt32","line":613,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt32\"><span class=\"name\">instComplementUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L603-L611","name":"UInt32.neg","line":603,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.neg","doc":"Negation of 32-bit unsigned integers, computed modulo `UInt32.size`.\n\n`UInt32.neg a` is equivalent to `429_4967_295 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.neg\"><span class=\"name\">UInt32</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L593-L602","name":"UInt32.complement","line":593,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.complement","doc":"Bitwise complement, also known as bitwise negation, for 32-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.complement\"><span class=\"name\">UInt32</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L590-L590","name":"instDivUInt32","line":590,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instDivUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt32\"><span class=\"name\">instDivUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L588-L588","name":"instHModUInt32Nat","line":588,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instHModUInt32Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt32Nat\"><span class=\"name\">instHModUInt32Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L585-L585","name":"instModUInt32","line":585,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instModUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt32\"><span class=\"name\">instModUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L584-L584","name":"instPowUInt32Nat","line":584,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instPowUInt32Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt32Nat\"><span class=\"name\">instPowUInt32Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L583-L583","name":"instMulUInt32","line":583,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMulUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt32\"><span class=\"name\">instMulUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L582-L582","name":"instSubUInt32","line":582,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instSubUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt32\"><span class=\"name\">instSubUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L581-L581","name":"instAddUInt32","line":581,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAddUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt32\"><span class=\"name\">instAddUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L575-L579","name":"UInt32.le","line":575,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.le","doc":"Non-strict inequality of 32-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.le\"><span class=\"name\">UInt32</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L568-L574","name":"UInt32.lt","line":568,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.lt","doc":"Strict inequality of 32-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L561-L567","name":"UInt32.shiftRight","line":561,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.shiftRight","doc":"Bitwise right shift for 32-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.shiftRight\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L554-L560","name":"UInt32.shiftLeft","line":554,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.shiftLeft","doc":"Bitwise left shift for 32-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L544-L553","name":"UInt32.xor","line":544,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.xor","doc":"Bitwise exclusive or for 32-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L534-L543","name":"UInt32.lor","line":534,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.lor","doc":"Bitwise or for 32-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.lor\"><span class=\"name\">UInt32</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L525-L533","name":"UInt32.land","line":525,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.land","doc":"Bitwise and for 32-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.land\"><span class=\"name\">UInt32</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L523-L524","name":"UInt32.modn","line":523,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.modn\"><span class=\"name\">UInt32</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L505-L519","name":"UInt32.mod","line":505,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.mod","doc":"The modulo operator for 32-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt32.mod 5 2 = 1`\n* `UInt32.mod 4 2 = 0`\n* `UInt32.mod 4 0 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L494-L504","name":"UInt32.pow","line":494,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.pow","doc":"The power operation, raising a 32-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.pow\"><span class=\"name\">UInt32</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L484-L493","name":"UInt32.div","line":484,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.div","doc":"Unsigned division for 32-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.div\"><span class=\"name\">UInt32</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L476-L483","name":"UInt32.mul","line":476,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.mul","doc":"Multiplies two 32-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.mul\"><span class=\"name\">UInt32</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L468-L475","name":"UInt32.sub","line":468,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.sub","doc":"Subtracts one 32-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.sub\"><span class=\"name\">UInt32</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L460-L467","name":"UInt32.add","line":460,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.add","doc":"Adds two 32-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.add\"><span class=\"name\">UInt32</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L457-L458","name":"UInt32.ofInt","line":457,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.ofInt","doc":"Converts an `Int` to a `UInt32` by taking the (non-negative remainder of the division by `2 ^ 32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.ofInt\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L453-L455","name":"UInt32.ofNatCore","line":453,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.ofNatCore","doc":"Converts a natural number to a 32-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^32`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.ofNatCore\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L450-L452","name":"UInt32.mk","line":450,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.mk","doc":"Creates a `UInt32` from a `BitVec 32`. This function is overridden with a native implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.mk\"><span class=\"name\">UInt32</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L448-L449","name":"UInt32.ofFin","line":448,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.ofFin","doc":"Converts a `Fin UInt32.size` into the corresponding `UInt32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L446-L446","name":"instMinUInt16","line":446,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMinUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUInt16\"><span class=\"name\">instMinUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L445-L445","name":"instMaxUInt16","line":445,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMaxUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUInt16\"><span class=\"name\">instMaxUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L427-L441","name":"UInt16.decLe","line":427,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt16.decLe","doc":"Decides whether one 16-bit unsigned integer is less than or equal to another. Usually accessed via the\n`DecidableLE UInt16` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (15 : UInt16) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : UInt16) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `(if (5 : UInt16) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `show (7 : UInt16) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.decLe\"><span class=\"name\">UInt16</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L411-L424","name":"UInt16.decLt","line":411,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt16.decLt","doc":"Decides whether one 16-bit unsigned integer is strictly less than another. Usually accessed via the\n`DecidableLT UInt16` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (6 : UInt16) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : UInt16) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : UInt16) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.decLt\"><span class=\"name\">UInt16</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L404-L408","name":"Bool.toUInt16","line":404,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt16","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt16\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L402-L402","name":"instShiftRightUInt16","line":402,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt16\"><span class=\"name\">instShiftRightUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L401-L401","name":"instShiftLeftUInt16","line":401,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt16\"><span class=\"name\">instShiftLeftUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L400-L400","name":"instXorUInt16","line":400,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instXorUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorUInt16\"><span class=\"name\">instXorUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L399-L399","name":"instOrOpUInt16","line":399,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt16\"><span class=\"name\">instOrOpUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L398-L398","name":"instAndOpUInt16","line":398,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt16\"><span class=\"name\">instAndOpUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L397-L397","name":"instNegUInt16","line":397,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instNegUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt16\"><span class=\"name\">instNegUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L396-L396","name":"instComplementUInt16","line":396,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt16\"><span class=\"name\">instComplementUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L386-L394","name":"UInt16.neg","line":386,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.neg","doc":"Negation of 16-bit unsigned integers, computed modulo `UInt16.size`.\n\n`UInt16.neg a` is equivalent to `65_535 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.neg\"><span class=\"name\">UInt16</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L376-L385","name":"UInt16.complement","line":376,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.complement","doc":"Bitwise complement, also known as bitwise negation, for 16-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.complement\"><span class=\"name\">UInt16</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L374-L374","name":"instLEUInt16","line":374,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLEUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLEUInt16\"><span class=\"name\">instLEUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L373-L373","name":"instLTUInt16","line":373,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLTUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLTUInt16\"><span class=\"name\">instLTUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L372-L372","name":"instDivUInt16","line":372,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instDivUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt16\"><span class=\"name\">instDivUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L370-L370","name":"instHModUInt16Nat","line":370,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instHModUInt16Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt16Nat\"><span class=\"name\">instHModUInt16Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L367-L367","name":"instModUInt16","line":367,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instModUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt16\"><span class=\"name\">instModUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L366-L366","name":"instPowUInt16Nat","line":366,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instPowUInt16Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt16Nat\"><span class=\"name\">instPowUInt16Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L365-L365","name":"instMulUInt16","line":365,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMulUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt16\"><span class=\"name\">instMulUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L364-L364","name":"instSubUInt16","line":364,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instSubUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt16\"><span class=\"name\">instSubUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L363-L363","name":"instAddUInt16","line":363,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAddUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt16\"><span class=\"name\">instAddUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L357-L361","name":"UInt16.le","line":357,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.le","doc":"Non-strict inequality of 16-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.le\"><span class=\"name\">UInt16</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L352-L356","name":"UInt16.lt","line":352,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.lt","doc":"Strict inequality of 16-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.lt\"><span class=\"name\">UInt16</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L345-L351","name":"UInt16.shiftRight","line":345,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.shiftRight","doc":"Bitwise right shift for 16-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L338-L344","name":"UInt16.shiftLeft","line":338,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.shiftLeft","doc":"Bitwise left shift for 16-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L328-L337","name":"UInt16.xor","line":328,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.xor","doc":"Bitwise exclusive or for 16-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L318-L327","name":"UInt16.lor","line":318,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.lor","doc":"Bitwise or for 16-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.lor\"><span class=\"name\">UInt16</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L309-L317","name":"UInt16.land","line":309,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.land","doc":"Bitwise and for 16-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.land\"><span class=\"name\">UInt16</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L307-L308","name":"UInt16.modn","line":307,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.modn\"><span class=\"name\">UInt16</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L289-L303","name":"UInt16.mod","line":289,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.mod","doc":"The modulo operator for 16-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt16.mod 5 2 = 1`\n* `UInt16.mod 4 2 = 0`\n* `UInt16.mod 4 0 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.mod\"><span class=\"name\">UInt16</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L278-L288","name":"UInt16.pow","line":278,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.pow","doc":"The power operation, raising a 16-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.pow\"><span class=\"name\">UInt16</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L268-L277","name":"UInt16.div","line":268,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.div","doc":"Unsigned division for 16-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.div\"><span class=\"name\">UInt16</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L260-L267","name":"UInt16.mul","line":260,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.mul","doc":"Multiplies two 16-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.mul\"><span class=\"name\">UInt16</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L252-L259","name":"UInt16.sub","line":252,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.sub","doc":"Subtracts one 16-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.sub\"><span class=\"name\">UInt16</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L244-L251","name":"UInt16.add","line":244,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.add","doc":"Adds two 16-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.add\"><span class=\"name\">UInt16</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L241-L242","name":"UInt16.ofInt","line":241,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.ofInt","doc":"Converts an `Int` to a `UInt16` by taking the (non-negative remainder of the division by `2 ^ 16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.ofInt\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L237-L239","name":"UInt16.ofNatCore","line":237,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.ofNatCore","doc":"Converts a natural number to a 16-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^16`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.ofNatCore\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L234-L236","name":"UInt16.mk","line":234,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.mk","doc":"Creates a `UInt16` from a `BitVec 16`. This function is overridden with a native implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.mk\"><span class=\"name\">UInt16</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L232-L233","name":"UInt16.ofFin","line":232,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.ofFin","doc":"Converts a `Fin UInt16.size` into the corresponding `UInt16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L230-L230","name":"instMinUInt8","line":230,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMinUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUInt8\"><span class=\"name\">instMinUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L229-L229","name":"instMaxUInt8","line":229,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMaxUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUInt8\"><span class=\"name\">instMaxUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L211-L225","name":"UInt8.decLe","line":211,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt8.decLe","doc":"Decides whether one 8-bit unsigned integer is less than or equal to another. Usually accessed via the\n`DecidableLE UInt8` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (15 : UInt8) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : UInt8) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `(if (5 : UInt8) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `show (7 : UInt8) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.decLe\"><span class=\"name\">UInt8</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L196-L209","name":"UInt8.decLt","line":196,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt8.decLt","doc":"Decides whether one 8-bit unsigned integer is strictly less than another. Usually accessed via the\n`DecidableLT UInt8` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (6 : UInt8) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : UInt8) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : UInt8) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.decLt\"><span class=\"name\">UInt8</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L190-L194","name":"Bool.toUInt8","line":190,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt8","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt8\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L188-L188","name":"instShiftRightUInt8","line":188,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt8\"><span class=\"name\">instShiftRightUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L187-L187","name":"instShiftLeftUInt8","line":187,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt8\"><span class=\"name\">instShiftLeftUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L186-L186","name":"instXorUInt8","line":186,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instXorUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorUInt8\"><span class=\"name\">instXorUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L185-L185","name":"instOrOpUInt8","line":185,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt8\"><span class=\"name\">instOrOpUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L184-L184","name":"instAndOpUInt8","line":184,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt8\"><span class=\"name\">instAndOpUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L183-L183","name":"instNegUInt8","line":183,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instNegUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt8\"><span class=\"name\">instNegUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L182-L182","name":"instComplementUInt8","line":182,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt8\"><span class=\"name\">instComplementUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L172-L180","name":"UInt8.neg","line":172,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.neg","doc":"Negation of 8-bit unsigned integers, computed modulo `UInt8.size`.\n\n`UInt8.neg a` is equivalent to `255 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.neg\"><span class=\"name\">UInt8</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L162-L171","name":"UInt8.complement","line":162,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.complement","doc":"Bitwise complement, also known as bitwise negation, for 8-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.complement\"><span class=\"name\">UInt8</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L160-L160","name":"instLEUInt8","line":160,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLEUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLEUInt8\"><span class=\"name\">instLEUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L159-L159","name":"instLTUInt8","line":159,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLTUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLTUInt8\"><span class=\"name\">instLTUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L158-L158","name":"instDivUInt8","line":158,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instDivUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt8\"><span class=\"name\">instDivUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L156-L156","name":"instHModUInt8Nat","line":156,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instHModUInt8Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt8Nat\"><span class=\"name\">instHModUInt8Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L153-L153","name":"instModUInt8","line":153,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instModUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt8\"><span class=\"name\">instModUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L152-L152","name":"instPowUInt8Nat","line":152,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instPowUInt8Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt8Nat\"><span class=\"name\">instPowUInt8Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L151-L151","name":"instMulUInt8","line":151,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMulUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt8\"><span class=\"name\">instMulUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L150-L150","name":"instSubUInt8","line":150,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instSubUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt8\"><span class=\"name\">instSubUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L149-L149","name":"instAddUInt8","line":149,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAddUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt8\"><span class=\"name\">instAddUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L143-L147","name":"UInt8.le","line":143,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.le","doc":"Non-strict inequality of 8-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.le\"><span class=\"name\">UInt8</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L138-L142","name":"UInt8.lt","line":138,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.lt","doc":"Strict inequality of 8-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.lt\"><span class=\"name\">UInt8</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L131-L137","name":"UInt8.shiftRight","line":131,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.shiftRight","doc":"Bitwise right shift for 8-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L124-L130","name":"UInt8.shiftLeft","line":124,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.shiftLeft","doc":"Bitwise left shift for 8-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L114-L123","name":"UInt8.xor","line":114,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.xor","doc":"Bitwise exclusive or for 8-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L104-L113","name":"UInt8.lor","line":104,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.lor","doc":"Bitwise or for 8-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.lor\"><span class=\"name\">UInt8</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L95-L103","name":"UInt8.land","line":95,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.land","doc":"Bitwise and for 8-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.land\"><span class=\"name\">UInt8</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L93-L94","name":"UInt8.modn","line":93,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.modn\"><span class=\"name\">UInt8</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L75-L89","name":"UInt8.mod","line":75,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.mod","doc":"The modulo operator for 8-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt8.mod 5 2 = 1`\n* `UInt8.mod 4 2 = 0`\n* `UInt8.mod 4 0 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.mod\"><span class=\"name\">UInt8</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L64-L74","name":"UInt8.pow","line":64,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.pow","doc":"The power operation, raising an 8-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.pow\"><span class=\"name\">UInt8</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L54-L63","name":"UInt8.div","line":54,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.div","doc":"Unsigned division for 8-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.div\"><span class=\"name\">UInt8</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L46-L53","name":"UInt8.mul","line":46,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.mul","doc":"Multiplies two 8-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.mul\"><span class=\"name\">UInt8</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L38-L45","name":"UInt8.sub","line":38,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.sub","doc":"Subtracts one 8-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.sub\"><span class=\"name\">UInt8</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L30-L37","name":"UInt8.add","line":30,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.add","doc":"Adds two 8-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.add\"><span class=\"name\">UInt8</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L27-L28","name":"UInt8.ofInt","line":27,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.ofInt","doc":"Converts an `Int` to a `UInt8` by taking the (non-negative remainder of the division by `2 ^ 8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.ofInt\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L23-L25","name":"UInt8.ofNatCore","line":23,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.ofNatCore","doc":"Converts a natural number to an 8-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^8`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.ofNatCore\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L20-L22","name":"UInt8.mk","line":20,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.mk","doc":"Creates a `UInt8` from a `BitVec 8`. This function is overridden with a native implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.mk\"><span class=\"name\">UInt8</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Init/Data/UInt/Basic.lean#L18-L19","name":"UInt8.ofFin","line":18,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.ofFin","doc":"Converts a `Fin UInt8.size` into the corresponding `UInt8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"}]}