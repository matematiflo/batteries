{"name":"Lean.Meta.Tactic.Grind.LawfulEqCmp","instances":[],"imports":["Lean.Meta.Tactic.Grind.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/LawfulEqCmp.lean#L44-L51","name":"Lean.Meta.Grind.propagateLawfulEqCmp","line":44,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/LawfulEqCmp.html#Lean.Meta.Grind.propagateLawfulEqCmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/LawfulEqCmp.html#Lean.Meta.Grind.propagateLawfulEqCmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateLawfulEqCmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/LawfulEqCmp.lean#L30-L42","name":"Lean.Meta.Grind.getLawfulEqCmpThm?.go?","line":30,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/LawfulEqCmp.html#Lean.Meta.Grind.getLawfulEqCmpThm?.go?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/LawfulEqCmp.html#Lean.Meta.Grind.getLawfulEqCmpThm?.go?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getLawfulEqCmpThm?</span>.<span class=\"name\">go?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/7c3ca70e29a0806bd4bfc62eae7084bbaf1a303d/src/Lean/Meta/Tactic/Grind/LawfulEqCmp.lean#L19-L42","name":"Lean.Meta.Grind.getLawfulEqCmpThm?","line":19,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/LawfulEqCmp.html#Lean.Meta.Grind.getLawfulEqCmpThm?","doc":"If `op` implements `LawfulEqCmp`, then returns the proof term for\n`∀ a b, op a b = .eq → a = b`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/LawfulEqCmp.html#Lean.Meta.Grind.getLawfulEqCmpThm?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getLawfulEqCmpThm?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"}]}